/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "js/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 22);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.3.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2018-01-20T17:24Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n      // Support: Chrome <=57, Firefox <=52\n      // In some browsers, typeof returns \"function\" for HTML <object> elements\n      // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n      // We don't want to classify *any* DOM node as a function.\n      return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n  };\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, doc, node ) {\n\t\tdoc = doc || document;\n\n\t\tvar i,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\t\t\t\tif ( node[ i ] ) {\n\t\t\t\t\tscript[ i ] = node[ i ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.3.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n        if ( nodeName( elem, \"iframe\" ) ) {\n            return elem.contentDocument;\n        }\n\n        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n        // Treat the template element as a regular one in browsers that\n        // don't support it.\n        if ( nodeName( elem, \"template\" ) ) {\n            elem = elem.content || elem;\n        }\n\n        return jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), doc, node );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = div.offsetWidth === 36 || \"absolute\";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a property mapped along what jQuery.cssProps suggests or to\n// a vendor prefixed property.\nfunction finalPropName( name ) {\n\tvar ret = jQuery.cssProps[ name ];\n\tif ( !ret ) {\n\t\tret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;\n\t}\n\treturn ret;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\t\t) );\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\t\tval = curCSS( elem, dimension, styles ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox;\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\t// Check for style in case a browser which returns unreliable values\n\t// for getComputedStyle silently falls back to the reliable elem.style\n\tvalueIsBorderBox = valueIsBorderBox &&\n\t\t( support.boxSizingReliable() || val === elem.style[ dimension ] );\n\n\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t// This happens for inline elements with no explicit setting (gh-3571)\n\t// Support: Android <=4.1 - 4.3 only\n\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\tif ( val === \"auto\" ||\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) {\n\n\t\tval = elem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];\n\n\t\t// offsetWidth/offsetHeight provide border-box values\n\t\tvalueIsBorderBox = true;\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\t\t\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra && boxModelAdjustment(\n\t\t\t\t\telem,\n\t\t\t\t\tdimension,\n\t\t\t\t\textra,\n\t\t\t\t\tisBorderBox,\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && support.scrollboxSize() === styles.position ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = Date.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\treturn jQuery;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* eslint-disable */\n/*!\r\n * VERSION: 2.0.2\r\n * DATE: 2018-08-27\r\n * UPDATES AND DOCS AT: http://greensock.com\r\n *\r\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\r\n * This work is subject to the terms at http://greensock.com/standard-license or for\r\n * Club GreenSock members, the software agreement that was issued with your membership.\r\n *\r\n * @author: Jack Doyle, jack@greensock.com\r\n */\n\n/* ES6 changes:\r\n\t- declare and export _gsScope at top.\r\n\t- set var TweenLite = the result of the main function\r\n\t- export default TweenLite at the bottom\r\n\t- return TweenLite at the bottom of the main function\r\n\t- pass in _gsScope as the first parameter of the main function (which is actually at the bottom)\r\n\t- remove the \"export to multiple environments\" in Definition().\r\n */\nvar _gsScope = exports._gsScope = typeof window !== 'undefined' ? window : typeof module !== 'undefined' && module.exports && typeof global !== 'undefined' ? global : undefined || {};\n\nvar TweenLite = exports.TweenLite = function (window, moduleName) {\n\n  'use strict';\n\n  var _exports = {},\n      _doc = window.document,\n      _globals = window.GreenSockGlobals = window.GreenSockGlobals || window;\n  if (_globals.TweenLite) {\n    return _globals.TweenLite; //in case the core set of classes is already loaded, don't instantiate twice.\n  }\n  var _namespace = function _namespace(ns) {\n    var a = ns.split('.'),\n        p = _globals,\n        i;\n    for (i = 0; i < a.length; i++) {\n      p[a[i]] = p = p[a[i]] || {};\n    }\n    return p;\n  },\n      gs = _namespace('com.greensock'),\n      _tinyNum = 0.0000000001,\n      _slice = function _slice(a) {\n    //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n    var b = [],\n        l = a.length,\n        i;\n    for (i = 0; i !== l; b.push(a[i++])) {}\n    return b;\n  },\n      _emptyFunc = function _emptyFunc() {},\n      _isArray = function () {\n    //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, \"(obj instanceof Array)\" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)\n    var toString = Object.prototype.toString,\n        array = toString.call([]);\n    return function (obj) {\n      return obj != null && (obj instanceof Array || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && !!obj.push && toString.call(obj) === array);\n    };\n  }(),\n      a,\n      i,\n      p,\n      _ticker,\n      _tickerActive,\n      _defLookup = {},\n\n\n  /**\r\n  * @constructor\r\n  * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.\r\n  * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is\r\n  * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin\r\n  * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.\r\n  *\r\n  * Every definition will be added to a \"com.greensock\" global object (typically window, but if a window.GreenSockGlobals object is found,\r\n  * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,\r\n  * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so\r\n  * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything\r\n  * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock\r\n  * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could\r\n  * sandbox the banner one like:\r\n  *\r\n  * <script>\r\n  *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a \"gs\" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, \"gs\" or \"banner\" or whatever.\r\n  * </script>\r\n  * <script src=\"js/greensock/v1.7/TweenMax.js\"></script>\r\n  * <script>\r\n  *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)\r\n  * </script>\r\n  * <script src=\"js/greensock/v1.6/TweenMax.js\"></script>\r\n  * <script>\r\n  *     gs.TweenLite.to(...); //would use v1.7\r\n  *     TweenLite.to(...); //would use v1.6\r\n  * </script>\r\n  *\r\n  * @param {!string} ns The namespace of the class definition, leaving off \"com.greensock.\" as that's assumed. For example, \"TweenLite\" or \"plugins.CSSPlugin\" or \"easing.Back\".\r\n  * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus \"com.greensock.\" prefix). For example [\"TweenLite\",\"plugins.TweenPlugin\",\"core.Animation\"]\r\n  * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.\r\n  * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)\r\n  */\n  Definition = function Definition(ns, dependencies, func, global) {\n    this.sc = _defLookup[ns] ? _defLookup[ns].sc : []; //subclasses\n    _defLookup[ns] = this;\n    this.gsClass = null;\n    this.func = func;\n    var _classes = [];\n    this.check = function (init) {\n      var i = dependencies.length,\n          missing = i,\n          cur,\n          a,\n          n,\n          cl;\n      while (--i > -1) {\n        if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {\n          _classes[i] = cur.gsClass;\n          missing--;\n        } else if (init) {\n          cur.sc.push(this);\n        }\n      }\n      if (missing === 0 && func) {\n        a = ('com.greensock.' + ns).split('.');\n        n = a.pop();\n        cl = _namespace(a.join('.'))[n] = this.gsClass = func.apply(func, _classes);\n\n        //exports to multiple environments\n        if (global) {\n          _globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)\n          /*\r\n          if (typeof(module) !== \"undefined\" && module.exports) { //node\r\n          if (ns === moduleName) {\r\n          module.exports = _exports[moduleName] = cl;\r\n          for (i in _exports) {\r\n          cl[i] = _exports[i];\r\n          }\r\n          } else if (_exports[moduleName]) {\r\n          _exports[moduleName][n] = cl;\r\n          }\r\n          } else if (typeof(define) === \"function\" && define.amd){ //AMD\r\n          define((window.GreenSockAMDPath ? window.GreenSockAMDPath + \"/\" : \"\") + ns.split(\".\").pop(), [], function() { return cl; });\r\n          }\r\n          */\n        }\n        for (i = 0; i < this.sc.length; i++) {\n          this.sc[i].check();\n        }\n      }\n    };\n    this.check(true);\n  },\n\n\n  //used to create Definition instances (which basically registers a class that has dependencies).\n  _gsDefine = window._gsDefine = function (ns, dependencies, func, global) {\n    return new Definition(ns, dependencies, func, global);\n  },\n\n\n  //a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).\n  _class = gs._class = function (ns, func, global) {\n    func = func || function () {};\n    _gsDefine(ns, [], function () {\n      return func;\n    }, global);\n    return func;\n  };\n\n  _gsDefine.globals = _globals;\n\n  /*\r\n  * ----------------------------------------------------------------\r\n  * Ease\r\n  * ----------------------------------------------------------------\r\n  */\n  var _baseParams = [0, 0, 1, 1],\n      Ease = _class('easing.Ease', function (func, extraParams, type, power) {\n    this._func = func;\n    this._type = type || 0;\n    this._power = power || 0;\n    this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;\n  }, true),\n      _easeMap = Ease.map = {},\n      _easeReg = Ease.register = function (ease, names, types, create) {\n    var na = names.split(','),\n        i = na.length,\n        ta = (types || 'easeIn,easeOut,easeInOut').split(','),\n        e,\n        name,\n        j,\n        type;\n    while (--i > -1) {\n      name = na[i];\n      e = create ? _class('easing.' + name, null, true) : gs.easing[name] || {};\n      j = ta.length;\n      while (--j > -1) {\n        type = ta[j];\n        _easeMap[name + '.' + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();\n      }\n    }\n  };\n\n  p = Ease.prototype;\n  p._calcEnd = false;\n  p.getRatio = function (p) {\n    if (this._func) {\n      this._params[0] = p;\n      return this._func.apply(null, this._params);\n    }\n    var t = this._type,\n        pw = this._power,\n        r = t === 1 ? 1 - p : t === 2 ? p : p < 0.5 ? p * 2 : (1 - p) * 2;\n    if (pw === 1) {\n      r *= r;\n    } else if (pw === 2) {\n      r *= r * r;\n    } else if (pw === 3) {\n      r *= r * r * r;\n    } else if (pw === 4) {\n      r *= r * r * r * r;\n    }\n    return t === 1 ? 1 - r : t === 2 ? r : p < 0.5 ? r / 2 : 1 - r / 2;\n  };\n\n  //create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)\n  a = ['Linear', 'Quad', 'Cubic', 'Quart', 'Quint,Strong'];\n  i = a.length;\n  while (--i > -1) {\n    p = a[i] + ',Power' + i;\n    _easeReg(new Ease(null, null, 1, i), p, 'easeOut', true);\n    _easeReg(new Ease(null, null, 2, i), p, 'easeIn' + (i === 0 ? ',easeNone' : ''));\n    _easeReg(new Ease(null, null, 3, i), p, 'easeInOut');\n  }\n  _easeMap.linear = gs.easing.Linear.easeIn;\n  _easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks\n\n\n  /*\r\n  * ----------------------------------------------------------------\r\n  * EventDispatcher\r\n  * ----------------------------------------------------------------\r\n  */\n  var EventDispatcher = _class('events.EventDispatcher', function (target) {\n    this._listeners = {};\n    this._eventTarget = target || this;\n  });\n  p = EventDispatcher.prototype;\n\n  p.addEventListener = function (type, callback, scope, useParam, priority) {\n    priority = priority || 0;\n    var list = this._listeners[type],\n        index = 0,\n        listener,\n        i;\n    if (this === _ticker && !_tickerActive) {\n      _ticker.wake();\n    }\n    if (list == null) {\n      this._listeners[type] = list = [];\n    }\n    i = list.length;\n    while (--i > -1) {\n      listener = list[i];\n      if (listener.c === callback && listener.s === scope) {\n        list.splice(i, 1);\n      } else if (index === 0 && listener.pr < priority) {\n        index = i + 1;\n      }\n    }\n    list.splice(index, 0, { c: callback, s: scope, up: useParam, pr: priority });\n  };\n\n  p.removeEventListener = function (type, callback) {\n    var list = this._listeners[type],\n        i;\n    if (list) {\n      i = list.length;\n      while (--i > -1) {\n        if (list[i].c === callback) {\n          list.splice(i, 1);\n          return;\n        }\n      }\n    }\n  };\n\n  p.dispatchEvent = function (type) {\n    var list = this._listeners[type],\n        i,\n        t,\n        listener;\n    if (list) {\n      i = list.length;\n      if (i > 1) {\n        list = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)\n      }\n      t = this._eventTarget;\n      while (--i > -1) {\n        listener = list[i];\n        if (listener) {\n          if (listener.up) {\n            listener.c.call(listener.s || t, { type: type, target: t });\n          } else {\n            listener.c.call(listener.s || t);\n          }\n        }\n      }\n    }\n  };\n\n  /*\r\n  * ----------------------------------------------------------------\r\n  * Ticker\r\n  * ----------------------------------------------------------------\r\n  */\n  var _reqAnimFrame = window.requestAnimationFrame,\n      _cancelAnimFrame = window.cancelAnimationFrame,\n      _getTime = Date.now || function () {\n    return new Date().getTime();\n  },\n      _lastUpdate = _getTime();\n\n  //now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.\n  a = ['ms', 'moz', 'webkit', 'o'];\n  i = a.length;\n  while (--i > -1 && !_reqAnimFrame) {\n    _reqAnimFrame = window[a[i] + 'RequestAnimationFrame'];\n    _cancelAnimFrame = window[a[i] + 'CancelAnimationFrame'] || window[a[i] + 'CancelRequestAnimationFrame'];\n  }\n\n  _class('Ticker', function (fps, useRAF) {\n    var _self = this,\n        _startTime = _getTime(),\n        _useRAF = useRAF !== false && _reqAnimFrame ? 'auto' : false,\n        _lagThreshold = 500,\n        _adjustedLag = 33,\n        _tickWord = 'tick',\n        //helps reduce gc burden\n    _fps,\n        _req,\n        _id,\n        _gap,\n        _nextTime,\n        _tick = function _tick(manual) {\n      var elapsed = _getTime() - _lastUpdate,\n          overlap,\n          dispatch;\n      if (elapsed > _lagThreshold) {\n        _startTime += elapsed - _adjustedLag;\n      }\n      _lastUpdate += elapsed;\n      _self.time = (_lastUpdate - _startTime) / 1000;\n      overlap = _self.time - _nextTime;\n      if (!_fps || overlap > 0 || manual === true) {\n        _self.frame++;\n        _nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);\n        dispatch = true;\n      }\n      if (manual !== true) {\n        //make sure the request is made before we dispatch the \"tick\" event so that timing is maintained. Otherwise, if processing the \"tick\" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.\n        _id = _req(_tick);\n      }\n      if (dispatch) {\n        _self.dispatchEvent(_tickWord);\n      }\n    };\n\n    EventDispatcher.call(_self);\n    _self.time = _self.frame = 0;\n    _self.tick = function () {\n      _tick(true);\n    };\n\n    _self.lagSmoothing = function (threshold, adjustedLag) {\n      if (!arguments.length) {\n        //if lagSmoothing() is called with no arguments, treat it like a getter that returns a boolean indicating if it's enabled or not. This is purposely undocumented and is for internal use.\n        return _lagThreshold < 1 / _tinyNum;\n      }\n      _lagThreshold = threshold || 1 / _tinyNum; //zero should be interpreted as basically unlimited\n      _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\n    };\n\n    _self.sleep = function () {\n      if (_id == null) {\n        return;\n      }\n      if (!_useRAF || !_cancelAnimFrame) {\n        clearTimeout(_id);\n      } else {\n        _cancelAnimFrame(_id);\n      }\n      _req = _emptyFunc;\n      _id = null;\n      if (_self === _ticker) {\n        _tickerActive = false;\n      }\n    };\n\n    _self.wake = function (seamless) {\n      if (_id !== null) {\n        _self.sleep();\n      } else if (seamless) {\n        _startTime += -_lastUpdate + (_lastUpdate = _getTime());\n      } else if (_self.frame > 10) {\n        //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().\n        _lastUpdate = _getTime() - _lagThreshold + 5;\n      }\n      _req = _fps === 0 ? _emptyFunc : !_useRAF || !_reqAnimFrame ? function (f) {\n        return setTimeout(f, (_nextTime - _self.time) * 1000 + 1 | 0);\n      } : _reqAnimFrame;\n      if (_self === _ticker) {\n        _tickerActive = true;\n      }\n      _tick(2);\n    };\n\n    _self.fps = function (value) {\n      if (!arguments.length) {\n        return _fps;\n      }\n      _fps = value;\n      _gap = 1 / (_fps || 60);\n      _nextTime = this.time + _gap;\n      _self.wake();\n    };\n\n    _self.useRAF = function (value) {\n      if (!arguments.length) {\n        return _useRAF;\n      }\n      _self.sleep();\n      _useRAF = value;\n      _self.fps(_fps);\n    };\n    _self.fps(fps);\n\n    //a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.\n    setTimeout(function () {\n      if (_useRAF === 'auto' && _self.frame < 5 && (_doc || {}).visibilityState !== 'hidden') {\n        _self.useRAF(false);\n      }\n    }, 1500);\n  });\n\n  p = gs.Ticker.prototype = new gs.events.EventDispatcher();\n  p.constructor = gs.Ticker;\n\n  /*\r\n  * ----------------------------------------------------------------\r\n  * Animation\r\n  * ----------------------------------------------------------------\r\n  */\n  var Animation = _class('core.Animation', function (duration, vars) {\n    this.vars = vars = vars || {};\n    this._duration = this._totalDuration = duration || 0;\n    this._delay = Number(vars.delay) || 0;\n    this._timeScale = 1;\n    this._active = vars.immediateRender === true;\n    this.data = vars.data;\n    this._reversed = vars.reversed === true;\n\n    if (!_rootTimeline) {\n      return;\n    }\n    if (!_tickerActive) {\n      //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.\n      _ticker.wake();\n    }\n\n    var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;\n    tl.add(this, tl._time);\n\n    if (this.vars.paused) {\n      this.paused(true);\n    }\n  });\n\n  _ticker = Animation.ticker = new gs.Ticker();\n  p = Animation.prototype;\n  p._dirty = p._gc = p._initted = p._paused = false;\n  p._totalTime = p._time = 0;\n  p._rawPrevTime = -1;\n  p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;\n  p._paused = false;\n\n  //some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.\n  var _checkTimeout = function _checkTimeout() {\n    if (_tickerActive && _getTime() - _lastUpdate > 2000 && ((_doc || {}).visibilityState !== 'hidden' || !_ticker.lagSmoothing())) {\n      //note: if the tab is hidden, we should still wake if lagSmoothing has been disabled.\n      _ticker.wake();\n    }\n    var t = setTimeout(_checkTimeout, 2000);\n    if (t.unref) {\n      // allows a node process to exit even if the timeout’s callback hasn't been invoked. Without it, the node process could hang as this function is called every two seconds.\n      t.unref();\n    }\n  };\n  _checkTimeout();\n\n  p.play = function (from, suppressEvents) {\n    if (from != null) {\n      this.seek(from, suppressEvents);\n    }\n    return this.reversed(false).paused(false);\n  };\n\n  p.pause = function (atTime, suppressEvents) {\n    if (atTime != null) {\n      this.seek(atTime, suppressEvents);\n    }\n    return this.paused(true);\n  };\n\n  p.resume = function (from, suppressEvents) {\n    if (from != null) {\n      this.seek(from, suppressEvents);\n    }\n    return this.paused(false);\n  };\n\n  p.seek = function (time, suppressEvents) {\n    return this.totalTime(Number(time), suppressEvents !== false);\n  };\n\n  p.restart = function (includeDelay, suppressEvents) {\n    return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, suppressEvents !== false, true);\n  };\n\n  p.reverse = function (from, suppressEvents) {\n    if (from != null) {\n      this.seek(from || this.totalDuration(), suppressEvents);\n    }\n    return this.reversed(true).paused(false);\n  };\n\n  p.render = function (time, suppressEvents, force) {\n    //stub - we override this method in subclasses.\n  };\n\n  p.invalidate = function () {\n    this._time = this._totalTime = 0;\n    this._initted = this._gc = false;\n    this._rawPrevTime = -1;\n    if (this._gc || !this.timeline) {\n      this._enabled(true);\n    }\n    return this;\n  };\n\n  p.isActive = function () {\n    var tl = this._timeline,\n        //the 2 root timelines won't have a _timeline; they're always active.\n    startTime = this._startTime,\n        rawTime;\n    return !tl || !this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 0.0000001;\n  };\n\n  p._enabled = function (enabled, ignoreTimeline) {\n    if (!_tickerActive) {\n      _ticker.wake();\n    }\n    this._gc = !enabled;\n    this._active = this.isActive();\n    if (ignoreTimeline !== true) {\n      if (enabled && !this.timeline) {\n        this._timeline.add(this, this._startTime - this._delay);\n      } else if (!enabled && this.timeline) {\n        this._timeline._remove(this, true);\n      }\n    }\n    return false;\n  };\n\n  p._kill = function (vars, target) {\n    return this._enabled(false, false);\n  };\n\n  p.kill = function (vars, target) {\n    this._kill(vars, target);\n    return this;\n  };\n\n  p._uncache = function (includeSelf) {\n    var tween = includeSelf ? this : this.timeline;\n    while (tween) {\n      tween._dirty = true;\n      tween = tween.timeline;\n    }\n    return this;\n  };\n\n  p._swapSelfInParams = function (params) {\n    var i = params.length,\n        copy = params.concat();\n    while (--i > -1) {\n      if (params[i] === '{self}') {\n        copy[i] = this;\n      }\n    }\n    return copy;\n  };\n\n  p._callback = function (type) {\n    var v = this.vars,\n        callback = v[type],\n        params = v[type + 'Params'],\n        scope = v[type + 'Scope'] || v.callbackScope || this,\n        l = params ? params.length : 0;\n    switch (l) {//speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + \"Scope\"] || v.callbackScope || this, v[type + \"Params\"] || _blankArray);\n      case 0:\n        callback.call(scope);break;\n      case 1:\n        callback.call(scope, params[0]);break;\n      case 2:\n        callback.call(scope, params[0], params[1]);break;\n      default:\n        callback.apply(scope, params);\n    }\n  };\n\n  //----Animation getters/setters --------------------------------------------------------\n\n  p.eventCallback = function (type, callback, params, scope) {\n    if ((type || '').substr(0, 2) === 'on') {\n      var v = this.vars;\n      if (arguments.length === 1) {\n        return v[type];\n      }\n      if (callback == null) {\n        delete v[type];\n      } else {\n        v[type] = callback;\n        v[type + 'Params'] = _isArray(params) && params.join('').indexOf('{self}') !== -1 ? this._swapSelfInParams(params) : params;\n        v[type + 'Scope'] = scope;\n      }\n      if (type === 'onUpdate') {\n        this._onUpdate = callback;\n      }\n    }\n    return this;\n  };\n\n  p.delay = function (value) {\n    if (!arguments.length) {\n      return this._delay;\n    }\n    if (this._timeline.smoothChildTiming) {\n      this.startTime(this._startTime + value - this._delay);\n    }\n    this._delay = value;\n    return this;\n  };\n\n  p.duration = function (value) {\n    if (!arguments.length) {\n      this._dirty = false;\n      return this._duration;\n    }\n    this._duration = this._totalDuration = value;\n    this._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.\n    if (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {\n      this.totalTime(this._totalTime * (value / this._duration), true);\n    }\n    return this;\n  };\n\n  p.totalDuration = function (value) {\n    this._dirty = false;\n    return !arguments.length ? this._totalDuration : this.duration(value);\n  };\n\n  p.time = function (value, suppressEvents) {\n    if (!arguments.length) {\n      return this._time;\n    }\n    if (this._dirty) {\n      this.totalDuration();\n    }\n    return this.totalTime(value > this._duration ? this._duration : value, suppressEvents);\n  };\n\n  p.totalTime = function (time, suppressEvents, uncapped) {\n    if (!_tickerActive) {\n      _ticker.wake();\n    }\n    if (!arguments.length) {\n      return this._totalTime;\n    }\n    if (this._timeline) {\n      if (time < 0 && !uncapped) {\n        time += this.totalDuration();\n      }\n      if (this._timeline.smoothChildTiming) {\n        if (this._dirty) {\n          this.totalDuration();\n        }\n        var totalDuration = this._totalDuration,\n            tl = this._timeline;\n        if (time > totalDuration && !uncapped) {\n          time = totalDuration;\n        }\n        this._startTime = (this._paused ? this._pauseTime : tl._time) - (!this._reversed ? time : totalDuration - time) / this._timeScale;\n        if (!tl._dirty) {\n          //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.\n          this._uncache(false);\n        }\n        //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.\n        if (tl._timeline) {\n          while (tl._timeline) {\n            if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {\n              tl.totalTime(tl._totalTime, true);\n            }\n            tl = tl._timeline;\n          }\n        }\n      }\n      if (this._gc) {\n        this._enabled(true, false);\n      }\n      if (this._totalTime !== time || this._duration === 0) {\n        if (_lazyTweens.length) {\n          _lazyRender();\n        }\n        this.render(time, suppressEvents, false);\n        if (_lazyTweens.length) {\n          //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.\n          _lazyRender();\n        }\n      }\n    }\n    return this;\n  };\n\n  p.progress = p.totalProgress = function (value, suppressEvents) {\n    var duration = this.duration();\n    return !arguments.length ? duration ? this._time / duration : this.ratio : this.totalTime(duration * value, suppressEvents);\n  };\n\n  p.startTime = function (value) {\n    if (!arguments.length) {\n      return this._startTime;\n    }\n    if (value !== this._startTime) {\n      this._startTime = value;\n      if (this.timeline) if (this.timeline._sortChildren) {\n        this.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.\n      }\n    }\n    return this;\n  };\n\n  p.endTime = function (includeRepeats) {\n    return this._startTime + (includeRepeats != false ? this.totalDuration() : this.duration()) / this._timeScale;\n  };\n\n  p.timeScale = function (value) {\n    if (!arguments.length) {\n      return this._timeScale;\n    }\n    var pauseTime, t;\n    value = value || _tinyNum; //can't allow zero because it'll throw the math off\n    if (this._timeline && this._timeline.smoothChildTiming) {\n      pauseTime = this._pauseTime;\n      t = pauseTime || pauseTime === 0 ? pauseTime : this._timeline.totalTime();\n      this._startTime = t - (t - this._startTime) * this._timeScale / value;\n    }\n    this._timeScale = value;\n    t = this.timeline;\n    while (t && t.timeline) {\n      //must update the duration/totalDuration of all ancestor timelines immediately in case in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.\n      t._dirty = true;\n      t.totalDuration();\n      t = t.timeline;\n    }\n    return this;\n  };\n\n  p.reversed = function (value) {\n    if (!arguments.length) {\n      return this._reversed;\n    }\n    if (value != this._reversed) {\n      this._reversed = value;\n      this.totalTime(this._timeline && !this._timeline.smoothChildTiming ? this.totalDuration() - this._totalTime : this._totalTime, true);\n    }\n    return this;\n  };\n\n  p.paused = function (value) {\n    if (!arguments.length) {\n      return this._paused;\n    }\n    var tl = this._timeline,\n        raw,\n        elapsed;\n    if (value != this._paused) if (tl) {\n      if (!_tickerActive && !value) {\n        _ticker.wake();\n      }\n      raw = tl.rawTime();\n      elapsed = raw - this._pauseTime;\n      if (!value && tl.smoothChildTiming) {\n        this._startTime += elapsed;\n        this._uncache(false);\n      }\n      this._pauseTime = value ? raw : null;\n      this._paused = value;\n      this._active = this.isActive();\n      if (!value && elapsed !== 0 && this._initted && this.duration()) {\n        raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;\n        this.render(raw, raw === this._totalTime, true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.\n      }\n    }\n    if (this._gc && !value) {\n      this._enabled(true, false);\n    }\n    return this;\n  };\n\n  /*\r\n  * ----------------------------------------------------------------\r\n  * SimpleTimeline\r\n  * ----------------------------------------------------------------\r\n  */\n  var SimpleTimeline = _class('core.SimpleTimeline', function (vars) {\n    Animation.call(this, 0, vars);\n    this.autoRemoveChildren = this.smoothChildTiming = true;\n  });\n\n  p = SimpleTimeline.prototype = new Animation();\n  p.constructor = SimpleTimeline;\n  p.kill()._gc = false;\n  p._first = p._last = p._recent = null;\n  p._sortChildren = false;\n\n  p.add = p.insert = function (child, position, align, stagger) {\n    var prevTween, st;\n    child._startTime = Number(position || 0) + child._delay;\n    if (child._paused) if (this !== child._timeline) {\n      //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).\n      child._pauseTime = this.rawTime() - (child._timeline.rawTime() - child._pauseTime);\n    }\n    if (child.timeline) {\n      child.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.\n    }\n    child.timeline = child._timeline = this;\n    if (child._gc) {\n      child._enabled(true, true);\n    }\n    prevTween = this._last;\n    if (this._sortChildren) {\n      st = child._startTime;\n      while (prevTween && prevTween._startTime > st) {\n        prevTween = prevTween._prev;\n      }\n    }\n    if (prevTween) {\n      child._next = prevTween._next;\n      prevTween._next = child;\n    } else {\n      child._next = this._first;\n      this._first = child;\n    }\n    if (child._next) {\n      child._next._prev = child;\n    } else {\n      this._last = child;\n    }\n    child._prev = prevTween;\n    this._recent = child;\n    if (this._timeline) {\n      this._uncache(true);\n    }\n    return this;\n  };\n\n  p._remove = function (tween, skipDisable) {\n    if (tween.timeline === this) {\n      if (!skipDisable) {\n        tween._enabled(false, true);\n      }\n\n      if (tween._prev) {\n        tween._prev._next = tween._next;\n      } else if (this._first === tween) {\n        this._first = tween._next;\n      }\n      if (tween._next) {\n        tween._next._prev = tween._prev;\n      } else if (this._last === tween) {\n        this._last = tween._prev;\n      }\n      tween._next = tween._prev = tween.timeline = null;\n      if (tween === this._recent) {\n        this._recent = this._last;\n      }\n\n      if (this._timeline) {\n        this._uncache(true);\n      }\n    }\n    return this;\n  };\n\n  p.render = function (time, suppressEvents, force) {\n    var tween = this._first,\n        next;\n    this._totalTime = this._time = this._rawPrevTime = time;\n    while (tween) {\n      next = tween._next; //record it here because the value could change after rendering...\n      if (tween._active || time >= tween._startTime && !tween._paused && !tween._gc) {\n        if (!tween._reversed) {\n          tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n        } else {\n          tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);\n        }\n      }\n      tween = next;\n    }\n  };\n\n  p.rawTime = function () {\n    if (!_tickerActive) {\n      _ticker.wake();\n    }\n    return this._totalTime;\n  };\n\n  /*\r\n  * ----------------------------------------------------------------\r\n  * TweenLite\r\n  * ----------------------------------------------------------------\r\n  */\n  var TweenLite = _class('TweenLite', function (target, duration, vars) {\n    Animation.call(this, duration, vars);\n    this.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\n    if (target == null) {\n      throw 'Cannot tween a null target.';\n    }\n\n    this.target = target = typeof target !== 'string' ? target : TweenLite.selector(target) || target;\n\n    var isSelector = target.jquery || target.length && target !== window && target[0] && (target[0] === window || target[0].nodeType && target[0].style && !target.nodeType),\n        overwrite = this.vars.overwrite,\n        i,\n        targ,\n        targets;\n\n    this._overwrite = overwrite = overwrite == null ? _overwriteLookup[TweenLite.defaultOverwrite] : typeof overwrite === 'number' ? overwrite >> 0 : _overwriteLookup[overwrite];\n\n    if ((isSelector || target instanceof Array || target.push && _isArray(target)) && typeof target[0] !== 'number') {\n      this._targets = targets = _slice(target); //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n      this._propLookup = [];\n      this._siblings = [];\n      for (i = 0; i < targets.length; i++) {\n        targ = targets[i];\n        if (!targ) {\n          targets.splice(i--, 1);\n          continue;\n        } else if (typeof targ === 'string') {\n          targ = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings\n          if (typeof targ === 'string') {\n            targets.splice(i + 1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)\n          }\n          continue;\n        } else if (targ.length && targ !== window && targ[0] && (targ[0] === window || targ[0].nodeType && targ[0].style && !targ.nodeType)) {\n          //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.\n          targets.splice(i--, 1);\n          this._targets = targets = targets.concat(_slice(targ));\n          continue;\n        }\n        this._siblings[i] = _register(targ, this, false);\n        if (overwrite === 1) if (this._siblings[i].length > 1) {\n          _applyOverwrite(targ, this, null, 1, this._siblings[i]);\n        }\n      }\n    } else {\n      this._propLookup = {};\n      this._siblings = _register(target, this, false);\n      if (overwrite === 1) if (this._siblings.length > 1) {\n        _applyOverwrite(target, this, null, 1, this._siblings);\n      }\n    }\n    if (this.vars.immediateRender || duration === 0 && this._delay === 0 && this.vars.immediateRender !== false) {\n      this._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n      this.render(Math.min(0, -this._delay)); //in case delay is negative\n    }\n  }, true),\n      _isSelector = function _isSelector(v) {\n    return v && v.length && v !== window && v[0] && (v[0] === window || v[0].nodeType && v[0].style && !v.nodeType); //we cannot check \"nodeType\" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.\n  },\n      _autoCSS = function _autoCSS(vars, target) {\n    var css = {},\n        p;\n    for (p in vars) {\n      if (!_reservedProps[p] && (!(p in target) || p === 'transform' || p === 'x' || p === 'y' || p === 'width' || p === 'height' || p === 'className' || p === 'border') && (!_plugins[p] || _plugins[p] && _plugins[p]._autoCSS)) {\n        //note: <img> elements contain read-only \"x\" and \"y\" properties. We should also prioritize editing css width/height rather than the element's properties.\n        css[p] = vars[p];\n        delete vars[p];\n      }\n    }\n    vars.css = css;\n  };\n\n  p = TweenLite.prototype = new Animation();\n  p.constructor = TweenLite;\n  p.kill()._gc = false;\n\n  //----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------\n\n  p.ratio = 0;\n  p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;\n  p._notifyPluginsOfEnabled = p._lazy = false;\n\n  TweenLite.version = '2.0.2';\n  TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);\n  TweenLite.defaultOverwrite = 'auto';\n  TweenLite.ticker = _ticker;\n  TweenLite.autoSleep = 120;\n  TweenLite.lagSmoothing = function (threshold, adjustedLag) {\n    _ticker.lagSmoothing(threshold, adjustedLag);\n  };\n\n  TweenLite.selector = window.$ || window.jQuery || function (e) {\n    var selector = window.$ || window.jQuery;\n    if (selector) {\n      TweenLite.selector = selector;\n      return selector(e);\n    }\n    if (!_doc) {\n      //in some dev environments (like Angular 6), GSAP gets loaded before the document is defined! So re-query it here if/when necessary.\n      _doc = window.document;\n    }\n    return !_doc ? e : _doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById(e.charAt(0) === '#' ? e.substr(1) : e);\n  };\n\n  var _lazyTweens = [],\n      _lazyLookup = {},\n      _numbersExp = /(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n      _relExp = /[\\+-]=-?[\\.\\d]/,\n\n  //_nonNumbersExp = /(?:([\\-+](?!(\\d|=)))|[^\\d\\-+=e]|(e(?![\\-+][\\d])))+/ig,\n  _setRatio = function _setRatio(v) {\n    var pt = this._firstPT,\n        min = 0.000001,\n        val;\n    while (pt) {\n      val = !pt.blob ? pt.c * v + pt.s : v === 1 && this.end != null ? this.end : v ? this.join('') : this.start;\n      if (pt.m) {\n        val = pt.m.call(this._tween, val, this._target || pt.t, this._tween);\n      } else if (val < min) if (val > -min && !pt.blob) {\n        //prevents issues with converting very small numbers to strings in the browser\n        val = 0;\n      }\n      if (!pt.f) {\n        pt.t[pt.p] = val;\n      } else if (pt.fp) {\n        pt.t[pt.p](pt.fp, val);\n      } else {\n        pt.t[pt.p](val);\n      }\n      pt = pt._next;\n    }\n  },\n\n  //compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, \"rgb(0,0,0)\" and \"rgb(100,50,0)\" would become [\"rgb(\", 0, \",\", 50, \",0)\"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a \"start\" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join(\"\")).\n  _blobDif = function _blobDif(start, end, filter, pt) {\n    var a = [],\n        charIndex = 0,\n        s = '',\n        color = 0,\n        startNums,\n        endNums,\n        num,\n        i,\n        l,\n        nonNumbers,\n        currentNum;\n    a.start = start;\n    a.end = end;\n    start = a[0] = start + ''; //ensure values are strings\n    end = a[1] = end + '';\n    if (filter) {\n      filter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.\n      start = a[0];\n      end = a[1];\n    }\n    a.length = 0;\n    startNums = start.match(_numbersExp) || [];\n    endNums = end.match(_numbersExp) || [];\n    if (pt) {\n      pt._next = null;\n      pt.blob = 1;\n      a._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)\n    }\n    l = endNums.length;\n    for (i = 0; i < l; i++) {\n      currentNum = endNums[i];\n      nonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex) - charIndex);\n      s += nonNumbers || !i ? nonNumbers : ','; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n      charIndex += nonNumbers.length;\n      if (color) {\n        //sense rgba() values and round them.\n        color = (color + 1) % 5;\n      } else if (nonNumbers.substr(-5) === 'rgba(') {\n        color = 1;\n      }\n      if (currentNum === startNums[i] || startNums.length <= i) {\n        s += currentNum;\n      } else {\n        if (s) {\n          a.push(s);\n          s = '';\n        }\n        num = parseFloat(startNums[i]);\n        a.push(num);\n        a._firstPT = { _next: a._firstPT, t: a, p: a.length - 1, s: num, c: (currentNum.charAt(1) === '=' ? parseInt(currentNum.charAt(0) + '1', 10) * parseFloat(currentNum.substr(2)) : parseFloat(currentNum) - num) || 0, f: 0, m: color && color < 4 ? Math.round : 0 };\n        //note: we don't set _prev because we'll never need to remove individual PropTweens from this list.\n      }\n      charIndex += currentNum.length;\n    }\n    s += end.substr(charIndex);\n    if (s) {\n      a.push(s);\n    }\n    a.setRatio = _setRatio;\n    if (_relExp.test(end)) {\n      //if the end string contains relative values, delete it so that on the final render (in _setRatio()), we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n      a.end = null;\n    }\n    return a;\n  },\n\n  //note: \"funcParam\" is only necessary for function-based getters/setters that require an extra parameter like getAttribute(\"width\") and setAttribute(\"width\", value). In this example, funcParam would be \"width\". Used by AttrPlugin for example.\n  _addPropTween = function _addPropTween(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {\n    if (typeof end === 'function') {\n      end = end(index || 0, target);\n    }\n    var type = _typeof(target[prop]),\n        getterName = type !== 'function' ? '' : prop.indexOf('set') || typeof target['get' + prop.substr(3)] !== 'function' ? prop : 'get' + prop.substr(3),\n        s = start !== 'get' ? start : !getterName ? target[prop] : funcParam ? target[getterName](funcParam) : target[getterName](),\n        isRelative = typeof end === 'string' && end.charAt(1) === '=',\n        pt = { t: target, p: prop, s: s, f: type === 'function', pg: 0, n: overwriteProp || prop, m: !mod ? 0 : typeof mod === 'function' ? mod : Math.round, pr: 0, c: isRelative ? parseInt(end.charAt(0) + '1', 10) * parseFloat(end.substr(2)) : parseFloat(end) - s || 0 },\n        blob;\n\n    if (typeof s !== 'number' || typeof end !== 'number' && !isRelative) {\n      if (funcParam || isNaN(s) || !isRelative && isNaN(end) || typeof s === 'boolean' || typeof end === 'boolean') {\n        //a blob (string that has multiple numbers in it)\n        pt.fp = funcParam;\n        blob = _blobDif(s, isRelative ? parseFloat(pt.s) + pt.c + (pt.s + '').replace(/[0-9\\-\\.]/g, '') : end, stringFilter || TweenLite.defaultStringFilter, pt);\n        pt = { t: blob, p: 'setRatio', s: 0, c: 1, f: 2, pg: 0, n: overwriteProp || prop, pr: 0, m: 0 }; //\"2\" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.\n      } else {\n        pt.s = parseFloat(s);\n        if (!isRelative) {\n          pt.c = parseFloat(end) - pt.s || 0;\n        }\n      }\n    }\n    if (pt.c) {\n      //only add it to the linked list if there's a change.\n      if (pt._next = this._firstPT) {\n        pt._next._prev = pt;\n      }\n      this._firstPT = pt;\n      return pt;\n    }\n  },\n      _internals = TweenLite._internals = { isArray: _isArray, isSelector: _isSelector, lazyTweens: _lazyTweens, blobDif: _blobDif },\n      //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.\n  _plugins = TweenLite._plugins = {},\n      _tweenLookup = _internals.tweenLookup = {},\n      _tweenLookupNum = 0,\n      _reservedProps = _internals.reservedProps = { ease: 1, delay: 1, overwrite: 1, onComplete: 1, onCompleteParams: 1, onCompleteScope: 1, useFrames: 1, runBackwards: 1, startAt: 1, onUpdate: 1, onUpdateParams: 1, onUpdateScope: 1, onStart: 1, onStartParams: 1, onStartScope: 1, onReverseComplete: 1, onReverseCompleteParams: 1, onReverseCompleteScope: 1, onRepeat: 1, onRepeatParams: 1, onRepeatScope: 1, easeParams: 1, yoyo: 1, immediateRender: 1, repeat: 1, repeatDelay: 1, data: 1, paused: 1, reversed: 1, autoCSS: 1, lazy: 1, onOverwrite: 1, callbackScope: 1, stringFilter: 1, id: 1, yoyoEase: 1 },\n      _overwriteLookup = { none: 0, all: 1, auto: 2, concurrent: 3, allOnStart: 4, preexisting: 5, 'true': 1, 'false': 0 },\n      _rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),\n      _rootTimeline = Animation._rootTimeline = new SimpleTimeline(),\n      _nextGCFrame = 30,\n      _lazyRender = _internals.lazyRender = function () {\n    var i = _lazyTweens.length,\n        tween;\n    _lazyLookup = {};\n    while (--i > -1) {\n      tween = _lazyTweens[i];\n      if (tween && tween._lazy !== false) {\n        tween.render(tween._lazy[0], tween._lazy[1], true);\n        tween._lazy = false;\n      }\n    }\n    _lazyTweens.length = 0;\n  };\n\n  _rootTimeline._startTime = _ticker.time;\n  _rootFramesTimeline._startTime = _ticker.frame;\n  _rootTimeline._active = _rootFramesTimeline._active = true;\n  setTimeout(_lazyRender, 1); //on some mobile devices, there isn't a \"tick\" before code runs which means any lazy renders wouldn't run before the next official \"tick\".\n\n  Animation._updateRoot = TweenLite.render = function () {\n    var i, a, p;\n    if (_lazyTweens.length) {\n      //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.\n      _lazyRender();\n    }\n    _rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);\n    _rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);\n    if (_lazyTweens.length) {\n      _lazyRender();\n    }\n    if (_ticker.frame >= _nextGCFrame) {\n      //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to\n      _nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);\n      for (p in _tweenLookup) {\n        a = _tweenLookup[p].tweens;\n        i = a.length;\n        while (--i > -1) {\n          if (a[i]._gc) {\n            a.splice(i, 1);\n          }\n        }\n        if (a.length === 0) {\n          delete _tweenLookup[p];\n        }\n      }\n      //if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly\n      p = _rootTimeline._first;\n      if (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {\n        while (p && p._paused) {\n          p = p._next;\n        }\n        if (!p) {\n          _ticker.sleep();\n        }\n      }\n    }\n  };\n\n  _ticker.addEventListener('tick', Animation._updateRoot);\n\n  var _register = function _register(target, tween, scrub) {\n    var id = target._gsTweenID,\n        a,\n        i;\n    if (!_tweenLookup[id || (target._gsTweenID = id = 't' + _tweenLookupNum++)]) {\n      _tweenLookup[id] = { target: target, tweens: [] };\n    }\n    if (tween) {\n      a = _tweenLookup[id].tweens;\n      a[i = a.length] = tween;\n      if (scrub) {\n        while (--i > -1) {\n          if (a[i] === tween) {\n            a.splice(i, 1);\n          }\n        }\n      }\n    }\n    return _tweenLookup[id].tweens;\n  },\n      _onOverwrite = function _onOverwrite(overwrittenTween, overwritingTween, target, killedProps) {\n    var func = overwrittenTween.vars.onOverwrite,\n        r1,\n        r2;\n    if (func) {\n      r1 = func(overwrittenTween, overwritingTween, target, killedProps);\n    }\n    func = TweenLite.onOverwrite;\n    if (func) {\n      r2 = func(overwrittenTween, overwritingTween, target, killedProps);\n    }\n    return r1 !== false && r2 !== false;\n  },\n      _applyOverwrite = function _applyOverwrite(target, tween, props, mode, siblings) {\n    var i, changed, curTween, l;\n    if (mode === 1 || mode >= 4) {\n      l = siblings.length;\n      for (i = 0; i < l; i++) {\n        if ((curTween = siblings[i]) !== tween) {\n          if (!curTween._gc) {\n            if (curTween._kill(null, target, tween)) {\n              changed = true;\n            }\n          }\n        } else if (mode === 5) {\n          break;\n        }\n      }\n      return changed;\n    }\n    //NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)\n    var startTime = tween._startTime + _tinyNum,\n        overlaps = [],\n        oCount = 0,\n        zeroDur = tween._duration === 0,\n        globalStart;\n    i = siblings.length;\n    while (--i > -1) {\n      if ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {\n        //ignore\n      } else if (curTween._timeline !== tween._timeline) {\n        globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);\n        if (_checkOverlap(curTween, globalStart, zeroDur) === 0) {\n          overlaps[oCount++] = curTween;\n        }\n      } else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {\n        overlaps[oCount++] = curTween;\n      }\n    }\n\n    i = oCount;\n    while (--i > -1) {\n      curTween = overlaps[i];\n      l = curTween._firstPT; //we need to discern if there were property tweens originally; if they all get removed in the next line's _kill() call, the tween should be killed. See https://github.com/greensock/GreenSock-JS/issues/278\n      if (mode === 2) if (curTween._kill(props, target, tween)) {\n        changed = true;\n      }\n      if (mode !== 2 || !curTween._firstPT && curTween._initted && l) {\n        if (mode !== 2 && !_onOverwrite(curTween, tween)) {\n          continue;\n        }\n        if (curTween._enabled(false, false)) {\n          //if all property tweens have been overwritten, kill the tween.\n          changed = true;\n        }\n      }\n    }\n    return changed;\n  },\n      _checkOverlap = function _checkOverlap(tween, reference, zeroDur) {\n    var tl = tween._timeline,\n        ts = tl._timeScale,\n        t = tween._startTime;\n    while (tl._timeline) {\n      t += tl._startTime;\n      ts *= tl._timeScale;\n      if (tl._paused) {\n        return -100;\n      }\n      tl = tl._timeline;\n    }\n    t /= ts;\n    return t > reference ? t - reference : zeroDur && t === reference || !tween._initted && t - reference < 2 * _tinyNum ? _tinyNum : (t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum ? 0 : t - reference - _tinyNum;\n  };\n\n  //---- TweenLite instance methods -----------------------------------------------------------------------------\n\n  p._init = function () {\n    var v = this.vars,\n        op = this._overwrittenProps,\n        dur = this._duration,\n        immediate = !!v.immediateRender,\n        ease = v.ease,\n        i,\n        initPlugins,\n        pt,\n        p,\n        startVars,\n        l;\n    if (v.startAt) {\n      if (this._startAt) {\n        this._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:\"+=100\"}, {x:\"-=100\"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.\n        this._startAt.kill();\n      }\n      startVars = {};\n      for (p in v.startAt) {\n        //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);\n        startVars[p] = v.startAt[p];\n      }\n      startVars.data = 'isStart';\n      startVars.overwrite = false;\n      startVars.immediateRender = true;\n      startVars.lazy = immediate && v.lazy !== false;\n      startVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).\n      startVars.onUpdate = v.onUpdate;\n      startVars.onUpdateParams = v.onUpdateParams;\n      startVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;\n      this._startAt = TweenLite.to(this.target || {}, 0, startVars);\n      if (immediate) {\n        if (this._time > 0) {\n          this._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).\n        } else if (dur !== 0) {\n          return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.\n        }\n      }\n    } else if (v.runBackwards && dur !== 0) {\n      //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)\n      if (this._startAt) {\n        this._startAt.render(-1, true);\n        this._startAt.kill();\n        this._startAt = null;\n      } else {\n        if (this._time !== 0) {\n          //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0\n          immediate = false;\n        }\n        pt = {};\n        for (p in v) {\n          //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.\n          if (!_reservedProps[p] || p === 'autoCSS') {\n            pt[p] = v[p];\n          }\n        }\n        pt.overwrite = 0;\n        pt.data = 'isFromStart'; //we tag the tween with as \"isFromStart\" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a \"from()\" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.\n        pt.lazy = immediate && v.lazy !== false;\n        pt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)\n        this._startAt = TweenLite.to(this.target, 0, pt);\n        if (!immediate) {\n          this._startAt._init(); //ensures that the initial values are recorded\n          this._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.\n          if (this.vars.immediateRender) {\n            this._startAt = null;\n          }\n        } else if (this._time === 0) {\n          return;\n        }\n      }\n    }\n    this._ease = ease = !ease ? TweenLite.defaultEase : ease instanceof Ease ? ease : typeof ease === 'function' ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;\n    if (v.easeParams instanceof Array && ease.config) {\n      this._ease = ease.config.apply(ease, v.easeParams);\n    }\n    this._easeType = this._ease._type;\n    this._easePower = this._ease._power;\n    this._firstPT = null;\n\n    if (this._targets) {\n      l = this._targets.length;\n      for (i = 0; i < l; i++) {\n        if (this._initProps(this._targets[i], this._propLookup[i] = {}, this._siblings[i], op ? op[i] : null, i)) {\n          initPlugins = true;\n        }\n      }\n    } else {\n      initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);\n    }\n\n    if (initPlugins) {\n      TweenLite._onPluginEvent('_onInitAllProps', this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite\n    }\n    if (op) if (!this._firstPT) if (typeof this.target !== 'function') {\n      //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.\n      this._enabled(false, false);\n    }\n    if (v.runBackwards) {\n      pt = this._firstPT;\n      while (pt) {\n        pt.s += pt.c;\n        pt.c = -pt.c;\n        pt = pt._next;\n      }\n    }\n    this._onUpdate = v.onUpdate;\n    this._initted = true;\n  };\n\n  p._initProps = function (target, propLookup, siblings, overwrittenProps, index) {\n    var p, i, initPlugins, plugin, pt, v;\n    if (target == null) {\n      return false;\n    }\n\n    if (_lazyLookup[target._gsTweenID]) {\n      _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)\n    }\n\n    if (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) {\n      //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check \"nodeType\" on the window inside an iframe.\n      _autoCSS(this.vars, target);\n    }\n    for (p in this.vars) {\n      v = this.vars[p];\n      if (_reservedProps[p]) {\n        if (v) if (v instanceof Array || v.push && _isArray(v)) if (v.join('').indexOf('{self}') !== -1) {\n          this.vars[p] = v = this._swapSelfInParams(v, this);\n        }\n      } else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {\n\n        //t - target \t\t[object]\n        //p - property \t\t[string]\n        //s - start\t\t\t[number]\n        //c - change\t\t[number]\n        //f - isFunction\t[boolean]\n        //n - name\t\t\t[string]\n        //pg - isPlugin \t[boolean]\n        //pr - priority\t\t[number]\n        //m - mod           [function | 0]\n        this._firstPT = pt = { _next: this._firstPT, t: plugin, p: 'setRatio', s: 0, c: 1, f: 1, n: p, pg: 1, pr: plugin._priority, m: 0 };\n        i = plugin._overwriteProps.length;\n        while (--i > -1) {\n          propLookup[plugin._overwriteProps[i]] = this._firstPT;\n        }\n        if (plugin._priority || plugin._onInitAllProps) {\n          initPlugins = true;\n        }\n        if (plugin._onDisable || plugin._onEnable) {\n          this._notifyPluginsOfEnabled = true;\n        }\n        if (pt._next) {\n          pt._next._prev = pt;\n        }\n      } else {\n        propLookup[p] = _addPropTween.call(this, target, p, 'get', v, p, 0, null, this.vars.stringFilter, index);\n      }\n    }\n\n    if (overwrittenProps) if (this._kill(overwrittenProps, target)) {\n      //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)\n      return this._initProps(target, propLookup, siblings, overwrittenProps, index);\n    }\n    if (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {\n      this._kill(propLookup, target);\n      return this._initProps(target, propLookup, siblings, overwrittenProps, index);\n    }\n    if (this._firstPT) if (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration) {\n      //zero duration tweens don't lazy render by default; everything else does.\n      _lazyLookup[target._gsTweenID] = true;\n    }\n    return initPlugins;\n  };\n\n  p.render = function (time, suppressEvents, force) {\n    var prevTime = this._time,\n        duration = this._duration,\n        prevRawPrevTime = this._rawPrevTime,\n        isComplete,\n        callback,\n        pt,\n        rawPrevTime;\n    if (time >= duration - 0.0000001 && time >= 0) {\n      //to work around occasional floating point math artifacts.\n      this._totalTime = this._time = duration;\n      this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;\n      if (!this._reversed) {\n        isComplete = true;\n        callback = 'onComplete';\n        force = force || this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n      }\n      if (duration === 0) if (this._initted || !this.vars.lazy || force) {\n        //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n        if (this._startTime === this._timeline._duration) {\n          //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.\n          time = 0;\n        }\n        if (prevRawPrevTime < 0 || time <= 0 && time >= -0.0000001 || prevRawPrevTime === _tinyNum && this.data !== 'isPause') if (prevRawPrevTime !== time) {\n          //note: when this.data is \"isPause\", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.\n          force = true;\n          if (prevRawPrevTime > _tinyNum) {\n            callback = 'onReverseComplete';\n          }\n        }\n        this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n      }\n    } else if (time < 0.0000001) {\n      //to work around occasional floating point math artifacts, round super small values to 0.\n      this._totalTime = this._time = 0;\n      this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;\n      if (prevTime !== 0 || duration === 0 && prevRawPrevTime > 0) {\n        callback = 'onReverseComplete';\n        isComplete = this._reversed;\n      }\n      if (time < 0) {\n        this._active = false;\n        if (duration === 0) if (this._initted || !this.vars.lazy || force) {\n          //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n          if (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === 'isPause')) {\n            force = true;\n          }\n          this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n        }\n      }\n      if (!this._initted || this._startAt && this._startAt.progress()) {\n        //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately. Also, we check progress() because if startAt has already rendered at its end, we should force a render at its beginning. Otherwise, if you put the playhead directly on top of where a fromTo({immediateRender:false}) starts, and then move it backwards, the from() won't revert its values.\n        force = true;\n      }\n    } else {\n      this._totalTime = this._time = time;\n\n      if (this._easeType) {\n        var r = time / duration,\n            type = this._easeType,\n            pow = this._easePower;\n        if (type === 1 || type === 3 && r >= 0.5) {\n          r = 1 - r;\n        }\n        if (type === 3) {\n          r *= 2;\n        }\n        if (pow === 1) {\n          r *= r;\n        } else if (pow === 2) {\n          r *= r * r;\n        } else if (pow === 3) {\n          r *= r * r * r;\n        } else if (pow === 4) {\n          r *= r * r * r * r;\n        }\n\n        if (type === 1) {\n          this.ratio = 1 - r;\n        } else if (type === 2) {\n          this.ratio = r;\n        } else if (time / duration < 0.5) {\n          this.ratio = r / 2;\n        } else {\n          this.ratio = 1 - r / 2;\n        }\n      } else {\n        this.ratio = this._ease.getRatio(time / duration);\n      }\n    }\n\n    if (this._time === prevTime && !force) {\n      return;\n    } else if (!this._initted) {\n      this._init();\n      if (!this._initted || this._gc) {\n        //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.\n        return;\n      } else if (!force && this._firstPT && (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration)) {\n        this._time = this._totalTime = prevTime;\n        this._rawPrevTime = prevRawPrevTime;\n        _lazyTweens.push(this);\n        this._lazy = [time, suppressEvents];\n        return;\n      }\n      //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.\n      if (this._time && !isComplete) {\n        this.ratio = this._ease.getRatio(this._time / duration);\n      } else if (isComplete && this._ease._calcEnd) {\n        this.ratio = this._ease.getRatio(this._time === 0 ? 0 : 1);\n      }\n    }\n    if (this._lazy !== false) {\n      //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.\n      this._lazy = false;\n    }\n    if (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {\n      this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.\n    }\n    if (prevTime === 0) {\n      if (this._startAt) {\n        if (time >= 0) {\n          this._startAt.render(time, true, force);\n        } else if (!callback) {\n          callback = '_dummyGS'; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.\n        }\n      }\n      if (this.vars.onStart) if (this._time !== 0 || duration === 0) if (!suppressEvents) {\n        this._callback('onStart');\n      }\n    }\n    pt = this._firstPT;\n    while (pt) {\n      if (pt.f) {\n        pt.t[pt.p](pt.c * this.ratio + pt.s);\n      } else {\n        pt.t[pt.p] = pt.c * this.ratio + pt.s;\n      }\n      pt = pt._next;\n    }\n\n    if (this._onUpdate) {\n      if (time < 0) if (this._startAt && time !== -0.0001) {\n        //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n        this._startAt.render(time, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n      }\n      if (!suppressEvents) if (this._time !== prevTime || isComplete || force) {\n        this._callback('onUpdate');\n      }\n    }\n    if (callback) if (!this._gc || force) {\n      //check _gc because there's a chance that kill() could be called in an onUpdate\n      if (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) {\n        //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.\n        this._startAt.render(time, true, force);\n      }\n      if (isComplete) {\n        if (this._timeline.autoRemoveChildren) {\n          this._enabled(false, false);\n        }\n        this._active = false;\n      }\n      if (!suppressEvents && this.vars[callback]) {\n        this._callback(callback);\n      }\n      if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) {\n        //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the \"time\" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.\n        this._rawPrevTime = 0;\n      }\n    }\n  };\n\n  p._kill = function (vars, target, overwritingTween) {\n    if (vars === 'all') {\n      vars = null;\n    }\n    if (vars == null) if (target == null || target === this.target) {\n      this._lazy = false;\n      return this._enabled(false, false);\n    }\n    target = typeof target !== 'string' ? target || this._targets || this.target : TweenLite.selector(target) || target;\n    var simultaneousOverwrite = overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline,\n        firstPT = this._firstPT,\n        i,\n        overwrittenProps,\n        p,\n        pt,\n        propLookup,\n        changed,\n        killProps,\n        record,\n        killed;\n    if ((_isArray(target) || _isSelector(target)) && typeof target[0] !== 'number') {\n      i = target.length;\n      while (--i > -1) {\n        if (this._kill(vars, target[i], overwritingTween)) {\n          changed = true;\n        }\n      }\n    } else {\n      if (this._targets) {\n        i = this._targets.length;\n        while (--i > -1) {\n          if (target === this._targets[i]) {\n            propLookup = this._propLookup[i] || {};\n            this._overwrittenProps = this._overwrittenProps || [];\n            overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : 'all';\n            break;\n          }\n        }\n      } else if (target !== this.target) {\n        return false;\n      } else {\n        propLookup = this._propLookup;\n        overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : 'all';\n      }\n\n      if (propLookup) {\n        killProps = vars || propLookup;\n        record = vars !== overwrittenProps && overwrittenProps !== 'all' && vars !== propLookup && ((typeof vars === 'undefined' ? 'undefined' : _typeof(vars)) !== 'object' || !vars._tempKill); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)\n        if (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {\n          for (p in killProps) {\n            if (propLookup[p]) {\n              if (!killed) {\n                killed = [];\n              }\n              killed.push(p);\n            }\n          }\n          if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) {\n            //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).\n            return false;\n          }\n        }\n\n        for (p in killProps) {\n          if (pt = propLookup[p]) {\n            if (simultaneousOverwrite) {\n              //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.\n              if (pt.f) {\n                pt.t[pt.p](pt.s);\n              } else {\n                pt.t[pt.p] = pt.s;\n              }\n              changed = true;\n            }\n            if (pt.pg && pt.t._kill(killProps)) {\n              changed = true; //some plugins need to be notified so they can perform cleanup tasks first\n            }\n            if (!pt.pg || pt.t._overwriteProps.length === 0) {\n              if (pt._prev) {\n                pt._prev._next = pt._next;\n              } else if (pt === this._firstPT) {\n                this._firstPT = pt._next;\n              }\n              if (pt._next) {\n                pt._next._prev = pt._prev;\n              }\n              pt._next = pt._prev = null;\n            }\n            delete propLookup[p];\n          }\n          if (record) {\n            overwrittenProps[p] = 1;\n          }\n        }\n        if (!this._firstPT && this._initted && firstPT) {\n          //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.\n          this._enabled(false, false);\n        }\n      }\n    }\n    return changed;\n  };\n\n  p.invalidate = function () {\n    if (this._notifyPluginsOfEnabled) {\n      TweenLite._onPluginEvent('_onDisable', this);\n    }\n    this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;\n    this._notifyPluginsOfEnabled = this._active = this._lazy = false;\n    this._propLookup = this._targets ? {} : [];\n    Animation.prototype.invalidate.call(this);\n    if (this.vars.immediateRender) {\n      this._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n      this.render(Math.min(0, -this._delay)); //in case delay is negative.\n    }\n    return this;\n  };\n\n  p._enabled = function (enabled, ignoreTimeline) {\n    if (!_tickerActive) {\n      _ticker.wake();\n    }\n    if (enabled && this._gc) {\n      var targets = this._targets,\n          i;\n      if (targets) {\n        i = targets.length;\n        while (--i > -1) {\n          this._siblings[i] = _register(targets[i], this, true);\n        }\n      } else {\n        this._siblings = _register(this.target, this, true);\n      }\n    }\n    Animation.prototype._enabled.call(this, enabled, ignoreTimeline);\n    if (this._notifyPluginsOfEnabled) if (this._firstPT) {\n      return TweenLite._onPluginEvent(enabled ? '_onEnable' : '_onDisable', this);\n    }\n    return false;\n  };\n\n  //----TweenLite static methods -----------------------------------------------------\n\n  TweenLite.to = function (target, duration, vars) {\n    return new TweenLite(target, duration, vars);\n  };\n\n  TweenLite.from = function (target, duration, vars) {\n    vars.runBackwards = true;\n    vars.immediateRender = vars.immediateRender != false;\n    return new TweenLite(target, duration, vars);\n  };\n\n  TweenLite.fromTo = function (target, duration, fromVars, toVars) {\n    toVars.startAt = fromVars;\n    toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;\n    return new TweenLite(target, duration, toVars);\n  };\n\n  TweenLite.delayedCall = function (delay, callback, params, scope, useFrames) {\n    return new TweenLite(callback, 0, { delay: delay, onComplete: callback, onCompleteParams: params, callbackScope: scope, onReverseComplete: callback, onReverseCompleteParams: params, immediateRender: false, lazy: false, useFrames: useFrames, overwrite: 0 });\n  };\n\n  TweenLite.set = function (target, vars) {\n    return new TweenLite(target, 0, vars);\n  };\n\n  TweenLite.getTweensOf = function (target, onlyActive) {\n    if (target == null) {\n      return [];\n    }\n    target = typeof target !== 'string' ? target : TweenLite.selector(target) || target;\n    var i, a, j, t;\n    if ((_isArray(target) || _isSelector(target)) && typeof target[0] !== 'number') {\n      i = target.length;\n      a = [];\n      while (--i > -1) {\n        a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));\n      }\n      i = a.length;\n      //now get rid of any duplicates (tweens of arrays of objects could cause duplicates)\n      while (--i > -1) {\n        t = a[i];\n        j = i;\n        while (--j > -1) {\n          if (t === a[j]) {\n            a.splice(i, 1);\n          }\n        }\n      }\n    } else if (target._gsTweenID) {\n      a = _register(target).concat();\n      i = a.length;\n      while (--i > -1) {\n        if (a[i]._gc || onlyActive && !a[i].isActive()) {\n          a.splice(i, 1);\n        }\n      }\n    }\n    return a || [];\n  };\n\n  TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function (target, onlyActive, vars) {\n    if ((typeof onlyActive === 'undefined' ? 'undefined' : _typeof(onlyActive)) === 'object') {\n      vars = onlyActive; //for backwards compatibility (before \"onlyActive\" parameter was inserted)\n      onlyActive = false;\n    }\n    var a = TweenLite.getTweensOf(target, onlyActive),\n        i = a.length;\n    while (--i > -1) {\n      a[i]._kill(vars, target);\n    }\n  };\n\n  /*\r\n  * ----------------------------------------------------------------\r\n  * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)\r\n  * ----------------------------------------------------------------\r\n  */\n  var TweenPlugin = _class('plugins.TweenPlugin', function (props, priority) {\n    this._overwriteProps = (props || '').split(',');\n    this._propName = this._overwriteProps[0];\n    this._priority = priority || 0;\n    this._super = TweenPlugin.prototype;\n  }, true);\n\n  p = TweenPlugin.prototype;\n  TweenPlugin.version = '1.19.0';\n  TweenPlugin.API = 2;\n  p._firstPT = null;\n  p._addTween = _addPropTween;\n  p.setRatio = _setRatio;\n\n  p._kill = function (lookup) {\n    var a = this._overwriteProps,\n        pt = this._firstPT,\n        i;\n    if (lookup[this._propName] != null) {\n      this._overwriteProps = [];\n    } else {\n      i = a.length;\n      while (--i > -1) {\n        if (lookup[a[i]] != null) {\n          a.splice(i, 1);\n        }\n      }\n    }\n    while (pt) {\n      if (lookup[pt.n] != null) {\n        if (pt._next) {\n          pt._next._prev = pt._prev;\n        }\n        if (pt._prev) {\n          pt._prev._next = pt._next;\n          pt._prev = null;\n        } else if (this._firstPT === pt) {\n          this._firstPT = pt._next;\n        }\n      }\n      pt = pt._next;\n    }\n    return false;\n  };\n\n  p._mod = p._roundProps = function (lookup) {\n    var pt = this._firstPT,\n        val;\n    while (pt) {\n      val = lookup[this._propName] || pt.n != null && lookup[pt.n.split(this._propName + '_').join('')];\n      if (val && typeof val === 'function') {\n        //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.\n        if (pt.f === 2) {\n          pt.t._applyPT.m = val;\n        } else {\n          pt.m = val;\n        }\n      }\n      pt = pt._next;\n    }\n  };\n\n  TweenLite._onPluginEvent = function (type, tween) {\n    var pt = tween._firstPT,\n        changed,\n        pt2,\n        first,\n        last,\n        next;\n    if (type === '_onInitAllProps') {\n      //sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.\n      while (pt) {\n        next = pt._next;\n        pt2 = first;\n        while (pt2 && pt2.pr > pt.pr) {\n          pt2 = pt2._next;\n        }\n        if (pt._prev = pt2 ? pt2._prev : last) {\n          pt._prev._next = pt;\n        } else {\n          first = pt;\n        }\n        if (pt._next = pt2) {\n          pt2._prev = pt;\n        } else {\n          last = pt;\n        }\n        pt = next;\n      }\n      pt = tween._firstPT = first;\n    }\n    while (pt) {\n      if (pt.pg) if (typeof pt.t[type] === 'function') if (pt.t[type]()) {\n        changed = true;\n      }\n      pt = pt._next;\n    }\n    return changed;\n  };\n\n  TweenPlugin.activate = function (plugins) {\n    var i = plugins.length;\n    while (--i > -1) {\n      if (plugins[i].API === TweenPlugin.API) {\n        _plugins[new plugins[i]()._propName] = plugins[i];\n      }\n    }\n    return true;\n  };\n\n  //provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.\n  _gsDefine.plugin = function (config) {\n    if (!config || !config.propName || !config.init || !config.API) {\n      throw 'illegal plugin definition.';\n    }\n    var propName = config.propName,\n        priority = config.priority || 0,\n        overwriteProps = config.overwriteProps,\n        map = { init: '_onInitTween', set: 'setRatio', kill: '_kill', round: '_mod', mod: '_mod', initAll: '_onInitAllProps' },\n        Plugin = _class('plugins.' + propName.charAt(0).toUpperCase() + propName.substr(1) + 'Plugin', function () {\n      TweenPlugin.call(this, propName, priority);\n      this._overwriteProps = overwriteProps || [];\n    }, config.global === true),\n        p = Plugin.prototype = new TweenPlugin(propName),\n        prop;\n    p.constructor = Plugin;\n    Plugin.API = config.API;\n    for (prop in map) {\n      if (typeof config[prop] === 'function') {\n        p[map[prop]] = config[prop];\n      }\n    }\n    Plugin.version = config.version;\n    TweenPlugin.activate([Plugin]);\n    return Plugin;\n  };\n\n  //now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.\n  a = window._gsQueue;\n  if (a) {\n    for (i = 0; i < a.length; i++) {\n      a[i]();\n    }\n    for (p in _defLookup) {\n      if (!_defLookup[p].func) {\n        window.console.log('GSAP encountered missing dependency: ' + p);\n      }\n    }\n  }\n\n  _tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated\n\n  return TweenLite;\n}(_gsScope, 'TweenLite');\n\nvar globals = exports.globals = _gsScope.GreenSockGlobals;\nvar nonGlobals = globals.com.greensock;\nexports.default = TweenLite;\nvar SimpleTimeline = exports.SimpleTimeline = nonGlobals.core.SimpleTimeline;\nvar Animation = exports.Animation = nonGlobals.core.Animation;\nvar Ease = exports.Ease = globals.Ease;\nvar Linear = exports.Linear = globals.Linear;\nvar Power0 = exports.Power0 = Linear;\nvar Power1 = exports.Power1 = globals.Power1;\nvar Power2 = exports.Power2 = globals.Power2;\nvar Power3 = exports.Power3 = globals.Power3;\nvar Power4 = exports.Power4 = globals.Power4;\nvar TweenPlugin = exports.TweenPlugin = globals.TweenPlugin;\nvar EventDispatcher = exports.EventDispatcher = nonGlobals.events.EventDispatcher;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(49)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * getSize v2.0.3\n * measure size of elements\n * MIT license\n */\n\n/* jshint browser: true, strict: true, undef: true, unused: true */\n/* globals console: false */\n\n( function( window, factory ) {\n  /* jshint strict: false */ /* globals define, module */\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.getSize = factory();\n  }\n\n})( window, function factory() {\n'use strict';\n\n// -------------------------- helpers -------------------------- //\n\n// get a number from a string, not a percentage\nfunction getStyleSize( value ) {\n  var num = parseFloat( value );\n  // not a percent like '100%', and a number\n  var isValid = value.indexOf('%') == -1 && !isNaN( num );\n  return isValid && num;\n}\n\nfunction noop() {}\n\nvar logError = typeof console == 'undefined' ? noop :\n  function( message ) {\n    console.error( message );\n  };\n\n// -------------------------- measurements -------------------------- //\n\nvar measurements = [\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'paddingBottom',\n  'marginLeft',\n  'marginRight',\n  'marginTop',\n  'marginBottom',\n  'borderLeftWidth',\n  'borderRightWidth',\n  'borderTopWidth',\n  'borderBottomWidth'\n];\n\nvar measurementsLength = measurements.length;\n\nfunction getZeroSize() {\n  var size = {\n    width: 0,\n    height: 0,\n    innerWidth: 0,\n    innerHeight: 0,\n    outerWidth: 0,\n    outerHeight: 0\n  };\n  for ( var i=0; i < measurementsLength; i++ ) {\n    var measurement = measurements[i];\n    size[ measurement ] = 0;\n  }\n  return size;\n}\n\n// -------------------------- getStyle -------------------------- //\n\n/**\n * getStyle, get style of element, check for Firefox bug\n * https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n */\nfunction getStyle( elem ) {\n  var style = getComputedStyle( elem );\n  if ( !style ) {\n    logError( 'Style returned ' + style +\n      '. Are you running this code in a hidden iframe on Firefox? ' +\n      'See https://bit.ly/getsizebug1' );\n  }\n  return style;\n}\n\n// -------------------------- setup -------------------------- //\n\nvar isSetup = false;\n\nvar isBoxSizeOuter;\n\n/**\n * setup\n * check isBoxSizerOuter\n * do on first getSize() rather than on page load for Firefox bug\n */\nfunction setup() {\n  // setup once\n  if ( isSetup ) {\n    return;\n  }\n  isSetup = true;\n\n  // -------------------------- box sizing -------------------------- //\n\n  /**\n   * Chrome & Safari measure the outer-width on style.width on border-box elems\n   * IE11 & Firefox<29 measures the inner-width\n   */\n  var div = document.createElement('div');\n  div.style.width = '200px';\n  div.style.padding = '1px 2px 3px 4px';\n  div.style.borderStyle = 'solid';\n  div.style.borderWidth = '1px 2px 3px 4px';\n  div.style.boxSizing = 'border-box';\n\n  var body = document.body || document.documentElement;\n  body.appendChild( div );\n  var style = getStyle( div );\n  // round value for browser zoom. desandro/masonry#928\n  isBoxSizeOuter = Math.round( getStyleSize( style.width ) ) == 200;\n  getSize.isBoxSizeOuter = isBoxSizeOuter;\n\n  body.removeChild( div );\n}\n\n// -------------------------- getSize -------------------------- //\n\nfunction getSize( elem ) {\n  setup();\n\n  // use querySeletor if elem is string\n  if ( typeof elem == 'string' ) {\n    elem = document.querySelector( elem );\n  }\n\n  // do not proceed on non-objects\n  if ( !elem || typeof elem != 'object' || !elem.nodeType ) {\n    return;\n  }\n\n  var style = getStyle( elem );\n\n  // if hidden, everything is 0\n  if ( style.display == 'none' ) {\n    return getZeroSize();\n  }\n\n  var size = {};\n  size.width = elem.offsetWidth;\n  size.height = elem.offsetHeight;\n\n  var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';\n\n  // get all measurements\n  for ( var i=0; i < measurementsLength; i++ ) {\n    var measurement = measurements[i];\n    var value = style[ measurement ];\n    var num = parseFloat( value );\n    // any 'auto', 'medium' value will be 0\n    size[ measurement ] = !isNaN( num ) ? num : 0;\n  }\n\n  var paddingWidth = size.paddingLeft + size.paddingRight;\n  var paddingHeight = size.paddingTop + size.paddingBottom;\n  var marginWidth = size.marginLeft + size.marginRight;\n  var marginHeight = size.marginTop + size.marginBottom;\n  var borderWidth = size.borderLeftWidth + size.borderRightWidth;\n  var borderHeight = size.borderTopWidth + size.borderBottomWidth;\n\n  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;\n\n  // overwrite width and height if we can get it from style\n  var styleWidth = getStyleSize( style.width );\n  if ( styleWidth !== false ) {\n    size.width = styleWidth +\n      // add padding and border unless it's already including it\n      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );\n  }\n\n  var styleHeight = getStyleSize( style.height );\n  if ( styleHeight !== false ) {\n    size.height = styleHeight +\n      // add padding and border unless it's already including it\n      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );\n  }\n\n  size.innerWidth = size.width - ( paddingWidth + borderWidth );\n  size.innerHeight = size.height - ( paddingHeight + borderHeight );\n\n  size.outerWidth = size.width + marginWidth;\n  size.outerHeight = size.height + marginHeight;\n\n  return size;\n}\n\nreturn getSize;\n\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Isotope LayoutMode\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(2),\n        __webpack_require__(4)\n      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      require('get-size'),\n      require('outlayer')\n    );\n  } else {\n    // browser global\n    window.Isotope = window.Isotope || {};\n    window.Isotope.LayoutMode = factory(\n      window.getSize,\n      window.Outlayer\n    );\n  }\n\n}( window, function factory( getSize, Outlayer ) {\n  'use strict';\n\n  // layout mode class\n  function LayoutMode( isotope ) {\n    this.isotope = isotope;\n    // link properties\n    if ( isotope ) {\n      this.options = isotope.options[ this.namespace ];\n      this.element = isotope.element;\n      this.items = isotope.filteredItems;\n      this.size = isotope.size;\n    }\n  }\n\n  var proto = LayoutMode.prototype;\n\n  /**\n   * some methods should just defer to default Outlayer method\n   * and reference the Isotope instance as `this`\n  **/\n  var facadeMethods = [\n    '_resetLayout',\n    '_getItemLayoutPosition',\n    '_manageStamp',\n    '_getContainerSize',\n    '_getElementOffset',\n    'needsResizeLayout',\n    '_getOption'\n  ];\n\n  facadeMethods.forEach( function( methodName ) {\n    proto[ methodName ] = function() {\n      return Outlayer.prototype[ methodName ].apply( this.isotope, arguments );\n    };\n  });\n\n  // -----  ----- //\n\n  // for horizontal layout modes, check vertical size\n  proto.needsVerticalResizeLayout = function() {\n    // don't trigger if size did not change\n    var size = getSize( this.isotope.element );\n    // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n    var hasSizes = this.isotope.size && size;\n    return hasSizes && size.innerHeight != this.isotope.size.innerHeight;\n  };\n\n  // ----- measurements ----- //\n\n  proto._getMeasurement = function() {\n    this.isotope._getMeasurement.apply( this, arguments );\n  };\n\n  proto.getColumnWidth = function() {\n    this.getSegmentSize( 'column', 'Width' );\n  };\n\n  proto.getRowHeight = function() {\n    this.getSegmentSize( 'row', 'Height' );\n  };\n\n  /**\n   * get columnWidth or rowHeight\n   * segment: 'column' or 'row'\n   * size 'Width' or 'Height'\n  **/\n  proto.getSegmentSize = function( segment, size ) {\n    var segmentName = segment + size;\n    var outerSize = 'outer' + size;\n    // columnWidth / outerWidth // rowHeight / outerHeight\n    this._getMeasurement( segmentName, outerSize );\n    // got rowHeight or columnWidth, we can chill\n    if ( this[ segmentName ] ) {\n      return;\n    }\n    // fall back to item of first element\n    var firstItemSize = this.getFirstItemSize();\n    this[ segmentName ] = firstItemSize && firstItemSize[ outerSize ] ||\n      // or size of container\n      this.isotope.size[ 'inner' + size ];\n  };\n\n  proto.getFirstItemSize = function() {\n    var firstItem = this.isotope.filteredItems[0];\n    return firstItem && firstItem.element && getSize( firstItem.element );\n  };\n\n  // ----- methods that should reference isotope ----- //\n\n  proto.layout = function() {\n    this.isotope.layout.apply( this.isotope, arguments );\n  };\n\n  proto.getSize = function() {\n    this.isotope.getSize();\n    this.size = this.isotope.size;\n  };\n\n  // -------------------------- create -------------------------- //\n\n  LayoutMode.modes = {};\n\n  LayoutMode.create = function( namespace, options ) {\n\n    function Mode() {\n      LayoutMode.apply( this, arguments );\n    }\n\n    Mode.prototype = Object.create( proto );\n    Mode.prototype.constructor = Mode;\n\n    // default options\n    if ( options ) {\n      Mode.options = options;\n    }\n\n    Mode.prototype.namespace = namespace;\n    // register in Isotope\n    LayoutMode.modes[ namespace ] = Mode;\n\n    return Mode;\n  };\n\n  return LayoutMode;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9EOi92aXRhbGlrL2tsaW1vdi9+L2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2RlLmpzPzVkNDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJc290b3BlIExheW91dE1vZGVcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcbiAgICAgICAgJ291dGxheWVyL291dGxheWVyJ1xuICAgICAgXSxcbiAgICAgIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5Jc290b3BlID0gd2luZG93Lklzb3RvcGUgfHwge307XG4gICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3cuZ2V0U2l6ZSxcbiAgICAgIHdpbmRvdy5PdXRsYXllclxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBnZXRTaXplLCBPdXRsYXllciApIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIGxheW91dCBtb2RlIGNsYXNzXG4gIGZ1bmN0aW9uIExheW91dE1vZGUoIGlzb3RvcGUgKSB7XG4gICAgdGhpcy5pc290b3BlID0gaXNvdG9wZTtcbiAgICAvLyBsaW5rIHByb3BlcnRpZXNcbiAgICBpZiAoIGlzb3RvcGUgKSB7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBpc290b3BlLm9wdGlvbnNbIHRoaXMubmFtZXNwYWNlIF07XG4gICAgICB0aGlzLmVsZW1lbnQgPSBpc290b3BlLmVsZW1lbnQ7XG4gICAgICB0aGlzLml0ZW1zID0gaXNvdG9wZS5maWx0ZXJlZEl0ZW1zO1xuICAgICAgdGhpcy5zaXplID0gaXNvdG9wZS5zaXplO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm90byA9IExheW91dE1vZGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBzb21lIG1ldGhvZHMgc2hvdWxkIGp1c3QgZGVmZXIgdG8gZGVmYXVsdCBPdXRsYXllciBtZXRob2RcbiAgICogYW5kIHJlZmVyZW5jZSB0aGUgSXNvdG9wZSBpbnN0YW5jZSBhcyBgdGhpc2BcbiAgKiovXG4gIHZhciBmYWNhZGVNZXRob2RzID0gW1xuICAgICdfcmVzZXRMYXlvdXQnLFxuICAgICdfZ2V0SXRlbUxheW91dFBvc2l0aW9uJyxcbiAgICAnX21hbmFnZVN0YW1wJyxcbiAgICAnX2dldENvbnRhaW5lclNpemUnLFxuICAgICdfZ2V0RWxlbWVudE9mZnNldCcsXG4gICAgJ25lZWRzUmVzaXplTGF5b3V0JyxcbiAgICAnX2dldE9wdGlvbidcbiAgXTtcblxuICBmYWNhZGVNZXRob2RzLmZvckVhY2goIGZ1bmN0aW9uKCBtZXRob2ROYW1lICkge1xuICAgIHByb3RvWyBtZXRob2ROYW1lIF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPdXRsYXllci5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXS5hcHBseSggdGhpcy5pc290b3BlLCBhcmd1bWVudHMgKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyAtLS0tLSAgLS0tLS0gLy9cblxuICAvLyBmb3IgaG9yaXpvbnRhbCBsYXlvdXQgbW9kZXMsIGNoZWNrIHZlcnRpY2FsIHNpemVcbiAgcHJvdG8ubmVlZHNWZXJ0aWNhbFJlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGRvbid0IHRyaWdnZXIgaWYgc2l6ZSBkaWQgbm90IGNoYW5nZVxuICAgIHZhciBzaXplID0gZ2V0U2l6ZSggdGhpcy5pc290b3BlLmVsZW1lbnQgKTtcbiAgICAvLyBjaGVjayB0aGF0IHRoaXMuc2l6ZSBhbmQgc2l6ZSBhcmUgdGhlcmVcbiAgICAvLyBJRTggdHJpZ2dlcnMgcmVzaXplIG9uIGJvZHkgc2l6ZSBjaGFuZ2UsIHNvIHRoZXkgbWlnaHQgbm90IGJlXG4gICAgdmFyIGhhc1NpemVzID0gdGhpcy5pc290b3BlLnNpemUgJiYgc2l6ZTtcbiAgICByZXR1cm4gaGFzU2l6ZXMgJiYgc2l6ZS5pbm5lckhlaWdodCAhPSB0aGlzLmlzb3RvcGUuc2l6ZS5pbm5lckhlaWdodDtcbiAgfTtcblxuICAvLyAtLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0gLy9cblxuICBwcm90by5fZ2V0TWVhc3VyZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzb3RvcGUuX2dldE1lYXN1cmVtZW50LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgfTtcblxuICBwcm90by5nZXRDb2x1bW5XaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZ2V0U2VnbWVudFNpemUoICdjb2x1bW4nLCAnV2lkdGgnICk7XG4gIH07XG5cbiAgcHJvdG8uZ2V0Um93SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5nZXRTZWdtZW50U2l6ZSggJ3JvdycsICdIZWlnaHQnICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIGdldCBjb2x1bW5XaWR0aCBvciByb3dIZWlnaHRcbiAgICogc2VnbWVudDogJ2NvbHVtbicgb3IgJ3JvdydcbiAgICogc2l6ZSAnV2lkdGgnIG9yICdIZWlnaHQnXG4gICoqL1xuICBwcm90by5nZXRTZWdtZW50U2l6ZSA9IGZ1bmN0aW9uKCBzZWdtZW50LCBzaXplICkge1xuICAgIHZhciBzZWdtZW50TmFtZSA9IHNlZ21lbnQgKyBzaXplO1xuICAgIHZhciBvdXRlclNpemUgPSAnb3V0ZXInICsgc2l6ZTtcbiAgICAvLyBjb2x1bW5XaWR0aCAvIG91dGVyV2lkdGggLy8gcm93SGVpZ2h0IC8gb3V0ZXJIZWlnaHRcbiAgICB0aGlzLl9nZXRNZWFzdXJlbWVudCggc2VnbWVudE5hbWUsIG91dGVyU2l6ZSApO1xuICAgIC8vIGdvdCByb3dIZWlnaHQgb3IgY29sdW1uV2lkdGgsIHdlIGNhbiBjaGlsbFxuICAgIGlmICggdGhpc1sgc2VnbWVudE5hbWUgXSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZmFsbCBiYWNrIHRvIGl0ZW0gb2YgZmlyc3QgZWxlbWVudFxuICAgIHZhciBmaXJzdEl0ZW1TaXplID0gdGhpcy5nZXRGaXJzdEl0ZW1TaXplKCk7XG4gICAgdGhpc1sgc2VnbWVudE5hbWUgXSA9IGZpcnN0SXRlbVNpemUgJiYgZmlyc3RJdGVtU2l6ZVsgb3V0ZXJTaXplIF0gfHxcbiAgICAgIC8vIG9yIHNpemUgb2YgY29udGFpbmVyXG4gICAgICB0aGlzLmlzb3RvcGUuc2l6ZVsgJ2lubmVyJyArIHNpemUgXTtcbiAgfTtcblxuICBwcm90by5nZXRGaXJzdEl0ZW1TaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZpcnN0SXRlbSA9IHRoaXMuaXNvdG9wZS5maWx0ZXJlZEl0ZW1zWzBdO1xuICAgIHJldHVybiBmaXJzdEl0ZW0gJiYgZmlyc3RJdGVtLmVsZW1lbnQgJiYgZ2V0U2l6ZSggZmlyc3RJdGVtLmVsZW1lbnQgKTtcbiAgfTtcblxuICAvLyAtLS0tLSBtZXRob2RzIHRoYXQgc2hvdWxkIHJlZmVyZW5jZSBpc290b3BlIC0tLS0tIC8vXG5cbiAgcHJvdG8ubGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc290b3BlLmxheW91dC5hcHBseSggdGhpcy5pc290b3BlLCBhcmd1bWVudHMgKTtcbiAgfTtcblxuICBwcm90by5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc290b3BlLmdldFNpemUoKTtcbiAgICB0aGlzLnNpemUgPSB0aGlzLmlzb3RvcGUuc2l6ZTtcbiAgfTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBjcmVhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICBMYXlvdXRNb2RlLm1vZGVzID0ge307XG5cbiAgTGF5b3V0TW9kZS5jcmVhdGUgPSBmdW5jdGlvbiggbmFtZXNwYWNlLCBvcHRpb25zICkge1xuXG4gICAgZnVuY3Rpb24gTW9kZSgpIHtcbiAgICAgIExheW91dE1vZGUuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAgIH1cblxuICAgIE1vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggcHJvdG8gKTtcbiAgICBNb2RlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1vZGU7XG5cbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICBpZiAoIG9wdGlvbnMgKSB7XG4gICAgICBNb2RlLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cblxuICAgIE1vZGUucHJvdG90eXBlLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgICAvLyByZWdpc3RlciBpbiBJc290b3BlXG4gICAgTGF5b3V0TW9kZS5tb2Rlc1sgbmFtZXNwYWNlIF0gPSBNb2RlO1xuXG4gICAgcmV0dXJuIE1vZGU7XG4gIH07XG5cbiAgcmV0dXJuIExheW91dE1vZGU7XG5cbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIEQ6L3ZpdGFsaWsva2xpbW92L34vaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGUuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Outlayer v2.1.1\n * the brains and guts of a layout library\n * MIT license\n */\n\n( function( window, factory ) {\n  'use strict';\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, require */\n  if ( true ) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(17),\n        __webpack_require__(2),\n        __webpack_require__(18),\n        __webpack_require__(45)\n      ], __WEBPACK_AMD_DEFINE_RESULT__ = function( EvEmitter, getSize, utils, Item ) {\n        return factory( window, EvEmitter, getSize, utils, Item);\n      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory(\n      window,\n      require('ev-emitter'),\n      require('get-size'),\n      require('fizzy-ui-utils'),\n      require('./item')\n    );\n  } else {\n    // browser global\n    window.Outlayer = factory(\n      window,\n      window.EvEmitter,\n      window.getSize,\n      window.fizzyUIUtils,\n      window.Outlayer.Item\n    );\n  }\n\n}( window, function factory( window, EvEmitter, getSize, utils, Item ) {\n'use strict';\n\n// ----- vars ----- //\n\nvar console = window.console;\nvar jQuery = window.jQuery;\nvar noop = function() {};\n\n// -------------------------- Outlayer -------------------------- //\n\n// globally unique identifiers\nvar GUID = 0;\n// internal store of all Outlayer intances\nvar instances = {};\n\n\n/**\n * @param {Element, String} element\n * @param {Object} options\n * @constructor\n */\nfunction Outlayer( element, options ) {\n  var queryElement = utils.getQueryElement( element );\n  if ( !queryElement ) {\n    if ( console ) {\n      console.error( 'Bad element for ' + this.constructor.namespace +\n        ': ' + ( queryElement || element ) );\n    }\n    return;\n  }\n  this.element = queryElement;\n  // add jQuery\n  if ( jQuery ) {\n    this.$element = jQuery( this.element );\n  }\n\n  // options\n  this.options = utils.extend( {}, this.constructor.defaults );\n  this.option( options );\n\n  // add id for Outlayer.getFromElement\n  var id = ++GUID;\n  this.element.outlayerGUID = id; // expando\n  instances[ id ] = this; // associate via id\n\n  // kick it off\n  this._create();\n\n  var isInitLayout = this._getOption('initLayout');\n  if ( isInitLayout ) {\n    this.layout();\n  }\n}\n\n// settings are for internal use only\nOutlayer.namespace = 'outlayer';\nOutlayer.Item = Item;\n\n// default options\nOutlayer.defaults = {\n  containerStyle: {\n    position: 'relative'\n  },\n  initLayout: true,\n  originLeft: true,\n  originTop: true,\n  resize: true,\n  resizeContainer: true,\n  // item options\n  transitionDuration: '0.4s',\n  hiddenStyle: {\n    opacity: 0,\n    transform: 'scale(0.001)'\n  },\n  visibleStyle: {\n    opacity: 1,\n    transform: 'scale(1)'\n  }\n};\n\nvar proto = Outlayer.prototype;\n// inherit EvEmitter\nutils.extend( proto, EvEmitter.prototype );\n\n/**\n * set options\n * @param {Object} opts\n */\nproto.option = function( opts ) {\n  utils.extend( this.options, opts );\n};\n\n/**\n * get backwards compatible option value, check old name\n */\nproto._getOption = function( option ) {\n  var oldOption = this.constructor.compatOptions[ option ];\n  return oldOption && this.options[ oldOption ] !== undefined ?\n    this.options[ oldOption ] : this.options[ option ];\n};\n\nOutlayer.compatOptions = {\n  // currentName: oldName\n  initLayout: 'isInitLayout',\n  horizontal: 'isHorizontal',\n  layoutInstant: 'isLayoutInstant',\n  originLeft: 'isOriginLeft',\n  originTop: 'isOriginTop',\n  resize: 'isResizeBound',\n  resizeContainer: 'isResizingContainer'\n};\n\nproto._create = function() {\n  // get items from children\n  this.reloadItems();\n  // elements that affect layout, but are not laid out\n  this.stamps = [];\n  this.stamp( this.options.stamp );\n  // set container style\n  utils.extend( this.element.style, this.options.containerStyle );\n\n  // bind resize method\n  var canBindResize = this._getOption('resize');\n  if ( canBindResize ) {\n    this.bindResize();\n  }\n};\n\n// goes through all children again and gets bricks in proper order\nproto.reloadItems = function() {\n  // collection of item elements\n  this.items = this._itemize( this.element.children );\n};\n\n\n/**\n * turn elements into Outlayer.Items to be used in layout\n * @param {Array or NodeList or HTMLElement} elems\n * @returns {Array} items - collection of new Outlayer Items\n */\nproto._itemize = function( elems ) {\n\n  var itemElems = this._filterFindItemElements( elems );\n  var Item = this.constructor.Item;\n\n  // create new Outlayer Items for collection\n  var items = [];\n  for ( var i=0; i < itemElems.length; i++ ) {\n    var elem = itemElems[i];\n    var item = new Item( elem, this );\n    items.push( item );\n  }\n\n  return items;\n};\n\n/**\n * get item elements to be used in layout\n * @param {Array or NodeList or HTMLElement} elems\n * @returns {Array} items - item elements\n */\nproto._filterFindItemElements = function( elems ) {\n  return utils.filterFindElements( elems, this.options.itemSelector );\n};\n\n/**\n * getter method for getting item elements\n * @returns {Array} elems - collection of item elements\n */\nproto.getItemElements = function() {\n  return this.items.map( function( item ) {\n    return item.element;\n  });\n};\n\n// ----- init & layout ----- //\n\n/**\n * lays out all items\n */\nproto.layout = function() {\n  this._resetLayout();\n  this._manageStamps();\n\n  // don't animate first layout\n  var layoutInstant = this._getOption('layoutInstant');\n  var isInstant = layoutInstant !== undefined ?\n    layoutInstant : !this._isLayoutInited;\n  this.layoutItems( this.items, isInstant );\n\n  // flag for initalized\n  this._isLayoutInited = true;\n};\n\n// _init is alias for layout\nproto._init = proto.layout;\n\n/**\n * logic before any new layout\n */\nproto._resetLayout = function() {\n  this.getSize();\n};\n\n\nproto.getSize = function() {\n  this.size = getSize( this.element );\n};\n\n/**\n * get measurement from option, for columnWidth, rowHeight, gutter\n * if option is String -> get element from selector string, & get size of element\n * if option is Element -> get size of element\n * else use option as a number\n *\n * @param {String} measurement\n * @param {String} size - width or height\n * @private\n */\nproto._getMeasurement = function( measurement, size ) {\n  var option = this.options[ measurement ];\n  var elem;\n  if ( !option ) {\n    // default to 0\n    this[ measurement ] = 0;\n  } else {\n    // use option as an element\n    if ( typeof option == 'string' ) {\n      elem = this.element.querySelector( option );\n    } else if ( option instanceof HTMLElement ) {\n      elem = option;\n    }\n    // use size of element, if element\n    this[ measurement ] = elem ? getSize( elem )[ size ] : option;\n  }\n};\n\n/**\n * layout a collection of item elements\n * @api public\n */\nproto.layoutItems = function( items, isInstant ) {\n  items = this._getItemsForLayout( items );\n\n  this._layoutItems( items, isInstant );\n\n  this._postLayout();\n};\n\n/**\n * get the items to be laid out\n * you may want to skip over some items\n * @param {Array} items\n * @returns {Array} items\n */\nproto._getItemsForLayout = function( items ) {\n  return items.filter( function( item ) {\n    return !item.isIgnored;\n  });\n};\n\n/**\n * layout items\n * @param {Array} items\n * @param {Boolean} isInstant\n */\nproto._layoutItems = function( items, isInstant ) {\n  this._emitCompleteOnItems( 'layout', items );\n\n  if ( !items || !items.length ) {\n    // no items, emit event with empty array\n    return;\n  }\n\n  var queue = [];\n\n  items.forEach( function( item ) {\n    // get x/y object from method\n    var position = this._getItemLayoutPosition( item );\n    // enqueue\n    position.item = item;\n    position.isInstant = isInstant || item.isLayoutInstant;\n    queue.push( position );\n  }, this );\n\n  this._processLayoutQueue( queue );\n};\n\n/**\n * get item layout position\n * @param {Outlayer.Item} item\n * @returns {Object} x and y position\n */\nproto._getItemLayoutPosition = function( /* item */ ) {\n  return {\n    x: 0,\n    y: 0\n  };\n};\n\n/**\n * iterate over array and position each item\n * Reason being - separating this logic prevents 'layout invalidation'\n * thx @paul_irish\n * @param {Array} queue\n */\nproto._processLayoutQueue = function( queue ) {\n  this.updateStagger();\n  queue.forEach( function( obj, i ) {\n    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant, i );\n  }, this );\n};\n\n// set stagger from option in milliseconds number\nproto.updateStagger = function() {\n  var stagger = this.options.stagger;\n  if ( stagger === null || stagger === undefined ) {\n    this.stagger = 0;\n    return;\n  }\n  this.stagger = getMilliseconds( stagger );\n  return this.stagger;\n};\n\n/**\n * Sets position of item in DOM\n * @param {Outlayer.Item} item\n * @param {Number} x - horizontal position\n * @param {Number} y - vertical position\n * @param {Boolean} isInstant - disables transitions\n */\nproto._positionItem = function( item, x, y, isInstant, i ) {\n  if ( isInstant ) {\n    // if not transition, just set CSS\n    item.goTo( x, y );\n  } else {\n    item.stagger( i * this.stagger );\n    item.moveTo( x, y );\n  }\n};\n\n/**\n * Any logic you want to do after each layout,\n * i.e. size the container\n */\nproto._postLayout = function() {\n  this.resizeContainer();\n};\n\nproto.resizeContainer = function() {\n  var isResizingContainer = this._getOption('resizeContainer');\n  if ( !isResizingContainer ) {\n    return;\n  }\n  var size = this._getContainerSize();\n  if ( size ) {\n    this._setContainerMeasure( size.width, true );\n    this._setContainerMeasure( size.height, false );\n  }\n};\n\n/**\n * Sets width or height of container if returned\n * @returns {Object} size\n *   @param {Number} width\n *   @param {Number} height\n */\nproto._getContainerSize = noop;\n\n/**\n * @param {Number} measure - size of width or height\n * @param {Boolean} isWidth\n */\nproto._setContainerMeasure = function( measure, isWidth ) {\n  if ( measure === undefined ) {\n    return;\n  }\n\n  var elemSize = this.size;\n  // add padding and border width if border box\n  if ( elemSize.isBorderBox ) {\n    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +\n      elemSize.borderLeftWidth + elemSize.borderRightWidth :\n      elemSize.paddingBottom + elemSize.paddingTop +\n      elemSize.borderTopWidth + elemSize.borderBottomWidth;\n  }\n\n  measure = Math.max( measure, 0 );\n  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';\n};\n\n/**\n * emit eventComplete on a collection of items events\n * @param {String} eventName\n * @param {Array} items - Outlayer.Items\n */\nproto._emitCompleteOnItems = function( eventName, items ) {\n  var _this = this;\n  function onComplete() {\n    _this.dispatchEvent( eventName + 'Complete', null, [ items ] );\n  }\n\n  var count = items.length;\n  if ( !items || !count ) {\n    onComplete();\n    return;\n  }\n\n  var doneCount = 0;\n  function tick() {\n    doneCount++;\n    if ( doneCount == count ) {\n      onComplete();\n    }\n  }\n\n  // bind callback\n  items.forEach( function( item ) {\n    item.once( eventName, tick );\n  });\n};\n\n/**\n * emits events via EvEmitter and jQuery events\n * @param {String} type - name of event\n * @param {Event} event - original event\n * @param {Array} args - extra arguments\n */\nproto.dispatchEvent = function( type, event, args ) {\n  // add original event to arguments\n  var emitArgs = event ? [ event ].concat( args ) : args;\n  this.emitEvent( type, emitArgs );\n\n  if ( jQuery ) {\n    // set this.$element\n    this.$element = this.$element || jQuery( this.element );\n    if ( event ) {\n      // create jQuery event\n      var $event = jQuery.Event( event );\n      $event.type = type;\n      this.$element.trigger( $event, args );\n    } else {\n      // just trigger with type if no event available\n      this.$element.trigger( type, args );\n    }\n  }\n};\n\n// -------------------------- ignore & stamps -------------------------- //\n\n\n/**\n * keep item in collection, but do not lay it out\n * ignored items do not get skipped in layout\n * @param {Element} elem\n */\nproto.ignore = function( elem ) {\n  var item = this.getItem( elem );\n  if ( item ) {\n    item.isIgnored = true;\n  }\n};\n\n/**\n * return item to layout collection\n * @param {Element} elem\n */\nproto.unignore = function( elem ) {\n  var item = this.getItem( elem );\n  if ( item ) {\n    delete item.isIgnored;\n  }\n};\n\n/**\n * adds elements to stamps\n * @param {NodeList, Array, Element, or String} elems\n */\nproto.stamp = function( elems ) {\n  elems = this._find( elems );\n  if ( !elems ) {\n    return;\n  }\n\n  this.stamps = this.stamps.concat( elems );\n  // ignore\n  elems.forEach( this.ignore, this );\n};\n\n/**\n * removes elements to stamps\n * @param {NodeList, Array, or Element} elems\n */\nproto.unstamp = function( elems ) {\n  elems = this._find( elems );\n  if ( !elems ){\n    return;\n  }\n\n  elems.forEach( function( elem ) {\n    // filter out removed stamp elements\n    utils.removeFrom( this.stamps, elem );\n    this.unignore( elem );\n  }, this );\n};\n\n/**\n * finds child elements\n * @param {NodeList, Array, Element, or String} elems\n * @returns {Array} elems\n */\nproto._find = function( elems ) {\n  if ( !elems ) {\n    return;\n  }\n  // if string, use argument as selector string\n  if ( typeof elems == 'string' ) {\n    elems = this.element.querySelectorAll( elems );\n  }\n  elems = utils.makeArray( elems );\n  return elems;\n};\n\nproto._manageStamps = function() {\n  if ( !this.stamps || !this.stamps.length ) {\n    return;\n  }\n\n  this._getBoundingRect();\n\n  this.stamps.forEach( this._manageStamp, this );\n};\n\n// update boundingLeft / Top\nproto._getBoundingRect = function() {\n  // get bounding rect for container element\n  var boundingRect = this.element.getBoundingClientRect();\n  var size = this.size;\n  this._boundingRect = {\n    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,\n    top: boundingRect.top + size.paddingTop + size.borderTopWidth,\n    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),\n    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )\n  };\n};\n\n/**\n * @param {Element} stamp\n**/\nproto._manageStamp = noop;\n\n/**\n * get x/y position of element relative to container element\n * @param {Element} elem\n * @returns {Object} offset - has left, top, right, bottom\n */\nproto._getElementOffset = function( elem ) {\n  var boundingRect = elem.getBoundingClientRect();\n  var thisRect = this._boundingRect;\n  var size = getSize( elem );\n  var offset = {\n    left: boundingRect.left - thisRect.left - size.marginLeft,\n    top: boundingRect.top - thisRect.top - size.marginTop,\n    right: thisRect.right - boundingRect.right - size.marginRight,\n    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom\n  };\n  return offset;\n};\n\n// -------------------------- resize -------------------------- //\n\n// enable event handlers for listeners\n// i.e. resize -> onresize\nproto.handleEvent = utils.handleEvent;\n\n/**\n * Bind layout to window resizing\n */\nproto.bindResize = function() {\n  window.addEventListener( 'resize', this );\n  this.isResizeBound = true;\n};\n\n/**\n * Unbind layout to window resizing\n */\nproto.unbindResize = function() {\n  window.removeEventListener( 'resize', this );\n  this.isResizeBound = false;\n};\n\nproto.onresize = function() {\n  this.resize();\n};\n\nutils.debounceMethod( Outlayer, 'onresize', 100 );\n\nproto.resize = function() {\n  // don't trigger if size did not change\n  // or if resize was unbound. See #9\n  if ( !this.isResizeBound || !this.needsResizeLayout() ) {\n    return;\n  }\n\n  this.layout();\n};\n\n/**\n * check if layout is needed post layout\n * @returns Boolean\n */\nproto.needsResizeLayout = function() {\n  var size = getSize( this.element );\n  // check that this.size and size are there\n  // IE8 triggers resize on body size change, so they might not be\n  var hasSizes = this.size && size;\n  return hasSizes && size.innerWidth !== this.size.innerWidth;\n};\n\n// -------------------------- methods -------------------------- //\n\n/**\n * add items to Outlayer instance\n * @param {Array or NodeList or Element} elems\n * @returns {Array} items - Outlayer.Items\n**/\nproto.addItems = function( elems ) {\n  var items = this._itemize( elems );\n  // add items to collection\n  if ( items.length ) {\n    this.items = this.items.concat( items );\n  }\n  return items;\n};\n\n/**\n * Layout newly-appended item elements\n * @param {Array or NodeList or Element} elems\n */\nproto.appended = function( elems ) {\n  var items = this.addItems( elems );\n  if ( !items.length ) {\n    return;\n  }\n  // layout and reveal just the new items\n  this.layoutItems( items, true );\n  this.reveal( items );\n};\n\n/**\n * Layout prepended elements\n * @param {Array or NodeList or Element} elems\n */\nproto.prepended = function( elems ) {\n  var items = this._itemize( elems );\n  if ( !items.length ) {\n    return;\n  }\n  // add items to beginning of collection\n  var previousItems = this.items.slice(0);\n  this.items = items.concat( previousItems );\n  // start new layout\n  this._resetLayout();\n  this._manageStamps();\n  // layout new stuff without transition\n  this.layoutItems( items, true );\n  this.reveal( items );\n  // layout previous items\n  this.layoutItems( previousItems );\n};\n\n/**\n * reveal a collection of items\n * @param {Array of Outlayer.Items} items\n */\nproto.reveal = function( items ) {\n  this._emitCompleteOnItems( 'reveal', items );\n  if ( !items || !items.length ) {\n    return;\n  }\n  var stagger = this.updateStagger();\n  items.forEach( function( item, i ) {\n    item.stagger( i * stagger );\n    item.reveal();\n  });\n};\n\n/**\n * hide a collection of items\n * @param {Array of Outlayer.Items} items\n */\nproto.hide = function( items ) {\n  this._emitCompleteOnItems( 'hide', items );\n  if ( !items || !items.length ) {\n    return;\n  }\n  var stagger = this.updateStagger();\n  items.forEach( function( item, i ) {\n    item.stagger( i * stagger );\n    item.hide();\n  });\n};\n\n/**\n * reveal item elements\n * @param {Array}, {Element}, {NodeList} items\n */\nproto.revealItemElements = function( elems ) {\n  var items = this.getItems( elems );\n  this.reveal( items );\n};\n\n/**\n * hide item elements\n * @param {Array}, {Element}, {NodeList} items\n */\nproto.hideItemElements = function( elems ) {\n  var items = this.getItems( elems );\n  this.hide( items );\n};\n\n/**\n * get Outlayer.Item, given an Element\n * @param {Element} elem\n * @param {Function} callback\n * @returns {Outlayer.Item} item\n */\nproto.getItem = function( elem ) {\n  // loop through items to get the one that matches\n  for ( var i=0; i < this.items.length; i++ ) {\n    var item = this.items[i];\n    if ( item.element == elem ) {\n      // return item\n      return item;\n    }\n  }\n};\n\n/**\n * get collection of Outlayer.Items, given Elements\n * @param {Array} elems\n * @returns {Array} items - Outlayer.Items\n */\nproto.getItems = function( elems ) {\n  elems = utils.makeArray( elems );\n  var items = [];\n  elems.forEach( function( elem ) {\n    var item = this.getItem( elem );\n    if ( item ) {\n      items.push( item );\n    }\n  }, this );\n\n  return items;\n};\n\n/**\n * remove element(s) from instance and DOM\n * @param {Array or NodeList or Element} elems\n */\nproto.remove = function( elems ) {\n  var removeItems = this.getItems( elems );\n\n  this._emitCompleteOnItems( 'remove', removeItems );\n\n  // bail if no items to remove\n  if ( !removeItems || !removeItems.length ) {\n    return;\n  }\n\n  removeItems.forEach( function( item ) {\n    item.remove();\n    // remove item from collection\n    utils.removeFrom( this.items, item );\n  }, this );\n};\n\n// ----- destroy ----- //\n\n// remove and disable Outlayer instance\nproto.destroy = function() {\n  // clean up dynamic styles\n  var style = this.element.style;\n  style.height = '';\n  style.position = '';\n  style.width = '';\n  // destroy items\n  this.items.forEach( function( item ) {\n    item.destroy();\n  });\n\n  this.unbindResize();\n\n  var id = this.element.outlayerGUID;\n  delete instances[ id ]; // remove reference to instance by id\n  delete this.element.outlayerGUID;\n  // remove data for jQuery\n  if ( jQuery ) {\n    jQuery.removeData( this.element, this.constructor.namespace );\n  }\n\n};\n\n// -------------------------- data -------------------------- //\n\n/**\n * get Outlayer instance from element\n * @param {Element} elem\n * @returns {Outlayer}\n */\nOutlayer.data = function( elem ) {\n  elem = utils.getQueryElement( elem );\n  var id = elem && elem.outlayerGUID;\n  return id && instances[ id ];\n};\n\n\n// -------------------------- create Outlayer class -------------------------- //\n\n/**\n * create a layout class\n * @param {String} namespace\n */\nOutlayer.create = function( namespace, options ) {\n  // sub-class Outlayer\n  var Layout = subclass( Outlayer );\n  // apply new options and compatOptions\n  Layout.defaults = utils.extend( {}, Outlayer.defaults );\n  utils.extend( Layout.defaults, options );\n  Layout.compatOptions = utils.extend( {}, Outlayer.compatOptions  );\n\n  Layout.namespace = namespace;\n\n  Layout.data = Outlayer.data;\n\n  // sub-class Item\n  Layout.Item = subclass( Item );\n\n  // -------------------------- declarative -------------------------- //\n\n  utils.htmlInit( Layout, namespace );\n\n  // -------------------------- jQuery bridge -------------------------- //\n\n  // make into jQuery plugin\n  if ( jQuery && jQuery.bridget ) {\n    jQuery.bridget( namespace, Layout );\n  }\n\n  return Layout;\n};\n\nfunction subclass( Parent ) {\n  function SubClass() {\n    Parent.apply( this, arguments );\n  }\n\n  SubClass.prototype = Object.create( Parent.prototype );\n  SubClass.prototype.constructor = SubClass;\n\n  return SubClass;\n}\n\n// ----- helpers ----- //\n\n// how many milliseconds are in each unit\nvar msUnits = {\n  ms: 1,\n  s: 1000\n};\n\n// munge time-like parameter into millisecond number\n// '0.4s' -> 40\nfunction getMilliseconds( time ) {\n  if ( typeof time == 'number' ) {\n    return time;\n  }\n  var matches = time.match( /(^\\d*\\.?\\d*)(\\w*)/ );\n  var num = matches && matches[1];\n  var unit = matches && matches[2];\n  if ( !num.length ) {\n    return 0;\n  }\n  num = parseFloat( num );\n  var mult = msUnits[ unit ] || 1;\n  return num * mult;\n}\n\n// ----- fin ----- //\n\n// back in global\nOutlayer.Item = Item;\n\nreturn Outlayer;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _DOC$WIN$HTMLBODY$BOD = {\n  DOC: $(document),\n  WIN: $(window),\n  HTMLBODY: $('html, body'),\n  BODY: $('body'),\n  OUT: $('.out'),\n  OVERLAY: $('.js-overlay'),\n  ACTIVE: 'is-active',\n  INIT: 'is-init',\n  OPEN: 'is-open',\n  SHOW: 'is-show',\n  ANIMATE: 'is-animate',\n  HAS_FLEX: 'has-flex',\n  PLAYED: 'is-played',\n  PAUSED: 'is-paused',\n  BTN_MENU: $('.js-btn-menu'),\n  HIDDEN: 'is-hidden',\n  FIXED: 'is-fixed',\n  SECTION: $('.js-section'),\n  widthSM: 767,\n  widthMD: 1023,\n  widthLG: 1279\n},\n    DOC = _DOC$WIN$HTMLBODY$BOD.DOC,\n    WIN = _DOC$WIN$HTMLBODY$BOD.WIN,\n    HTMLBODY = _DOC$WIN$HTMLBODY$BOD.HTMLBODY,\n    BODY = _DOC$WIN$HTMLBODY$BOD.BODY,\n    OUT = _DOC$WIN$HTMLBODY$BOD.OUT,\n    OVERLAY = _DOC$WIN$HTMLBODY$BOD.OVERLAY,\n    ACTIVE = _DOC$WIN$HTMLBODY$BOD.ACTIVE,\n    INIT = _DOC$WIN$HTMLBODY$BOD.INIT,\n    OPEN = _DOC$WIN$HTMLBODY$BOD.OPEN,\n    SHOW = _DOC$WIN$HTMLBODY$BOD.SHOW,\n    ANIMATE = _DOC$WIN$HTMLBODY$BOD.ANIMATE,\n    HAS_FLEX = _DOC$WIN$HTMLBODY$BOD.HAS_FLEX,\n    PLAYED = _DOC$WIN$HTMLBODY$BOD.PLAYED,\n    PAUSED = _DOC$WIN$HTMLBODY$BOD.PAUSED,\n    BTN_MENU = _DOC$WIN$HTMLBODY$BOD.BTN_MENU,\n    HIDDEN = _DOC$WIN$HTMLBODY$BOD.HIDDEN,\n    FIXED = _DOC$WIN$HTMLBODY$BOD.FIXED,\n    SECTION = _DOC$WIN$HTMLBODY$BOD.SECTION,\n    widthSM = _DOC$WIN$HTMLBODY$BOD.widthSM,\n    widthMD = _DOC$WIN$HTMLBODY$BOD.widthMD,\n    widthLG = _DOC$WIN$HTMLBODY$BOD.widthLG,\n    slickXS = _DOC$WIN$HTMLBODY$BOD.slickXS,\n    slickSM = _DOC$WIN$HTMLBODY$BOD.slickSM,\n    slickMD = _DOC$WIN$HTMLBODY$BOD.slickMD;\nexports.DOC = DOC;\nexports.WIN = WIN;\nexports.HTMLBODY = HTMLBODY;\nexports.BODY = BODY;\nexports.OUT = OUT;\nexports.OVERLAY = OVERLAY;\nexports.ACTIVE = ACTIVE;\nexports.INIT = INIT;\nexports.OPEN = OPEN;\nexports.SHOW = SHOW;\nexports.ANIMATE = ANIMATE;\nexports.HAS_FLEX = HAS_FLEX;\nexports.PLAYED = PLAYED;\nexports.PAUSED = PAUSED;\nexports.BTN_MENU = BTN_MENU;\nexports.HIDDEN = HIDDEN;\nexports.FIXED = FIXED;\nexports.SECTION = SECTION;\nexports.widthSM = widthSM;\nexports.widthMD = widthMD;\nexports.widthLG = widthLG;\nexports.slickXS = slickXS;\nexports.slickSM = slickSM;\nexports.slickMD = slickMD;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvX2NvbnN0YW50cy5qcz84YjU3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB7XHJcbiAgRE9DLFxyXG4gIFdJTixcclxuICBIVE1MQk9EWSxcclxuICBCT0RZLFxyXG4gIE9VVCxcclxuICBPVkVSTEFZLFxyXG4gIEFDVElWRSxcclxuICBJTklULFxyXG4gIE9QRU4sXHJcbiAgU0hPVyxcclxuICBBTklNQVRFLFxyXG4gIEhBU19GTEVYLFxyXG4gIFBMQVlFRCxcclxuICBQQVVTRUQsXHJcbiAgQlROX01FTlUsXHJcbiAgSElEREVOLFxyXG4gIEZJWEVELFxyXG4gIFNFQ1RJT04sXHJcbiAgd2lkdGhTTSxcclxuICB3aWR0aE1ELFxyXG4gIHdpZHRoTEcsXHJcbiAgc2xpY2tYUyxcclxuICBzbGlja1NNLFxyXG4gIHNsaWNrTUQsXHJcbn0gPSB7XHJcbiAgRE9DOiAkKGRvY3VtZW50KSxcclxuICBXSU46ICQod2luZG93KSxcclxuICBIVE1MQk9EWTogJCgnaHRtbCwgYm9keScpLFxyXG4gIEJPRFk6ICQoJ2JvZHknKSxcclxuICBPVVQ6ICQoJy5vdXQnKSxcclxuICBPVkVSTEFZOiAkKCcuanMtb3ZlcmxheScpLFxyXG4gIEFDVElWRTogJ2lzLWFjdGl2ZScsXHJcbiAgSU5JVDogJ2lzLWluaXQnLFxyXG4gIE9QRU46ICdpcy1vcGVuJyxcclxuICBTSE9XOiAnaXMtc2hvdycsXHJcbiAgQU5JTUFURTogJ2lzLWFuaW1hdGUnLFxyXG4gIEhBU19GTEVYOiAnaGFzLWZsZXgnLFxyXG4gIFBMQVlFRDogJ2lzLXBsYXllZCcsXHJcbiAgUEFVU0VEOiAnaXMtcGF1c2VkJyxcclxuICBCVE5fTUVOVTogJCgnLmpzLWJ0bi1tZW51JyksXHJcbiAgSElEREVOOiAnaXMtaGlkZGVuJyxcclxuICBGSVhFRDogJ2lzLWZpeGVkJyxcclxuICBTRUNUSU9OOiAkKCcuanMtc2VjdGlvbicpLFxyXG4gIHdpZHRoU006IDc2NyxcclxuICB3aWR0aE1EOiAxMDIzLFxyXG4gIHdpZHRoTEc6IDEyNzlcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9fY29uc3RhbnRzLmpzIl0sIm1hcHBpbmdzIjoiOzs7OztBQXlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXJCQTtBQXhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.TimelineLite = undefined;\n\nvar _TweenLite = __webpack_require__(1);\n\nvar _TweenLite2 = _interopRequireDefault(_TweenLite);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TweenLite._gsScope._gsDefine('TimelineLite', ['core.Animation', 'core.SimpleTimeline', 'TweenLite'], function () {\n\n  var TimelineLite = function TimelineLite(vars) {\n    _TweenLite.SimpleTimeline.call(this, vars);\n    this._labels = {};\n    this.autoRemoveChildren = this.vars.autoRemoveChildren === true;\n    this.smoothChildTiming = this.vars.smoothChildTiming === true;\n    this._sortChildren = true;\n    this._onUpdate = this.vars.onUpdate;\n    var v = this.vars,\n        val,\n        p;\n    for (p in v) {\n      val = v[p];\n      if (_isArray(val)) if (val.join('').indexOf('{self}') !== -1) {\n        v[p] = this._swapSelfInParams(val);\n      }\n    }\n    if (_isArray(v.tweens)) {\n      this.add(v.tweens, 0, v.align, v.stagger);\n    }\n  },\n      _tinyNum = 0.0000000001,\n      TweenLiteInternals = _TweenLite2.default._internals,\n      _internals = TimelineLite._internals = {},\n      _isSelector = TweenLiteInternals.isSelector,\n      _isArray = TweenLiteInternals.isArray,\n      _lazyTweens = TweenLiteInternals.lazyTweens,\n      _lazyRender = TweenLiteInternals.lazyRender,\n      _globals = _TweenLite._gsScope._gsDefine.globals,\n      _copy = function _copy(vars) {\n    var copy = {},\n        p;\n    for (p in vars) {\n      copy[p] = vars[p];\n    }\n    return copy;\n  },\n      _applyCycle = function _applyCycle(vars, targets, i) {\n    var alt = vars.cycle,\n        p,\n        val;\n    for (p in alt) {\n      val = alt[p];\n      vars[p] = typeof val === 'function' ? val(i, targets[i]) : val[i % val.length];\n    }\n    delete vars.cycle;\n  },\n      _pauseCallback = _internals.pauseCallback = function () {},\n      _slice = function _slice(a) {\n    //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n    var b = [],\n        l = a.length,\n        i;\n    for (i = 0; i !== l; b.push(a[i++])) {}\n    return b;\n  },\n      p = TimelineLite.prototype = new _TweenLite.SimpleTimeline();\n\n  TimelineLite.version = '2.0.2';\n  p.constructor = TimelineLite;\n  p.kill()._gc = p._forcingPlayhead = p._hasPause = false;\n\n  /* might use later...\r\n  //translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.\r\n  function localToGlobal(time, animation) {\r\n  \twhile (animation) {\r\n  \t\ttime = (time / animation._timeScale) + animation._startTime;\r\n  \t\tanimation = animation.timeline;\r\n  \t}\r\n  \treturn time;\r\n  }\r\n  \t\t//translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales\r\n  function globalToLocal(time, animation) {\r\n  \tvar scale = 1;\r\n  \ttime -= localToGlobal(0, animation);\r\n  \twhile (animation) {\r\n  \t\tscale *= animation._timeScale;\r\n  \t\tanimation = animation.timeline;\r\n  \t}\r\n  \treturn time * scale;\r\n  }\r\n  */\n\n  p.to = function (target, duration, vars, position) {\n    var Engine = vars.repeat && _globals.TweenMax || _TweenLite2.default;\n    return duration ? this.add(new Engine(target, duration, vars), position) : this.set(target, vars, position);\n  };\n\n  p.from = function (target, duration, vars, position) {\n    return this.add((vars.repeat && _globals.TweenMax || _TweenLite2.default).from(target, duration, vars), position);\n  };\n\n  p.fromTo = function (target, duration, fromVars, toVars, position) {\n    var Engine = toVars.repeat && _globals.TweenMax || _TweenLite2.default;\n    return duration ? this.add(Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);\n  };\n\n  p.staggerTo = function (targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n    var tl = new TimelineLite({ onComplete: onCompleteAll, onCompleteParams: onCompleteAllParams, callbackScope: onCompleteAllScope, smoothChildTiming: this.smoothChildTiming }),\n        cycle = vars.cycle,\n        copy,\n        i;\n    if (typeof targets === 'string') {\n      targets = _TweenLite2.default.selector(targets) || targets;\n    }\n    targets = targets || [];\n    if (_isSelector(targets)) {\n      //senses if the targets object is a selector. If it is, we should translate it into an array.\n      targets = _slice(targets);\n    }\n    stagger = stagger || 0;\n    if (stagger < 0) {\n      targets = _slice(targets);\n      targets.reverse();\n      stagger *= -1;\n    }\n    for (i = 0; i < targets.length; i++) {\n      copy = _copy(vars);\n      if (copy.startAt) {\n        copy.startAt = _copy(copy.startAt);\n        if (copy.startAt.cycle) {\n          _applyCycle(copy.startAt, targets, i);\n        }\n      }\n      if (cycle) {\n        _applyCycle(copy, targets, i);\n        if (copy.duration != null) {\n          duration = copy.duration;\n          delete copy.duration;\n        }\n      }\n      tl.to(targets[i], duration, copy, i * stagger);\n    }\n    return this.add(tl, position);\n  };\n\n  p.staggerFrom = function (targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n    vars.immediateRender = vars.immediateRender != false;\n    vars.runBackwards = true;\n    return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n  };\n\n  p.staggerFromTo = function (targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n    toVars.startAt = fromVars;\n    toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;\n    return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n  };\n\n  p.call = function (callback, params, scope, position) {\n    return this.add(_TweenLite2.default.delayedCall(0, callback, params, scope), position);\n  };\n\n  p.set = function (target, vars, position) {\n    position = this._parseTimeOrLabel(position, 0, true);\n    if (vars.immediateRender == null) {\n      vars.immediateRender = position === this._time && !this._paused;\n    }\n    return this.add(new _TweenLite2.default(target, 0, vars), position);\n  };\n\n  TimelineLite.exportRoot = function (vars, ignoreDelayedCalls) {\n    vars = vars || {};\n    if (vars.smoothChildTiming == null) {\n      vars.smoothChildTiming = true;\n    }\n    var tl = new TimelineLite(vars),\n        root = tl._timeline,\n        hasNegativeStart,\n        time,\n        tween,\n        next;\n    if (ignoreDelayedCalls == null) {\n      ignoreDelayedCalls = true;\n    }\n    root._remove(tl, true);\n    tl._startTime = 0;\n    tl._rawPrevTime = tl._time = tl._totalTime = root._time;\n    tween = root._first;\n    while (tween) {\n      next = tween._next;\n      if (!ignoreDelayedCalls || !(tween instanceof _TweenLite2.default && tween.target === tween.vars.onComplete)) {\n        time = tween._startTime - tween._delay;\n        if (time < 0) {\n          hasNegativeStart = 1;\n        }\n        tl.add(tween, time);\n      }\n      tween = next;\n    }\n    root.add(tl, 0);\n    if (hasNegativeStart) {\n      //calling totalDuration() will force the adjustment necessary to shift the children forward so none of them start before zero, and moves the timeline backwards the same amount, so the playhead is still aligned where it should be globally, but the timeline doesn't have illegal children that start before zero.\n      tl.totalDuration();\n    }\n    return tl;\n  };\n\n  p.add = function (value, position, align, stagger) {\n    var curTime, l, i, child, tl, beforeRawTime;\n    if (typeof position !== 'number') {\n      position = this._parseTimeOrLabel(position, 0, true, value);\n    }\n    if (!(value instanceof _TweenLite.Animation)) {\n      if (value instanceof Array || value && value.push && _isArray(value)) {\n        align = align || 'normal';\n        stagger = stagger || 0;\n        curTime = position;\n        l = value.length;\n        for (i = 0; i < l; i++) {\n          if (_isArray(child = value[i])) {\n            child = new TimelineLite({ tweens: child });\n          }\n          this.add(child, curTime);\n          if (typeof child !== 'string' && typeof child !== 'function') {\n            if (align === 'sequence') {\n              curTime = child._startTime + child.totalDuration() / child._timeScale;\n            } else if (align === 'start') {\n              child._startTime -= child.delay();\n            }\n          }\n          curTime += stagger;\n        }\n        return this._uncache(true);\n      } else if (typeof value === 'string') {\n        return this.addLabel(value, position);\n      } else if (typeof value === 'function') {\n        value = _TweenLite2.default.delayedCall(0, value);\n      } else {\n        throw 'Cannot add ' + value + ' into the timeline; it is not a tween, timeline, function, or string.';\n      }\n    }\n\n    _TweenLite.SimpleTimeline.prototype.add.call(this, value, position);\n\n    if (value._time) {\n      //in case, for example, the _startTime is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.\n      curTime = Math.max(0, Math.min(value.totalDuration(), (this.rawTime() - value._startTime) * value._timeScale));\n      if (Math.abs(curTime - value._totalTime) > 0.00001) {\n        //if an onComplete restarts the tween in a nested timeline, for example, there could be an endless loop without this logic (v2.0.2), like var masterTL = new TimelineMax({autoRemoveChildren: true}), tl = new TimelineMax(); tl.eventCallback(\"onComplete\", function() { tl.restart() } );tl.fromTo('div', 1.1, { rotation: 0 }, { rotation: 360 }, 0);masterTL.add(tl);\n        value.render(curTime, false, false);\n      }\n    }\n\n    //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.\n    if (this._gc || this._time === this._duration) if (!this._paused) if (this._duration < this.duration()) {\n      //in case any of the ancestors had completed but should now be enabled...\n      tl = this;\n      beforeRawTime = tl.rawTime() > value._startTime; //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.\n      while (tl._timeline) {\n        if (beforeRawTime && tl._timeline.smoothChildTiming) {\n          tl.totalTime(tl._totalTime, true); //moves the timeline (shifts its startTime) if necessary, and also enables it.\n        } else if (tl._gc) {\n          tl._enabled(true, false);\n        }\n        tl = tl._timeline;\n      }\n    }\n\n    return this;\n  };\n\n  p.remove = function (value) {\n    if (value instanceof _TweenLite.Animation) {\n      this._remove(value, false);\n      var tl = value._timeline = value.vars.useFrames ? _TweenLite.Animation._rootFramesTimeline : _TweenLite.Animation._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.\n      value._startTime = (value._paused ? value._pauseTime : tl._time) - (!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale; //ensure that if it gets played again, the timing is correct.\n      return this;\n    } else if (value instanceof Array || value && value.push && _isArray(value)) {\n      var i = value.length;\n      while (--i > -1) {\n        this.remove(value[i]);\n      }\n      return this;\n    } else if (typeof value === 'string') {\n      return this.removeLabel(value);\n    }\n    return this.kill(null, value);\n  };\n\n  p._remove = function (tween, skipDisable) {\n    _TweenLite.SimpleTimeline.prototype._remove.call(this, tween, skipDisable);\n    var last = this._last;\n    if (!last) {\n      this._time = this._totalTime = this._duration = this._totalDuration = 0;\n    } else if (this._time > this.duration()) {\n      this._time = this._duration;\n      this._totalTime = this._totalDuration;\n    }\n    return this;\n  };\n\n  p.append = function (value, offsetOrLabel) {\n    return this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));\n  };\n\n  p.insert = p.insertMultiple = function (value, position, align, stagger) {\n    return this.add(value, position || 0, align, stagger);\n  };\n\n  p.appendMultiple = function (tweens, offsetOrLabel, align, stagger) {\n    return this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);\n  };\n\n  p.addLabel = function (label, position) {\n    this._labels[label] = this._parseTimeOrLabel(position);\n    return this;\n  };\n\n  p.addPause = function (position, callback, params, scope) {\n    var t = _TweenLite2.default.delayedCall(0, _pauseCallback, params, scope || this);\n    t.vars.onComplete = t.vars.onReverseComplete = callback;\n    t.data = 'isPause';\n    this._hasPause = true;\n    return this.add(t, position);\n  };\n\n  p.removeLabel = function (label) {\n    delete this._labels[label];\n    return this;\n  };\n\n  p.getLabelTime = function (label) {\n    return this._labels[label] != null ? this._labels[label] : -1;\n  };\n\n  p._parseTimeOrLabel = function (timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {\n    var clippedDuration, i;\n    //if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().\n    if (ignore instanceof _TweenLite.Animation && ignore.timeline === this) {\n      this.remove(ignore);\n    } else if (ignore && (ignore instanceof Array || ignore.push && _isArray(ignore))) {\n      i = ignore.length;\n      while (--i > -1) {\n        if (ignore[i] instanceof _TweenLite.Animation && ignore[i].timeline === this) {\n          this.remove(ignore[i]);\n        }\n      }\n    }\n    clippedDuration = typeof timeOrLabel === 'number' && !offsetOrLabel ? 0 : this.duration() > 99999999999 ? this.recent().endTime(false) : this._duration; //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.\n    if (typeof offsetOrLabel === 'string') {\n      return this._parseTimeOrLabel(offsetOrLabel, appendIfAbsent && typeof timeOrLabel === 'number' && this._labels[offsetOrLabel] == null ? timeOrLabel - clippedDuration : 0, appendIfAbsent);\n    }\n    offsetOrLabel = offsetOrLabel || 0;\n    if (typeof timeOrLabel === 'string' && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) {\n      //if the string is a number like \"1\", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).\n      i = timeOrLabel.indexOf('=');\n      if (i === -1) {\n        if (this._labels[timeOrLabel] == null) {\n          return appendIfAbsent ? this._labels[timeOrLabel] = clippedDuration + offsetOrLabel : offsetOrLabel;\n        }\n        return this._labels[timeOrLabel] + offsetOrLabel;\n      }\n      offsetOrLabel = parseInt(timeOrLabel.charAt(i - 1) + '1', 10) * Number(timeOrLabel.substr(i + 1));\n      timeOrLabel = i > 1 ? this._parseTimeOrLabel(timeOrLabel.substr(0, i - 1), 0, appendIfAbsent) : clippedDuration;\n    } else if (timeOrLabel == null) {\n      timeOrLabel = clippedDuration;\n    }\n    return Number(timeOrLabel) + offsetOrLabel;\n  };\n\n  p.seek = function (position, suppressEvents) {\n    return this.totalTime(typeof position === 'number' ? position : this._parseTimeOrLabel(position), suppressEvents !== false);\n  };\n\n  p.stop = function () {\n    return this.paused(true);\n  };\n\n  p.gotoAndPlay = function (position, suppressEvents) {\n    return this.play(position, suppressEvents);\n  };\n\n  p.gotoAndStop = function (position, suppressEvents) {\n    return this.pause(position, suppressEvents);\n  };\n\n  p.render = function (time, suppressEvents, force) {\n    if (this._gc) {\n      this._enabled(true, false);\n    }\n    var prevTime = this._time,\n        totalDur = !this._dirty ? this._totalDuration : this.totalDuration(),\n        prevStart = this._startTime,\n        prevTimeScale = this._timeScale,\n        prevPaused = this._paused,\n        tween,\n        isComplete,\n        next,\n        callback,\n        internalForce,\n        pauseTween,\n        curTime;\n    if (prevTime !== this._time) {\n      //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).\n      time += this._time - prevTime;\n    }\n    if (time >= totalDur - 0.0000001 && time >= 0) {\n      //to work around occasional floating point math artifacts.\n      this._totalTime = this._time = totalDur;\n      if (!this._reversed) if (!this._hasPausedChild()) {\n        isComplete = true;\n        callback = 'onComplete';\n        internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n        if (this._duration === 0) if (time <= 0 && time >= -0.0000001 || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum) if (this._rawPrevTime !== time && this._first) {\n          internalForce = true;\n          if (this._rawPrevTime > _tinyNum) {\n            callback = 'onReverseComplete';\n          }\n        }\n      }\n      this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n      time = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.\n    } else if (time < 0.0000001) {\n      //to work around occasional floating point math artifacts, round super small values to 0.\n      this._totalTime = this._time = 0;\n      if (prevTime !== 0 || this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || time < 0 && this._rawPrevTime >= 0)) {\n        callback = 'onReverseComplete';\n        isComplete = this._reversed;\n      }\n      if (time < 0) {\n        this._active = false;\n        if (this._timeline.autoRemoveChildren && this._reversed) {\n          //ensures proper GC if a timeline is resumed after it's finished reversing.\n          internalForce = isComplete = true;\n          callback = 'onReverseComplete';\n        } else if (this._rawPrevTime >= 0 && this._first) {\n          //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.\n          internalForce = true;\n        }\n        this._rawPrevTime = time;\n      } else {\n        this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n        if (time === 0 && isComplete) {\n          //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).\n          tween = this._first;\n          while (tween && tween._startTime === 0) {\n            if (!tween._duration) {\n              isComplete = false;\n            }\n            tween = tween._next;\n          }\n        }\n        time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)\n        if (!this._initted) {\n          internalForce = true;\n        }\n      }\n    } else {\n\n      if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {\n        if (time >= prevTime) {\n          tween = this._first;\n          while (tween && tween._startTime <= time && !pauseTween) {\n            if (!tween._duration) if (tween.data === 'isPause' && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {\n              pauseTween = tween;\n            }\n            tween = tween._next;\n          }\n        } else {\n          tween = this._last;\n          while (tween && tween._startTime >= time && !pauseTween) {\n            if (!tween._duration) if (tween.data === 'isPause' && tween._rawPrevTime > 0) {\n              pauseTween = tween;\n            }\n            tween = tween._prev;\n          }\n        }\n        if (pauseTween) {\n          this._time = time = pauseTween._startTime;\n          this._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay);\n        }\n      }\n\n      this._totalTime = this._time = this._rawPrevTime = time;\n    }\n    if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {\n      return;\n    } else if (!this._initted) {\n      this._initted = true;\n    }\n\n    if (!this._active) if (!this._paused && this._time !== prevTime && time > 0) {\n      this._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.\n    }\n\n    if (prevTime === 0) if (this.vars.onStart) if (this._time !== 0 || !this._duration) if (!suppressEvents) {\n      this._callback('onStart');\n    }\n\n    curTime = this._time;\n    if (curTime >= prevTime) {\n      tween = this._first;\n      while (tween) {\n        next = tween._next; //record it here because the value could change after rendering...\n        if (curTime !== this._time || this._paused && !prevPaused) {\n          //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n          break;\n        } else if (tween._active || tween._startTime <= curTime && !tween._paused && !tween._gc) {\n          if (pauseTween === tween) {\n            this.pause();\n          }\n          if (!tween._reversed) {\n            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n          } else {\n            tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);\n          }\n        }\n        tween = next;\n      }\n    } else {\n      tween = this._last;\n      while (tween) {\n        next = tween._prev; //record it here because the value could change after rendering...\n        if (curTime !== this._time || this._paused && !prevPaused) {\n          //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n          break;\n        } else if (tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc) {\n          if (pauseTween === tween) {\n            pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.\n            while (pauseTween && pauseTween.endTime() > this._time) {\n              pauseTween.render(pauseTween._reversed ? pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale : (time - pauseTween._startTime) * pauseTween._timeScale, suppressEvents, force);\n              pauseTween = pauseTween._prev;\n            }\n            pauseTween = null;\n            this.pause();\n          }\n          if (!tween._reversed) {\n            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n          } else {\n            tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);\n          }\n        }\n        tween = next;\n      }\n    }\n\n    if (this._onUpdate) if (!suppressEvents) {\n      if (_lazyTweens.length) {\n        //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n        _lazyRender();\n      }\n      this._callback('onUpdate');\n    }\n\n    if (callback) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) {\n      //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate\n      if (isComplete) {\n        if (_lazyTweens.length) {\n          //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.\n          _lazyRender();\n        }\n        if (this._timeline.autoRemoveChildren) {\n          this._enabled(false, false);\n        }\n        this._active = false;\n      }\n      if (!suppressEvents && this.vars[callback]) {\n        this._callback(callback);\n      }\n    }\n  };\n\n  p._hasPausedChild = function () {\n    var tween = this._first;\n    while (tween) {\n      if (tween._paused || tween instanceof TimelineLite && tween._hasPausedChild()) {\n        return true;\n      }\n      tween = tween._next;\n    }\n    return false;\n  };\n\n  p.getChildren = function (nested, tweens, timelines, ignoreBeforeTime) {\n    ignoreBeforeTime = ignoreBeforeTime || -9999999999;\n    var a = [],\n        tween = this._first,\n        cnt = 0;\n    while (tween) {\n      if (tween._startTime < ignoreBeforeTime) {\n        //do nothing\n      } else if (tween instanceof _TweenLite2.default) {\n        if (tweens !== false) {\n          a[cnt++] = tween;\n        }\n      } else {\n        if (timelines !== false) {\n          a[cnt++] = tween;\n        }\n        if (nested !== false) {\n          a = a.concat(tween.getChildren(true, tweens, timelines));\n          cnt = a.length;\n        }\n      }\n      tween = tween._next;\n    }\n    return a;\n  };\n\n  p.getTweensOf = function (target, nested) {\n    var disabled = this._gc,\n        a = [],\n        cnt = 0,\n        tweens,\n        i;\n    if (disabled) {\n      this._enabled(true, true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.\n    }\n    tweens = _TweenLite2.default.getTweensOf(target);\n    i = tweens.length;\n    while (--i > -1) {\n      if (tweens[i].timeline === this || nested && this._contains(tweens[i])) {\n        a[cnt++] = tweens[i];\n      }\n    }\n    if (disabled) {\n      this._enabled(false, true);\n    }\n    return a;\n  };\n\n  p.recent = function () {\n    return this._recent;\n  };\n\n  p._contains = function (tween) {\n    var tl = tween.timeline;\n    while (tl) {\n      if (tl === this) {\n        return true;\n      }\n      tl = tl.timeline;\n    }\n    return false;\n  };\n\n  p.shiftChildren = function (amount, adjustLabels, ignoreBeforeTime) {\n    ignoreBeforeTime = ignoreBeforeTime || 0;\n    var tween = this._first,\n        labels = this._labels,\n        p;\n    while (tween) {\n      if (tween._startTime >= ignoreBeforeTime) {\n        tween._startTime += amount;\n      }\n      tween = tween._next;\n    }\n    if (adjustLabels) {\n      for (p in labels) {\n        if (labels[p] >= ignoreBeforeTime) {\n          labels[p] += amount;\n        }\n      }\n    }\n    return this._uncache(true);\n  };\n\n  p._kill = function (vars, target) {\n    if (!vars && !target) {\n      return this._enabled(false, false);\n    }\n    var tweens = !target ? this.getChildren(true, true, false) : this.getTweensOf(target),\n        i = tweens.length,\n        changed = false;\n    while (--i > -1) {\n      if (tweens[i]._kill(vars, target)) {\n        changed = true;\n      }\n    }\n    return changed;\n  };\n\n  p.clear = function (labels) {\n    var tweens = this.getChildren(false, true, true),\n        i = tweens.length;\n    this._time = this._totalTime = 0;\n    while (--i > -1) {\n      tweens[i]._enabled(false, false);\n    }\n    if (labels !== false) {\n      this._labels = {};\n    }\n    return this._uncache(true);\n  };\n\n  p.invalidate = function () {\n    var tween = this._first;\n    while (tween) {\n      tween.invalidate();\n      tween = tween._next;\n    }\n    return _TweenLite.Animation.prototype.invalidate.call(this);;\n  };\n\n  p._enabled = function (enabled, ignoreTimeline) {\n    if (enabled === this._gc) {\n      var tween = this._first;\n      while (tween) {\n        tween._enabled(enabled, true);\n        tween = tween._next;\n      }\n    }\n    return _TweenLite.SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline);\n  };\n\n  p.totalTime = function (time, suppressEvents, uncapped) {\n    this._forcingPlayhead = true;\n    var val = _TweenLite.Animation.prototype.totalTime.apply(this, arguments);\n    this._forcingPlayhead = false;\n    return val;\n  };\n\n  p.duration = function (value) {\n    if (!arguments.length) {\n      if (this._dirty) {\n        this.totalDuration(); //just triggers recalculation\n      }\n      return this._duration;\n    }\n    if (this.duration() !== 0 && value !== 0) {\n      this.timeScale(this._duration / value);\n    }\n    return this;\n  };\n\n  p.totalDuration = function (value) {\n    if (!arguments.length) {\n      if (this._dirty) {\n        var max = 0,\n            tween = this._last,\n            prevStart = 999999999999,\n            prev,\n            end;\n        while (tween) {\n          prev = tween._prev; //record it here in case the tween changes position in the sequence...\n          if (tween._dirty) {\n            tween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.\n          }\n          if (tween._startTime > prevStart && this._sortChildren && !tween._paused && !this._calculatingDuration) {\n            //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence\n            this._calculatingDuration = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add(), like _parseTimeOrLabel().\n            this.add(tween, tween._startTime - tween._delay);\n            this._calculatingDuration = 0;\n          } else {\n            prevStart = tween._startTime;\n          }\n          if (tween._startTime < 0 && !tween._paused) {\n            //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.\n            max -= tween._startTime;\n            if (this._timeline.smoothChildTiming) {\n              this._startTime += tween._startTime / this._timeScale;\n              this._time -= tween._startTime;\n              this._totalTime -= tween._startTime;\n              this._rawPrevTime -= tween._startTime;\n            }\n            this.shiftChildren(-tween._startTime, false, -9999999999);\n            prevStart = 0;\n          }\n          end = tween._startTime + tween._totalDuration / tween._timeScale;\n          if (end > max) {\n            max = end;\n          }\n          tween = prev;\n        }\n        this._duration = this._totalDuration = max;\n        this._dirty = false;\n      }\n      return this._totalDuration;\n    }\n    return value && this.totalDuration() ? this.timeScale(this._totalDuration / value) : this;\n  };\n\n  p.paused = function (value) {\n    if (!value) {\n      //if there's a pause directly at the spot from where we're unpausing, skip it.\n      var tween = this._first,\n          time = this._time;\n      while (tween) {\n        if (tween._startTime === time && tween.data === 'isPause') {\n          tween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.\n        }\n        tween = tween._next;\n      }\n    }\n    return _TweenLite.Animation.prototype.paused.apply(this, arguments);\n  };\n\n  p.usesFrames = function () {\n    var tl = this._timeline;\n    while (tl._timeline) {\n      tl = tl._timeline;\n    }\n    return tl === _TweenLite.Animation._rootFramesTimeline;\n  };\n\n  p.rawTime = function (wrapRepeats) {\n    return wrapRepeats && (this._paused || this._repeat && this.time() > 0 && this.totalProgress() < 1) ? this._totalTime % (this._duration + this._repeatDelay) : this._paused ? this._totalTime : (this._timeline.rawTime(wrapRepeats) - this._startTime) * this._timeScale;\n  };\n\n  return TimelineLite;\n}, true); /* eslint-disable */\n/*!\r\n * VERSION: 2.0.2\r\n * DATE: 2018-08-27\r\n * UPDATES AND DOCS AT: http://greensock.com\r\n *\r\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\r\n * This work is subject to the terms at http://greensock.com/standard-license or for\r\n * Club GreenSock members, the software agreement that was issued with your membership.\r\n * \r\n * @author: Jack Doyle, jack@greensock.com\r\n */\nvar TimelineLite = exports.TimelineLite = _TweenLite.globals.TimelineLite;\nexports.default = TimelineLite;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IS_FUNC = exports.INIT_SLIDER = exports.SCROLL_TO = exports.TOUCH = exports.GET_RANDOM = undefined;\n\nvar _constants = __webpack_require__(5);\n\nvar _GET_RANDOM$TOUCH$SCR = {\n  GET_RANDOM: function GET_RANDOM(min, max) {\n    return Math.random() * (max - min) + min;\n  },\n  TOUCH: function TOUCH() {\n    return 'ontouchstart' in window;\n  },\n  SCROLL_TO: function SCROLL_TO(position) {\n    _constants.HTMLBODY.animate({\n      scrollTop: position\n    }, 700);\n  },\n  INIT_SLIDER: function INIT_SLIDER(slider) {\n    return slider.on('init', function () {\n      setTimeout(function () {\n        slider.addClass('is-loaded');\n      }, 200);\n    });\n  },\n  IS_FUNC: function IS_FUNC(func) {\n    return typeof func != 'function' ? false : true;\n  }\n},\n    GET_RANDOM = _GET_RANDOM$TOUCH$SCR.GET_RANDOM,\n    TOUCH = _GET_RANDOM$TOUCH$SCR.TOUCH,\n    SCROLL_TO = _GET_RANDOM$TOUCH$SCR.SCROLL_TO,\n    INIT_SLIDER = _GET_RANDOM$TOUCH$SCR.INIT_SLIDER,\n    IS_FUNC = _GET_RANDOM$TOUCH$SCR.IS_FUNC;\nexports.GET_RANDOM = GET_RANDOM;\nexports.TOUCH = TOUCH;\nexports.SCROLL_TO = SCROLL_TO;\nexports.INIT_SLIDER = INIT_SLIDER;\nexports.IS_FUNC = IS_FUNC;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvX3V0aWxzLmpzPzFlNjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSFRNTEJPRFkgfSBmcm9tICcuL19jb25zdGFudHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHtcclxuICBHRVRfUkFORE9NLFxyXG4gIFRPVUNILFxyXG4gIFNDUk9MTF9UTyxcclxuICBJTklUX1NMSURFUixcclxuICBJU19GVU5DXHJcbn0gPSB7XHJcbiAgR0VUX1JBTkRPTShtaW4sIG1heCkge1xyXG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbjtcclxuICB9LFxyXG4gIFRPVUNIKCkge1xyXG4gICAgcmV0dXJuICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdztcclxuICB9LFxyXG4gIFNDUk9MTF9UTyhwb3NpdGlvbikge1xyXG4gICAgSFRNTEJPRFkuYW5pbWF0ZSh7XHJcbiAgICAgIHNjcm9sbFRvcDogcG9zaXRpb25cclxuICAgIH0sIDcwMCk7XHJcbiAgfSxcclxuICBJTklUX1NMSURFUiggc2xpZGVyICkge1xyXG4gIFx0cmV0dXJuIHNsaWRlci5vbignaW5pdCcsICgpID0+IHtcclxuICBcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcbiAgXHRcdFx0c2xpZGVyLmFkZENsYXNzKCdpcy1sb2FkZWQnKTtcclxuICBcdFx0fSwgMjAwKTtcclxuICBcdH0pO1xyXG4gIH0sXHJcbiAgSVNfRlVOQyhmdW5jKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpID8gZmFsc2UgOiB0cnVlO1xyXG4gIH1cclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9fdXRpbHMuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFyQkE7QUFMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fpReset = exports.fpAnimation = exports.init = undefined;\n\nvar _esm = __webpack_require__(34);\n\nvar _SplitIntoRows = __webpack_require__(31);\n\nvar _SplitIntoRows2 = _interopRequireDefault(_SplitIntoRows);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import 'letteringjs';\n\nfunction init() {\n  textIntoRows();\n  // textIntoChars();\n}\n\nfunction tlTemplate(props) {\n  var tl = new _esm.TimelineMax({ delay: props.mainDelay || 0 });\n  props.parentSelector.each(function (index, el) {\n    var elements = $(el).find(props.childSelector);\n    tl.add(new _esm.TimelineMax().staggerTo($(elements), props.duration || 0.8, { x: 0, y: 0, opacity: 1, ease: Power3.easeOut }, props.staggerDelay || 0.08), index / props.delay || 0);\n  });\n  props.arr.push(tl);\n}\n\nfunction fpAnimation(selector) {\n  // var titleRows = $(selector).find('.js-title .text-row');\n  // var titleRowsSecondary = $(selector).find('.js-title-secondary .text-row');\n  var textBlocks = $(selector).find('.js-text-block');\n  // var textBlocks = $(selector).find('.js-text-block');\n  var images = $(selector).find('[data-image*=\"parent\"]');\n\n  var arr = [];\n  var arr2 = [];\n\n  var tl = new _esm.TimelineMax();\n  var tl2 = new _esm.TimelineMax();\n\n  // tlTemplate({\n  //   parentSelector: titleRows,\n  //   childSelector: 'span',\n  //   duration: 0.8,\n  //   arr: arr,\n  //   tl: tl,\n  //   staggerDelay: 0.05\n  // });\n\n  // tlTemplate({\n  //   parentSelector: titleRowsSecondary,\n  //   childSelector: 'span',\n  //   duration: 0.4,\n  //   arr: arr,\n  //   tl: tl,\n  //   mainDelay: -0.4,\n  //   minus: 0.5\n  // });\n\n  var tlImg = new _esm.TimelineMax().to(images, 0, {\n    className: '+=is-active'\n  });\n  arr2.push(tlImg);\n\n  tlTemplate({\n    parentSelector: textBlocks,\n    childSelector: '.text-row',\n    arr: arr,\n    delay: 6,\n    tl: tl,\n    mainDelay: 0.5\n  });\n\n  for (var i = 0; i <= arr.length - 1; i++) {\n    tl.add(arr[i]).eventCallback('onComplete', allowScroll);\n  }\n}\n\nfunction allowScroll() {\n  $.fn.fullpage.setAllowScrolling(true);\n  $.fn.fullpage.setKeyboardScrolling(true);\n}\n\nfunction fpReset(selector) {\n  var tlReset = new _esm.TimelineMax();\n\n  // var letters1 = $(selector).find('.js-title span');\n  // var letters2 = $(selector).find('.js-title-secondary span');\n  var text = $(selector).find('.text-row');\n  // var rowWithLetters1 = $(selector).find('.js-title .text-row');\n  // var rowWithLetters2 = $(selector).find('.js-title-secondary .text-row');\n  var images = $(selector).find('[data-image*=\"parent\"]');\n\n  tlReset\n  // .set(letters1, { opacity: 0, x: 30 })\n  // .set(letters2, { opacity: 0, x: 30 })\n  .set(text, { opacity: 0, y: 80 })\n  // .set(rowWithLetters1, { opacity: 1, y: 0, x: 0 })\n  // .set(rowWithLetters2, { opacity: 1, y: 0, x: 0 })\n  .set(images, { className: 'image' });\n}\n\nfunction textIntoRows() {\n  var textItems = document.querySelectorAll('.js-text');\n\n  var split = function split(selector) {\n    for (var i = 0; i < selector.length; i++) {\n      new _SplitIntoRows2.default({ container: selector[i] });\n    }\n  };\n\n  split(textItems);\n}\n\n// function textIntoChars() {\n//   $('.js-title .text-row')\n//     .lettering('words')\n//     .children('span')\n//     .lettering();\n\n//   $('.js-title-secondary .text-row')\n//     .lettering('words')\n//     .children('span')\n//     .lettering();\n// }\n\nexports.init = init;\nexports.fpAnimation = fpAnimation;\nexports.fpReset = fpReset;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvY29tcG9uZW50cy9fYW5pbWF0aW9uLWZ1bGxwYWdlLmpzP2Q0NDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGltZWxpbmVNYXggfSBmcm9tICcuLi9saWJzL2dzYXAvZXNtJztcclxuaW1wb3J0IFNwbGl0SW50b1Jvd3MgZnJvbSAnLi4vbGlicy9TcGxpdEludG9Sb3dzJztcclxuLy8gaW1wb3J0ICdsZXR0ZXJpbmdqcyc7XHJcblxyXG5mdW5jdGlvbiBpbml0KCkge1xyXG4gIHRleHRJbnRvUm93cygpO1xyXG4gIC8vIHRleHRJbnRvQ2hhcnMoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdGxUZW1wbGF0ZShwcm9wcykge1xyXG4gIHZhciB0bCA9IG5ldyBUaW1lbGluZU1heCh7IGRlbGF5OiBwcm9wcy5tYWluRGVsYXkgfHwgMCB9KTtcclxuICBwcm9wcy5wYXJlbnRTZWxlY3Rvci5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbCkge1xyXG4gICAgdmFyIGVsZW1lbnRzID0gJChlbCkuZmluZChwcm9wcy5jaGlsZFNlbGVjdG9yKTtcclxuICAgIHRsLmFkZChcclxuICAgICAgbmV3IFRpbWVsaW5lTWF4KCkuc3RhZ2dlclRvKFxyXG4gICAgICAgICQoZWxlbWVudHMpLFxyXG4gICAgICAgIHByb3BzLmR1cmF0aW9uIHx8IDAuOCxcclxuICAgICAgICB7IHg6IDAsIHk6IDAsIG9wYWNpdHk6IDEsIGVhc2U6IFBvd2VyMy5lYXNlT3V0IH0sXHJcbiAgICAgICAgcHJvcHMuc3RhZ2dlckRlbGF5IHx8IDAuMDhcclxuICAgICAgKSxcclxuICAgICAgaW5kZXggLyBwcm9wcy5kZWxheSB8fCAwXHJcbiAgICApO1xyXG4gIH0pO1xyXG4gIHByb3BzLmFyci5wdXNoKHRsKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZnBBbmltYXRpb24oc2VsZWN0b3IpIHtcclxuICAvLyB2YXIgdGl0bGVSb3dzID0gJChzZWxlY3RvcikuZmluZCgnLmpzLXRpdGxlIC50ZXh0LXJvdycpO1xyXG4gIC8vIHZhciB0aXRsZVJvd3NTZWNvbmRhcnkgPSAkKHNlbGVjdG9yKS5maW5kKCcuanMtdGl0bGUtc2Vjb25kYXJ5IC50ZXh0LXJvdycpO1xyXG4gIHZhciB0ZXh0QmxvY2tzID0gJChzZWxlY3RvcikuZmluZCgnLmpzLXRleHQtYmxvY2snKTtcclxuICAvLyB2YXIgdGV4dEJsb2NrcyA9ICQoc2VsZWN0b3IpLmZpbmQoJy5qcy10ZXh0LWJsb2NrJyk7XHJcbiAgdmFyIGltYWdlcyA9ICQoc2VsZWN0b3IpLmZpbmQoJ1tkYXRhLWltYWdlKj1cInBhcmVudFwiXScpO1xyXG5cclxuICB2YXIgYXJyID0gW107XHJcbiAgdmFyIGFycjIgPSBbXTtcclxuXHJcbiAgdmFyIHRsID0gbmV3IFRpbWVsaW5lTWF4KCk7XHJcbiAgdmFyIHRsMiA9IG5ldyBUaW1lbGluZU1heCgpO1xyXG5cclxuICAvLyB0bFRlbXBsYXRlKHtcclxuICAvLyAgIHBhcmVudFNlbGVjdG9yOiB0aXRsZVJvd3MsXHJcbiAgLy8gICBjaGlsZFNlbGVjdG9yOiAnc3BhbicsXHJcbiAgLy8gICBkdXJhdGlvbjogMC44LFxyXG4gIC8vICAgYXJyOiBhcnIsXHJcbiAgLy8gICB0bDogdGwsXHJcbiAgLy8gICBzdGFnZ2VyRGVsYXk6IDAuMDVcclxuICAvLyB9KTtcclxuXHJcbiAgLy8gdGxUZW1wbGF0ZSh7XHJcbiAgLy8gICBwYXJlbnRTZWxlY3RvcjogdGl0bGVSb3dzU2Vjb25kYXJ5LFxyXG4gIC8vICAgY2hpbGRTZWxlY3RvcjogJ3NwYW4nLFxyXG4gIC8vICAgZHVyYXRpb246IDAuNCxcclxuICAvLyAgIGFycjogYXJyLFxyXG4gIC8vICAgdGw6IHRsLFxyXG4gIC8vICAgbWFpbkRlbGF5OiAtMC40LFxyXG4gIC8vICAgbWludXM6IDAuNVxyXG4gIC8vIH0pO1xyXG5cclxuICB2YXIgdGxJbWcgPSBuZXcgVGltZWxpbmVNYXgoKS50byhpbWFnZXMsIDAsIHtcclxuICAgIGNsYXNzTmFtZTogJys9aXMtYWN0aXZlJ1xyXG4gIH0pO1xyXG4gIGFycjIucHVzaCh0bEltZyk7XHJcblxyXG4gIHRsVGVtcGxhdGUoe1xyXG4gICAgcGFyZW50U2VsZWN0b3I6IHRleHRCbG9ja3MsXHJcbiAgICBjaGlsZFNlbGVjdG9yOiAnLnRleHQtcm93JyxcclxuICAgIGFycjogYXJyLFxyXG4gICAgZGVsYXk6IDYsXHJcbiAgICB0bDogdGwsXHJcbiAgICBtYWluRGVsYXk6IDAuNVxyXG4gIH0pO1xyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8PSBhcnIubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICB0bC5hZGQoYXJyW2ldKS5ldmVudENhbGxiYWNrKCdvbkNvbXBsZXRlJywgYWxsb3dTY3JvbGwpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYWxsb3dTY3JvbGwoKSB7XHJcbiAgJC5mbi5mdWxscGFnZS5zZXRBbGxvd1Njcm9sbGluZyh0cnVlKTtcclxuICAkLmZuLmZ1bGxwYWdlLnNldEtleWJvYXJkU2Nyb2xsaW5nKHRydWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmcFJlc2V0KHNlbGVjdG9yKSB7XHJcbiAgbGV0IHRsUmVzZXQgPSBuZXcgVGltZWxpbmVNYXgoKTtcclxuXHJcbiAgLy8gdmFyIGxldHRlcnMxID0gJChzZWxlY3RvcikuZmluZCgnLmpzLXRpdGxlIHNwYW4nKTtcclxuICAvLyB2YXIgbGV0dGVyczIgPSAkKHNlbGVjdG9yKS5maW5kKCcuanMtdGl0bGUtc2Vjb25kYXJ5IHNwYW4nKTtcclxuICB2YXIgdGV4dCA9ICQoc2VsZWN0b3IpLmZpbmQoJy50ZXh0LXJvdycpO1xyXG4gIC8vIHZhciByb3dXaXRoTGV0dGVyczEgPSAkKHNlbGVjdG9yKS5maW5kKCcuanMtdGl0bGUgLnRleHQtcm93Jyk7XHJcbiAgLy8gdmFyIHJvd1dpdGhMZXR0ZXJzMiA9ICQoc2VsZWN0b3IpLmZpbmQoJy5qcy10aXRsZS1zZWNvbmRhcnkgLnRleHQtcm93Jyk7XHJcbiAgdmFyIGltYWdlcyA9ICQoc2VsZWN0b3IpLmZpbmQoJ1tkYXRhLWltYWdlKj1cInBhcmVudFwiXScpO1xyXG5cclxuICB0bFJlc2V0XHJcbiAgICAvLyAuc2V0KGxldHRlcnMxLCB7IG9wYWNpdHk6IDAsIHg6IDMwIH0pXHJcbiAgICAvLyAuc2V0KGxldHRlcnMyLCB7IG9wYWNpdHk6IDAsIHg6IDMwIH0pXHJcbiAgICAuc2V0KHRleHQsIHsgb3BhY2l0eTogMCwgeTogODAgfSlcclxuICAgIC8vIC5zZXQocm93V2l0aExldHRlcnMxLCB7IG9wYWNpdHk6IDEsIHk6IDAsIHg6IDAgfSlcclxuICAgIC8vIC5zZXQocm93V2l0aExldHRlcnMyLCB7IG9wYWNpdHk6IDEsIHk6IDAsIHg6IDAgfSlcclxuICAgIC5zZXQoaW1hZ2VzLCB7IGNsYXNzTmFtZTogJ2ltYWdlJyB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdGV4dEludG9Sb3dzKCkge1xyXG4gIGxldCB0ZXh0SXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtdGV4dCcpO1xyXG5cclxuICBjb25zdCBzcGxpdCA9IHNlbGVjdG9yID0+IHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0b3IubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbmV3IFNwbGl0SW50b1Jvd3MoeyBjb250YWluZXI6IHNlbGVjdG9yW2ldIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHNwbGl0KHRleHRJdGVtcyk7XHJcbn1cclxuXHJcbi8vIGZ1bmN0aW9uIHRleHRJbnRvQ2hhcnMoKSB7XHJcbi8vICAgJCgnLmpzLXRpdGxlIC50ZXh0LXJvdycpXHJcbi8vICAgICAubGV0dGVyaW5nKCd3b3JkcycpXHJcbi8vICAgICAuY2hpbGRyZW4oJ3NwYW4nKVxyXG4vLyAgICAgLmxldHRlcmluZygpO1xyXG5cclxuLy8gICAkKCcuanMtdGl0bGUtc2Vjb25kYXJ5IC50ZXh0LXJvdycpXHJcbi8vICAgICAubGV0dGVyaW5nKCd3b3JkcycpXHJcbi8vICAgICAuY2hpbGRyZW4oJ3NwYW4nKVxyXG4vLyAgICAgLmxldHRlcmluZygpO1xyXG4vLyB9XHJcblxyXG5leHBvcnQgeyBpbml0LCBmcEFuaW1hdGlvbiwgZnBSZXNldCB9O1xyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9jb21wb25lbnRzL19hbmltYXRpb24tZnVsbHBhZ2UuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQUE7QUFDQTs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.AttrPlugin = undefined;\n\nvar _TweenLite = __webpack_require__(1);\n\nvar AttrPlugin = exports.AttrPlugin = _TweenLite._gsScope._gsDefine.plugin({\n  propName: 'attr',\n  API: 2,\n  version: '0.6.1',\n\n  //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n  init: function init(target, value, tween, index) {\n    var p, end;\n    if (typeof target.setAttribute !== 'function') {\n      return false;\n    }\n    for (p in value) {\n      end = value[p];\n      if (typeof end === 'function') {\n        end = end(index, target);\n      }\n      this._addTween(target, 'setAttribute', target.getAttribute(p) + '', end + '', p, false, p);\n      this._overwriteProps.push(p);\n    }\n    return true;\n  }\n\n}); /*!\r\n     * VERSION: 0.6.1\r\n     * DATE: 2018-08-27\r\n     * UPDATES AND DOCS AT: http://greensock.com\r\n     *\r\n     * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\r\n     * This work is subject to the terms at http://greensock.com/standard-license or for\r\n     * Club GreenSock members, the software agreement that was issued with your membership.\r\n     * \r\n     * @author: Jack Doyle, jack@greensock.com\r\n     */\n\nexports.default = AttrPlugin;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvbGlicy9nc2FwL2VzbS9BdHRyUGx1Z2luLmpzP2U2YjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIFZFUlNJT046IDAuNi4xXHJcbiAqIERBVEU6IDIwMTgtMDgtMjdcclxuICogVVBEQVRFUyBBTkQgRE9DUyBBVDogaHR0cDovL2dyZWVuc29jay5jb21cclxuICpcclxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDA4LTIwMTgsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogVGhpcyB3b3JrIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHA6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXHJcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBzb2Z0d2FyZSBhZ3JlZW1lbnQgdGhhdCB3YXMgaXNzdWVkIHdpdGggeW91ciBtZW1iZXJzaGlwLlxyXG4gKiBcclxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgX2dzU2NvcGUgfSBmcm9tICcuL1R3ZWVuTGl0ZS5qcyc7XHJcblxyXG5leHBvcnQgdmFyIEF0dHJQbHVnaW4gPSBfZ3NTY29wZS5fZ3NEZWZpbmUucGx1Z2luKHtcclxuICBwcm9wTmFtZTogJ2F0dHInLFxyXG4gIEFQSTogMixcclxuICB2ZXJzaW9uOiAnMC42LjEnLFxyXG5cclxuICAvL2NhbGxlZCB3aGVuIHRoZSB0d2VlbiByZW5kZXJzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpcyBpcyB3aGVyZSBpbml0aWFsIHZhbHVlcyBzaG91bGQgYmUgcmVjb3JkZWQgYW5kIGFueSBzZXR1cCByb3V0aW5lcyBzaG91bGQgcnVuLlxyXG4gIGluaXQ6IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUsIHR3ZWVuLCBpbmRleCkge1xyXG4gICAgdmFyIHAsIGVuZDtcclxuICAgIGlmICh0eXBlb2YodGFyZ2V0LnNldEF0dHJpYnV0ZSkgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZm9yIChwIGluIHZhbHVlKSB7XHJcbiAgICAgIGVuZCA9IHZhbHVlW3BdO1xyXG4gICAgICBpZiAodHlwZW9mKGVuZCkgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBlbmQgPSBlbmQoaW5kZXgsIHRhcmdldCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5fYWRkVHdlZW4odGFyZ2V0LCAnc2V0QXR0cmlidXRlJywgdGFyZ2V0LmdldEF0dHJpYnV0ZShwKSArICcnLCBlbmQgKyAnJywgcCwgZmFsc2UsIHApO1xyXG4gICAgICB0aGlzLl9vdmVyd3JpdGVQcm9wcy5wdXNoKHApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxufSk7XHJcblxyXG5leHBvcnQgeyBBdHRyUGx1Z2luIGFzIGRlZmF1bHQgfTtcclxuXHJcblxyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9saWJzL2dzYXAvZXNtL0F0dHJQbHVnaW4uanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFyQkE7Ozs7Ozs7Ozs7OztBQXdCQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.BezierPlugin = undefined;\n\nvar _TweenLite = __webpack_require__(1);\n\nvar _RAD2DEG = 180 / Math.PI,\n    _r1 = [],\n    _r2 = [],\n    _r3 = [],\n    _corProps = {},\n    _globals = _TweenLite._gsScope._gsDefine.globals,\n    Segment = function Segment(a, b, c, d) {\n  if (c === d) {\n    //if c and d match, the final autoRotate value could lock at -90 degrees, so differentiate them slightly.\n    c = d - (d - b) / 1000000;\n  }\n  if (a === b) {\n    //if a and b match, the starting autoRotate value could lock at -90 degrees, so differentiate them slightly.\n    b = a + (c - a) / 1000000;\n  }\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.da = d - a;\n  this.ca = c - a;\n  this.ba = b - a;\n},\n    _correlate = ',x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,',\n    cubicToQuadratic = function cubicToQuadratic(a, b, c, d) {\n  var q1 = { a: a },\n      q2 = {},\n      q3 = {},\n      q4 = { c: d },\n      mab = (a + b) / 2,\n      mbc = (b + c) / 2,\n      mcd = (c + d) / 2,\n      mabc = (mab + mbc) / 2,\n      mbcd = (mbc + mcd) / 2,\n      m8 = (mbcd - mabc) / 8;\n  q1.b = mab + (a - mab) / 4;\n  q2.b = mabc + m8;\n  q1.c = q2.a = (q1.b + q2.b) / 2;\n  q2.c = q3.a = (mabc + mbcd) / 2;\n  q3.b = mbcd - m8;\n  q4.b = mcd + (d - mcd) / 4;\n  q3.c = q4.a = (q3.b + q4.b) / 2;\n  return [q1, q2, q3, q4];\n},\n    _calculateControlPoints = function _calculateControlPoints(a, curviness, quad, basic, correlate) {\n  var l = a.length - 1,\n      ii = 0,\n      cp1 = a[0].a,\n      i,\n      p1,\n      p2,\n      p3,\n      seg,\n      m1,\n      m2,\n      mm,\n      cp2,\n      qb,\n      r1,\n      r2,\n      tl;\n  for (i = 0; i < l; i++) {\n    seg = a[ii];\n    p1 = seg.a;\n    p2 = seg.d;\n    p3 = a[ii + 1].d;\n\n    if (correlate) {\n      r1 = _r1[i];\n      r2 = _r2[i];\n      tl = (r2 + r1) * curviness * 0.25 / (basic ? 0.5 : _r3[i] || 0.5);\n      m1 = p2 - (p2 - p1) * (basic ? curviness * 0.5 : r1 !== 0 ? tl / r1 : 0);\n      m2 = p2 + (p3 - p2) * (basic ? curviness * 0.5 : r2 !== 0 ? tl / r2 : 0);\n      mm = p2 - (m1 + ((m2 - m1) * (r1 * 3 / (r1 + r2) + 0.5) / 4 || 0));\n    } else {\n      m1 = p2 - (p2 - p1) * curviness * 0.5;\n      m2 = p2 + (p3 - p2) * curviness * 0.5;\n      mm = p2 - (m1 + m2) / 2;\n    }\n    m1 += mm;\n    m2 += mm;\n\n    seg.c = cp2 = m1;\n    if (i !== 0) {\n      seg.b = cp1;\n    } else {\n      seg.b = cp1 = seg.a + (seg.c - seg.a) * 0.6; //instead of placing b on a exactly, we move it inline with c so that if the user specifies an ease like Back.easeIn or Elastic.easeIn which goes BEYOND the beginning, it will do so smoothly.\n    }\n\n    seg.da = p2 - p1;\n    seg.ca = cp2 - p1;\n    seg.ba = cp1 - p1;\n\n    if (quad) {\n      qb = cubicToQuadratic(p1, cp1, cp2, p2);\n      a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);\n      ii += 4;\n    } else {\n      ii++;\n    }\n\n    cp1 = m2;\n  }\n  seg = a[ii];\n  seg.b = cp1;\n  seg.c = cp1 + (seg.d - cp1) * 0.4; //instead of placing c on d exactly, we move it inline with b so that if the user specifies an ease like Back.easeOut or Elastic.easeOut which goes BEYOND the end, it will do so smoothly.\n  seg.da = seg.d - seg.a;\n  seg.ca = seg.c - seg.a;\n  seg.ba = cp1 - seg.a;\n  if (quad) {\n    qb = cubicToQuadratic(seg.a, cp1, seg.c, seg.d);\n    a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);\n  }\n},\n    _parseAnchors = function _parseAnchors(values, p, correlate, prepend) {\n  var a = [],\n      l,\n      i,\n      p1,\n      p2,\n      p3,\n      tmp;\n  if (prepend) {\n    values = [prepend].concat(values);\n    i = values.length;\n    while (--i > -1) {\n      if (typeof (tmp = values[i][p]) === 'string') if (tmp.charAt(1) === '=') {\n        values[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)); //accommodate relative values. Do it inline instead of breaking it out into a function for speed reasons\n      }\n    }\n  }\n  l = values.length - 2;\n  if (l < 0) {\n    a[0] = new Segment(values[0][p], 0, 0, values[0][p]);\n    return a;\n  }\n  for (i = 0; i < l; i++) {\n    p1 = values[i][p];\n    p2 = values[i + 1][p];\n    a[i] = new Segment(p1, 0, 0, p2);\n    if (correlate) {\n      p3 = values[i + 2][p];\n      _r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);\n      _r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2);\n    }\n  }\n  a[i] = new Segment(values[i][p], 0, 0, values[i + 1][p]);\n  return a;\n},\n    bezierThrough = function bezierThrough(values, curviness, quadratic, basic, correlate, prepend) {\n  var obj = {},\n      props = [],\n      first = prepend || values[0],\n      i,\n      p,\n      a,\n      j,\n      r,\n      l,\n      seamless,\n      last;\n  correlate = typeof correlate === 'string' ? ',' + correlate + ',' : _correlate;\n  if (curviness == null) {\n    curviness = 1;\n  }\n  for (p in values[0]) {\n    props.push(p);\n  }\n  //check to see if the last and first values are identical (well, within 0.05). If so, make seamless by appending the second element to the very end of the values array and the 2nd-to-last element to the very beginning (we'll remove those segments later)\n  if (values.length > 1) {\n    last = values[values.length - 1];\n    seamless = true;\n    i = props.length;\n    while (--i > -1) {\n      p = props[i];\n      if (Math.abs(first[p] - last[p]) > 0.05) {\n        //build in a tolerance of +/-0.05 to accommodate rounding errors.\n        seamless = false;\n        break;\n      }\n    }\n    if (seamless) {\n      values = values.concat(); //duplicate the array to avoid contaminating the original which the user may be reusing for other tweens\n      if (prepend) {\n        values.unshift(prepend);\n      }\n      values.push(values[1]);\n      prepend = values[values.length - 3];\n    }\n  }\n  _r1.length = _r2.length = _r3.length = 0;\n  i = props.length;\n  while (--i > -1) {\n    p = props[i];\n    _corProps[p] = correlate.indexOf(',' + p + ',') !== -1;\n    obj[p] = _parseAnchors(values, p, _corProps[p], prepend);\n  }\n  i = _r1.length;\n  while (--i > -1) {\n    _r1[i] = Math.sqrt(_r1[i]);\n    _r2[i] = Math.sqrt(_r2[i]);\n  }\n  if (!basic) {\n    i = props.length;\n    while (--i > -1) {\n      if (_corProps[p]) {\n        a = obj[props[i]];\n        l = a.length - 1;\n        for (j = 0; j < l; j++) {\n          r = a[j + 1].da / _r2[j] + a[j].da / _r1[j] || 0;\n          _r3[j] = (_r3[j] || 0) + r * r;\n        }\n      }\n    }\n    i = _r3.length;\n    while (--i > -1) {\n      _r3[i] = Math.sqrt(_r3[i]);\n    }\n  }\n  i = props.length;\n  j = quadratic ? 4 : 1;\n  while (--i > -1) {\n    p = props[i];\n    a = obj[p];\n    _calculateControlPoints(a, curviness, quadratic, basic, _corProps[p]); //this method requires that _parseAnchors() and _setSegmentRatios() ran first so that _r1, _r2, and _r3 values are populated for all properties\n    if (seamless) {\n      a.splice(0, j);\n      a.splice(a.length - j, j);\n    }\n  }\n  return obj;\n},\n    _parseBezierData = function _parseBezierData(values, type, prepend) {\n  type = type || 'soft';\n  var obj = {},\n      inc = type === 'cubic' ? 3 : 2,\n      soft = type === 'soft',\n      props = [],\n      a,\n      b,\n      c,\n      d,\n      cur,\n      i,\n      j,\n      l,\n      p,\n      cnt,\n      tmp;\n  if (soft && prepend) {\n    values = [prepend].concat(values);\n  }\n  if (values == null || values.length < inc + 1) {\n    throw 'invalid Bezier data';\n  }\n  for (p in values[0]) {\n    props.push(p);\n  }\n  i = props.length;\n  while (--i > -1) {\n    p = props[i];\n    obj[p] = cur = [];\n    cnt = 0;\n    l = values.length;\n    for (j = 0; j < l; j++) {\n      a = prepend == null ? values[j][p] : typeof (tmp = values[j][p]) === 'string' && tmp.charAt(1) === '=' ? prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)) : Number(tmp);\n      if (soft) if (j > 1) if (j < l - 1) {\n        cur[cnt++] = (a + cur[cnt - 2]) / 2;\n      }\n      cur[cnt++] = a;\n    }\n    l = cnt - inc + 1;\n    cnt = 0;\n    for (j = 0; j < l; j += inc) {\n      a = cur[j];\n      b = cur[j + 1];\n      c = cur[j + 2];\n      d = inc === 2 ? 0 : cur[j + 3];\n      cur[cnt++] = tmp = inc === 3 ? new Segment(a, b, c, d) : new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);\n    }\n    cur.length = cnt;\n  }\n  return obj;\n},\n    _addCubicLengths = function _addCubicLengths(a, steps, resolution) {\n  var inc = 1 / resolution,\n      j = a.length,\n      d,\n      d1,\n      s,\n      da,\n      ca,\n      ba,\n      p,\n      i,\n      inv,\n      bez,\n      index;\n  while (--j > -1) {\n    bez = a[j];\n    s = bez.a;\n    da = bez.d - s;\n    ca = bez.c - s;\n    ba = bez.b - s;\n    d = d1 = 0;\n    for (i = 1; i <= resolution; i++) {\n      p = inc * i;\n      inv = 1 - p;\n      d = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);\n      index = j * resolution + i - 1;\n      steps[index] = (steps[index] || 0) + d * d;\n    }\n  }\n},\n    _parseLengthData = function _parseLengthData(obj, resolution) {\n  resolution = resolution >> 0 || 6;\n  var a = [],\n      lengths = [],\n      d = 0,\n      total = 0,\n      threshold = resolution - 1,\n      segments = [],\n      curLS = [],\n      //current length segments array\n  p,\n      i,\n      l,\n      index;\n  for (p in obj) {\n    _addCubicLengths(obj[p], a, resolution);\n  }\n  l = a.length;\n  for (i = 0; i < l; i++) {\n    d += Math.sqrt(a[i]);\n    index = i % resolution;\n    curLS[index] = d;\n    if (index === threshold) {\n      total += d;\n      index = i / resolution >> 0;\n      segments[index] = curLS;\n      lengths[index] = total;\n      d = 0;\n      curLS = [];\n    }\n  }\n  return { length: total, lengths: lengths, segments: segments };\n},\n    BezierPlugin = _TweenLite._gsScope._gsDefine.plugin({\n  propName: 'bezier',\n  priority: -1,\n  version: '1.3.8',\n  API: 2,\n  global: true,\n\n  //gets called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n  init: function init(target, vars, tween) {\n    this._target = target;\n    if (vars instanceof Array) {\n      vars = { values: vars };\n    }\n    this._func = {};\n    this._mod = {};\n    this._props = [];\n    this._timeRes = vars.timeResolution == null ? 6 : parseInt(vars.timeResolution, 10);\n    var values = vars.values || [],\n        first = {},\n        second = values[0],\n        autoRotate = vars.autoRotate || tween.vars.orientToBezier,\n        p,\n        isFunc,\n        i,\n        j,\n        prepend;\n\n    this._autoRotate = autoRotate ? autoRotate instanceof Array ? autoRotate : [['x', 'y', 'rotation', autoRotate === true ? 0 : Number(autoRotate) || 0]] : null;\n    for (p in second) {\n      this._props.push(p);\n    }\n\n    i = this._props.length;\n    while (--i > -1) {\n      p = this._props[i];\n\n      this._overwriteProps.push(p);\n      isFunc = this._func[p] = typeof target[p] === 'function';\n      first[p] = !isFunc ? parseFloat(target[p]) : target[p.indexOf('set') || typeof target['get' + p.substr(3)] !== 'function' ? p : 'get' + p.substr(3)]();\n      if (!prepend) if (first[p] !== values[0][p]) {\n        prepend = first;\n      }\n    }\n    this._beziers = vars.type !== 'cubic' && vars.type !== 'quadratic' && vars.type !== 'soft' ? bezierThrough(values, isNaN(vars.curviness) ? 1 : vars.curviness, false, vars.type === 'thruBasic', vars.correlate, prepend) : _parseBezierData(values, vars.type, first);\n    this._segCount = this._beziers[p].length;\n\n    if (this._timeRes) {\n      var ld = _parseLengthData(this._beziers, this._timeRes);\n      this._length = ld.length;\n      this._lengths = ld.lengths;\n      this._segments = ld.segments;\n      this._l1 = this._li = this._s1 = this._si = 0;\n      this._l2 = this._lengths[0];\n      this._curSeg = this._segments[0];\n      this._s2 = this._curSeg[0];\n      this._prec = 1 / this._curSeg.length;\n    }\n\n    if (autoRotate = this._autoRotate) {\n      this._initialRotations = [];\n      if (!(autoRotate[0] instanceof Array)) {\n        this._autoRotate = autoRotate = [autoRotate];\n      }\n      i = autoRotate.length;\n      while (--i > -1) {\n        for (j = 0; j < 3; j++) {\n          p = autoRotate[i][j];\n          this._func[p] = typeof target[p] === 'function' ? target[p.indexOf('set') || typeof target['get' + p.substr(3)] !== 'function' ? p : 'get' + p.substr(3)] : false;\n        }\n        p = autoRotate[i][2];\n        this._initialRotations[i] = (this._func[p] ? this._func[p].call(this._target) : this._target[p]) || 0;\n        this._overwriteProps.push(p);\n      }\n    }\n    this._startRatio = tween.vars.runBackwards ? 1 : 0; //we determine the starting ratio when the tween inits which is always 0 unless the tween has runBackwards:true (indicating it's a from() tween) in which case it's 1.\n    return true;\n  },\n\n  //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)\n  set: function set(v) {\n    var segments = this._segCount,\n        func = this._func,\n        target = this._target,\n        notStart = v !== this._startRatio,\n        curIndex,\n        inv,\n        i,\n        p,\n        b,\n        t,\n        val,\n        l,\n        lengths,\n        curSeg;\n    if (!this._timeRes) {\n      curIndex = v < 0 ? 0 : v >= 1 ? segments - 1 : segments * v >> 0;\n      t = (v - curIndex * (1 / segments)) * segments;\n    } else {\n      lengths = this._lengths;\n      curSeg = this._curSeg;\n      v *= this._length;\n      i = this._li;\n      //find the appropriate segment (if the currently cached one isn't correct)\n      if (v > this._l2 && i < segments - 1) {\n        l = segments - 1;\n        while (i < l && (this._l2 = lengths[++i]) <= v) {}\n        this._l1 = lengths[i - 1];\n        this._li = i;\n        this._curSeg = curSeg = this._segments[i];\n        this._s2 = curSeg[this._s1 = this._si = 0];\n      } else if (v < this._l1 && i > 0) {\n        while (i > 0 && (this._l1 = lengths[--i]) >= v) {}\n        if (i === 0 && v < this._l1) {\n          this._l1 = 0;\n        } else {\n          i++;\n        }\n        this._l2 = lengths[i];\n        this._li = i;\n        this._curSeg = curSeg = this._segments[i];\n        this._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;\n        this._s2 = curSeg[this._si];\n      }\n      curIndex = i;\n      //now find the appropriate sub-segment (we split it into the number of pieces that was defined by \"precision\" and measured each one)\n      v -= this._l1;\n      i = this._si;\n      if (v > this._s2 && i < curSeg.length - 1) {\n        l = curSeg.length - 1;\n        while (i < l && (this._s2 = curSeg[++i]) <= v) {}\n        this._s1 = curSeg[i - 1];\n        this._si = i;\n      } else if (v < this._s1 && i > 0) {\n        while (i > 0 && (this._s1 = curSeg[--i]) >= v) {}\n        if (i === 0 && v < this._s1) {\n          this._s1 = 0;\n        } else {\n          i++;\n        }\n        this._s2 = curSeg[i];\n        this._si = i;\n      }\n      t = (i + (v - this._s1) / (this._s2 - this._s1)) * this._prec || 0;\n    }\n    inv = 1 - t;\n\n    i = this._props.length;\n    while (--i > -1) {\n      p = this._props[i];\n      b = this._beziers[p][curIndex];\n      val = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;\n      if (this._mod[p]) {\n        val = this._mod[p](val, target);\n      }\n      if (func[p]) {\n        target[p](val);\n      } else {\n        target[p] = val;\n      }\n    }\n\n    if (this._autoRotate) {\n      var ar = this._autoRotate,\n          b2,\n          x1,\n          y1,\n          x2,\n          y2,\n          add,\n          conv;\n      i = ar.length;\n      while (--i > -1) {\n        p = ar[i][2];\n        add = ar[i][3] || 0;\n        conv = ar[i][4] === true ? 1 : _RAD2DEG;\n        b = this._beziers[ar[i][0]];\n        b2 = this._beziers[ar[i][1]];\n\n        if (b && b2) {\n          //in case one of the properties got overwritten.\n          b = b[curIndex];\n          b2 = b2[curIndex];\n\n          x1 = b.a + (b.b - b.a) * t;\n          x2 = b.b + (b.c - b.b) * t;\n          x1 += (x2 - x1) * t;\n          x2 += (b.c + (b.d - b.c) * t - x2) * t;\n\n          y1 = b2.a + (b2.b - b2.a) * t;\n          y2 = b2.b + (b2.c - b2.b) * t;\n          y1 += (y2 - y1) * t;\n          y2 += (b2.c + (b2.d - b2.c) * t - y2) * t;\n\n          val = notStart ? Math.atan2(y2 - y1, x2 - x1) * conv + add : this._initialRotations[i];\n\n          if (this._mod[p]) {\n            val = this._mod[p](val, target); //for modProps\n          }\n\n          if (func[p]) {\n            target[p](val);\n          } else {\n            target[p] = val;\n          }\n        }\n      }\n    }\n  }\n}),\n    p = BezierPlugin.prototype; /*!\r\n                                 * VERSION: 1.3.8\r\n                                 * DATE: 2018-05-30\r\n                                 * UPDATES AND DOCS AT: http://greensock.com\r\n                                 *\r\n                                 * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\r\n                                 * This work is subject to the terms at http://greensock.com/standard-license or for\r\n                                 * Club GreenSock members, the software agreement that was issued with your membership.\r\n                                 * \r\n                                 * @author: Jack Doyle, jack@greensock.com\r\n                                 **/\n\n\nBezierPlugin.bezierThrough = bezierThrough;\nBezierPlugin.cubicToQuadratic = cubicToQuadratic;\nBezierPlugin._autoCSS = true; //indicates that this plugin can be inserted into the \"css\" object using the autoCSS feature of TweenLite\nBezierPlugin.quadraticToCubic = function (a, b, c) {\n  return new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);\n};\n\nBezierPlugin._cssRegister = function () {\n  var CSSPlugin = _globals.CSSPlugin;\n  if (!CSSPlugin) {\n    return;\n  }\n  var _internals = CSSPlugin._internals,\n      _parseToProxy = _internals._parseToProxy,\n      _setPluginRatio = _internals._setPluginRatio,\n      CSSPropTween = _internals.CSSPropTween;\n  _internals._registerComplexSpecialProp('bezier', { parser: function parser(t, e, prop, cssp, pt, plugin) {\n      if (e instanceof Array) {\n        e = { values: e };\n      }\n      plugin = new BezierPlugin();\n      var values = e.values,\n          l = values.length - 1,\n          pluginValues = [],\n          v = {},\n          i,\n          p,\n          data;\n      if (l < 0) {\n        return pt;\n      }\n      for (i = 0; i <= l; i++) {\n        data = _parseToProxy(t, values[i], cssp, pt, plugin, l !== i);\n        pluginValues[i] = data.end;\n      }\n      for (p in e) {\n        v[p] = e[p]; //duplicate the vars object because we need to alter some things which would cause problems if the user plans to reuse the same vars object for another tween.\n      }\n      v.values = pluginValues;\n      pt = new CSSPropTween(t, 'bezier', 0, 0, data.pt, 2);\n      pt.data = data;\n      pt.plugin = plugin;\n      pt.setRatio = _setPluginRatio;\n      if (v.autoRotate === 0) {\n        v.autoRotate = true;\n      }\n      if (v.autoRotate && !(v.autoRotate instanceof Array)) {\n        i = v.autoRotate === true ? 0 : Number(v.autoRotate);\n        v.autoRotate = data.end.left != null ? [['left', 'top', 'rotation', i, false]] : data.end.x != null ? [['x', 'y', 'rotation', i, false]] : false;\n      }\n      if (v.autoRotate) {\n        if (!cssp._transform) {\n          cssp._enableTransforms(false);\n        }\n        data.autoRotate = cssp._target._gsTransform;\n        data.proxy.rotation = data.autoRotate.rotation || 0;\n        cssp._overwriteProps.push('rotation');\n      }\n      plugin._onInitTween(data.proxy, v, cssp._tween);\n      return pt;\n    } });\n};\n\np._mod = function (lookup) {\n  var op = this._overwriteProps,\n      i = op.length,\n      val;\n  while (--i > -1) {\n    val = lookup[op[i]];\n    if (val && typeof val === 'function') {\n      this._mod[op[i]] = val;\n    }\n  }\n};\n\np._kill = function (lookup) {\n  var a = this._props,\n      p,\n      i;\n  for (p in this._beziers) {\n    if (p in lookup) {\n      delete this._beziers[p];\n      delete this._func[p];\n      i = a.length;\n      while (--i > -1) {\n        if (a[i] === p) {\n          a.splice(i, 1);\n        }\n      }\n    }\n  }\n  a = this._autoRotate;\n  if (a) {\n    i = a.length;\n    while (--i > -1) {\n      if (lookup[a[i][2]]) {\n        a.splice(i, 1);\n      }\n    }\n  }\n  return this._super._kill.call(this, lookup);\n};\n\nexports.BezierPlugin = BezierPlugin;\nexports.default = BezierPlugin;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CSSPlugin = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /*!\r\n                                                                                                                                                                                                                                                                               * VERSION: 2.0.2\r\n                                                                                                                                                                                                                                                                               * DATE: 2018-08-27\r\n                                                                                                                                                                                                                                                                               * UPDATES AND DOCS AT: http://greensock.com\r\n                                                                                                                                                                                                                                                                               *\r\n                                                                                                                                                                                                                                                                               * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\r\n                                                                                                                                                                                                                                                                               * This work is subject to the terms at http://greensock.com/standard-license or for\r\n                                                                                                                                                                                                                                                                               * Club GreenSock members, the software agreement that was issued with your membership.\r\n                                                                                                                                                                                                                                                                               * \r\n                                                                                                                                                                                                                                                                               * @author: Jack Doyle, jack@greensock.com\r\n                                                                                                                                                                                                                                                                               */\n\n\nvar _TweenLite = __webpack_require__(1);\n\nvar _TweenLite2 = _interopRequireDefault(_TweenLite);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TweenLite._gsScope._gsDefine('plugins.CSSPlugin', ['plugins.TweenPlugin', 'TweenLite'], function () {\n\n  /** @constructor **/\n  var CSSPlugin = function CSSPlugin() {\n    _TweenLite.TweenPlugin.call(this, 'css');\n    this._overwriteProps.length = 0;\n    this.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this \"hot\" method)\n  },\n      _globals = _TweenLite._gsScope._gsDefine.globals,\n      _hasPriority,\n      //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.\n  _suffixMap,\n      //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance\n  _cs,\n      //computed style (we store this in a shared variable to conserve memory and make minification tighter\n  _overwriteProps,\n      //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.\n  _specialProps = {},\n      p = CSSPlugin.prototype = new _TweenLite.TweenPlugin('css');\n\n  p.constructor = CSSPlugin;\n  CSSPlugin.version = '2.0.2';\n  CSSPlugin.API = 2;\n  CSSPlugin.defaultTransformPerspective = 0;\n  CSSPlugin.defaultSkewType = 'compensated';\n  CSSPlugin.defaultSmoothOrigin = true;\n  p = 'px'; //we'll reuse the \"p\" variable to keep file size down\n  CSSPlugin.suffixMap = { top: p, right: p, bottom: p, left: p, width: p, height: p, fontSize: p, padding: p, margin: p, perspective: p, lineHeight: '' };\n\n  var _numExp = /(?:\\-|\\.|\\b)(\\d|\\.|e\\-)+/g,\n      _relNumExp = /(?:\\d|\\-\\d|\\.\\d|\\-\\.\\d|\\+=\\d|\\-=\\d|\\+=.\\d|\\-=\\.\\d)+/g,\n      _valuesExp = /(?:\\+=|\\-=|\\-|\\b)[\\d\\-\\.]+[a-zA-Z0-9]*(?:%|\\b)/gi,\n      //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like \"1px 5px 20px rgb(255,102,51)\"\n  _NaNExp = /(?![+-]?\\d*\\.?\\d+|[+-]|e[+-]\\d+)[^0-9]/g,\n      //also allows scientific notation and doesn't kill the leading -/+ in -= and +=\n  _suffixExp = /(?:\\d|\\-|\\+|=|#|\\.)*/g,\n      _opacityExp = /opacity *= *([^)]*)/i,\n      _opacityValExp = /opacity:([^;]*)/i,\n      _alphaFilterExp = /alpha\\(opacity *=.+?\\)/i,\n      _rgbhslExp = /^(rgb|hsl)/,\n      _capsExp = /([A-Z])/g,\n      _camelExp = /-([a-z])/gi,\n      _urlExp = /(^(?:url\\(\\\"|url\\())|(?:(\\\"\\))$|\\)$)/gi,\n      //for pulling out urls from url(...) or url(\"...\") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)\n  _camelFunc = function _camelFunc(s, g) {\n    return g.toUpperCase();\n  },\n      _horizExp = /(?:Left|Right|Width)/i,\n      _ieGetMatrixExp = /(M11|M12|M21|M22)=[\\d\\-\\.e]+/gi,\n      _ieSetMatrixExp = /progid\\:DXImageTransform\\.Microsoft\\.Matrix\\(.+?\\)/i,\n      _commasOutsideParenExp = /,(?=[^\\)]*(?:\\(|$))/gi,\n      //finds any commas that are not within parenthesis\n  _complexExp = /[\\s,\\(]/i,\n      //for testing a string to find if it has a space, comma, or open parenthesis (clues that it's a complex value)\n  _DEG2RAD = Math.PI / 180,\n      _RAD2DEG = 180 / Math.PI,\n      _forcePT = {},\n      _dummyElement = { style: {} },\n      _doc = _TweenLite._gsScope.document || { createElement: function createElement() {\n      return _dummyElement;\n    } },\n      _createElement = function _createElement(type, ns) {\n    return _doc.createElementNS ? _doc.createElementNS(ns || 'http://www.w3.org/1999/xhtml', type) : _doc.createElement(type);\n  },\n      _tempDiv = _createElement('div'),\n      _tempImg = _createElement('img'),\n      _internals = CSSPlugin._internals = { _specialProps: _specialProps },\n      //provides a hook to a few internal methods that we need to access from inside other plugins\n  _agent = (_TweenLite._gsScope.navigator || {}).userAgent || '',\n      _autoRound,\n      _reqSafariFix,\n      //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).\n\n  _isSafari,\n      _isFirefox,\n      //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.\n  _isSafariLT6,\n      //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to \"top\" and \"left\" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)\n  _ieVers,\n      _supportsOpacity = function () {\n    //we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.\n    var i = _agent.indexOf('Android'),\n        a = _createElement('a');\n    _isSafari = _agent.indexOf('Safari') !== -1 && _agent.indexOf('Chrome') === -1 && (i === -1 || parseFloat(_agent.substr(i + 8, 2)) > 3);\n    _isSafariLT6 = _isSafari && parseFloat(_agent.substr(_agent.indexOf('Version/') + 8, 2)) < 6;\n    _isFirefox = _agent.indexOf('Firefox') !== -1;\n    if (/MSIE ([0-9]{1,}[\\.0-9]{0,})/.exec(_agent) || /Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/.exec(_agent)) {\n      _ieVers = parseFloat(RegExp.$1);\n    }\n    if (!a) {\n      return false;\n    }\n    a.style.cssText = 'top:1px;opacity:.55;';\n    return (/^0.55/.test(a.style.opacity)\n    );\n  }(),\n      _getIEOpacity = function _getIEOpacity(v) {\n    return _opacityExp.test(typeof v === 'string' ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || '') ? parseFloat(RegExp.$1) / 100 : 1;\n  },\n      _log = function _log(s) {\n    //for logging messages, but in a way that won't throw errors in old versions of IE.\n    if (_TweenLite._gsScope.console) {\n      console.log(s);\n    }\n  },\n      _target,\n      //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params\n  _index,\n      //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params\n\n  _prefixCSS = '',\n      //the non-camelCase vendor prefix like \"-o-\", \"-moz-\", \"-ms-\", or \"-webkit-\"\n  _prefix = '',\n      //camelCase vendor prefix like \"O\", \"ms\", \"Webkit\", or \"Moz\".\n\n  // @private feed in a camelCase property name like \"transform\" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. \"WebkitTransform\" or \"MozTransform\" or \"transform\" or null if no such property is found, like if the browser is IE8 or before, \"transform\" won't be found at all)\n  _checkPropPrefix = function _checkPropPrefix(p, e) {\n    e = e || _tempDiv;\n    var s = e.style,\n        a,\n        i;\n    if (s[p] !== undefined) {\n      return p;\n    }\n    p = p.charAt(0).toUpperCase() + p.substr(1);\n    a = ['O', 'Moz', 'ms', 'Ms', 'Webkit'];\n    i = 5;\n    while (--i > -1 && s[a[i] + p] === undefined) {}\n    if (i >= 0) {\n      _prefix = i === 3 ? 'ms' : a[i];\n      _prefixCSS = '-' + _prefix.toLowerCase() + '-';\n      return _prefix + p;\n    }\n    return null;\n  },\n      _getComputedStyle = (typeof window !== 'undefined' ? window : _doc.defaultView || { getComputedStyle: function getComputedStyle() {} }).getComputedStyle,\n\n\n  /**\r\n  * @private Returns the css style for a particular property of an element. For example, to get whatever the current \"left\" css value for an element with an ID of \"myElement\", you could do:\r\n  * var currentLeft = CSSPlugin.getStyle( document.getElementById(\"myElement\"), \"left\");\r\n  *\r\n  * @param {!Object} t Target element whose style property you want to query\r\n  * @param {!string} p Property name (like \"left\" or \"top\" or \"marginTop\", etc.)\r\n  * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.\r\n  * @param {boolean=} calc If true, the value will not be read directly from the element's \"style\" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.\r\n  * @param {string=} dflt Default value that should be returned in the place of null, \"none\", \"auto\" or \"auto auto\".\r\n  * @return {?string} The current property value\r\n  */\n  _getStyle = CSSPlugin.getStyle = function (t, p, cs, calc, dflt) {\n    var rv;\n    if (!_supportsOpacity) if (p === 'opacity') {\n      //several versions of IE don't use the standard \"opacity\" property - they use things like filter:alpha(opacity=50), so we parse that here.\n      return _getIEOpacity(t);\n    }\n    if (!calc && t.style[p]) {\n      rv = t.style[p];\n    } else if (cs = cs || _getComputedStyle(t)) {\n      rv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, '-$1').toLowerCase());\n    } else if (t.currentStyle) {\n      rv = t.currentStyle[p];\n    }\n    return dflt != null && (!rv || rv === 'none' || rv === 'auto' || rv === 'auto auto') ? dflt : rv;\n  },\n\n\n  /**\r\n  * @private Pass the target element, the property name, the numeric value, and the suffix (like \"%\", \"em\", \"px\", etc.) and it will spit back the equivalent pixel number.\r\n  * @param {!Object} t Target element\r\n  * @param {!string} p Property name (like \"left\", \"top\", \"marginLeft\", etc.)\r\n  * @param {!number} v Value\r\n  * @param {string=} sfx Suffix (like \"px\" or \"%\" or \"em\")\r\n  * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.\r\n  * @return {number} value in pixels\r\n  */\n  _convertToPixels = _internals.convertToPixels = function (t, p, v, sfx, recurse) {\n    if (sfx === 'px' || !sfx && p !== 'lineHeight') {\n      return v;\n    }\n    if (sfx === 'auto' || !v) {\n      return 0;\n    }\n    var horiz = _horizExp.test(p),\n        node = t,\n        style = _tempDiv.style,\n        neg = v < 0,\n        precise = v === 1,\n        pix,\n        cache,\n        time;\n    if (neg) {\n      v = -v;\n    }\n    if (precise) {\n      v *= 100;\n    }\n    if (p === 'lineHeight' && !sfx) {\n      //special case of when a simple lineHeight (without a unit) is used. Set it to the value, read back the computed value, and then revert.\n      cache = _getComputedStyle(t).lineHeight;\n      t.style.lineHeight = v;\n      pix = parseFloat(_getComputedStyle(t).lineHeight);\n      t.style.lineHeight = cache;\n    } else if (sfx === '%' && p.indexOf('border') !== -1) {\n      pix = v / 100 * (horiz ? t.clientWidth : t.clientHeight);\n    } else {\n      style.cssText = 'border:0 solid red;position:' + _getStyle(t, 'position') + ';line-height:0;';\n      if (sfx === '%' || !node.appendChild || sfx.charAt(0) === 'v' || sfx === 'rem') {\n        node = t.parentNode || _doc.body;\n        if (_getStyle(node, 'display').indexOf('flex') !== -1) {\n          //Edge and IE11 have a bug that causes offsetWidth to report as 0 if the container has display:flex and the child is position:relative. Switching to position: absolute solves it.\n          style.position = 'absolute';\n        }\n        cache = node._gsCache;\n        time = _TweenLite2.default.ticker.frame;\n        if (cache && horiz && cache.time === time) {\n          //performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)\n          return cache.width * v / 100;\n        }\n        style[horiz ? 'width' : 'height'] = v + sfx;\n      } else {\n        style[horiz ? 'borderLeftWidth' : 'borderTopWidth'] = v + sfx;\n      }\n      node.appendChild(_tempDiv);\n      pix = parseFloat(_tempDiv[horiz ? 'offsetWidth' : 'offsetHeight']);\n      node.removeChild(_tempDiv);\n      if (horiz && sfx === '%' && CSSPlugin.cacheWidths !== false) {\n        cache = node._gsCache = node._gsCache || {};\n        cache.time = time;\n        cache.width = pix / v * 100;\n      }\n      if (pix === 0 && !recurse) {\n        pix = _convertToPixels(t, p, v, sfx, true);\n      }\n    }\n    if (precise) {\n      pix /= 100;\n    }\n    return neg ? -pix : pix;\n  },\n      _calculateOffset = _internals.calculateOffset = function (t, p, cs) {\n    //for figuring out \"top\" or \"left\" in px when it's \"auto\". We need to factor in margin with the offsetLeft/offsetTop\n    if (_getStyle(t, 'position', cs) !== 'absolute') {\n      return 0;\n    }\n    var dim = p === 'left' ? 'Left' : 'Top',\n        v = _getStyle(t, 'margin' + dim, cs);\n    return t['offset' + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, '')) || 0);\n  },\n\n\n  // @private returns at object containing ALL of the style properties in camelCase and their associated values.\n  _getAllStyles = function _getAllStyles(t, cs) {\n    var s = {},\n        i,\n        tr,\n        p;\n    if (cs = cs || _getComputedStyle(t, null)) {\n      if (i = cs.length) {\n        while (--i > -1) {\n          p = cs[i];\n          if (p.indexOf('-transform') === -1 || _transformPropCSS === p) {\n            //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed (\"transform\" and \"WebkitTransform\"), so we must weed out the extra one here.\n            s[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);\n          }\n        }\n      } else {\n        //some browsers behave differently - cs.length is always 0, so we must do a for...in loop.\n        for (i in cs) {\n          if (i.indexOf('Transform') === -1 || _transformProp === i) {\n            //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed (\"transform\" and \"WebkitTransform\"), so we must weed out the extra one here.\n            s[i] = cs[i];\n          }\n        }\n      }\n    } else if (cs = t.currentStyle || t.style) {\n      for (i in cs) {\n        if (typeof i === 'string' && s[i] === undefined) {\n          s[i.replace(_camelExp, _camelFunc)] = cs[i];\n        }\n      }\n    }\n    if (!_supportsOpacity) {\n      s.opacity = _getIEOpacity(t);\n    }\n    tr = _getTransform(t, cs, false);\n    s.rotation = tr.rotation;\n    s.skewX = tr.skewX;\n    s.scaleX = tr.scaleX;\n    s.scaleY = tr.scaleY;\n    s.x = tr.x;\n    s.y = tr.y;\n    if (_supports3D) {\n      s.z = tr.z;\n      s.rotationX = tr.rotationX;\n      s.rotationY = tr.rotationY;\n      s.scaleZ = tr.scaleZ;\n    }\n    if (s.filters) {\n      delete s.filters;\n    }\n    return s;\n  },\n\n\n  // @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a \"difs\" property which refers to an object containing only those isolated properties and values for tweening, and a \"firstMPT\" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.\n  _cssDif = function _cssDif(t, s1, s2, vars, forceLookup) {\n    var difs = {},\n        style = t.style,\n        val,\n        p,\n        mpt;\n    for (p in s2) {\n      if (p !== 'cssText') if (p !== 'length') if (isNaN(p)) if (s1[p] !== (val = s2[p]) || forceLookup && forceLookup[p]) if (p.indexOf('Origin') === -1) if (typeof val === 'number' || typeof val === 'string') {\n        difs[p] = val === 'auto' && (p === 'left' || p === 'top') ? _calculateOffset(t, p) : (val === '' || val === 'auto' || val === 'none') && typeof s1[p] === 'string' && s1[p].replace(_NaNExp, '') !== '' ? 0 : val; //if the ending value is defaulting (\"\" or \"auto\"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for \"\" or \"auto\" so that things actually tween.\n        if (style[p] !== undefined) {\n          //for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.\n          mpt = new MiniPropTween(style, p, style[p], mpt);\n        }\n      }\n    }\n    if (vars) {\n      for (p in vars) {\n        //copy properties (except className)\n        if (p !== 'className') {\n          difs[p] = vars[p];\n        }\n      }\n    }\n    return { difs: difs, firstMPT: mpt };\n  },\n      _dimensions = { width: ['Left', 'Right'], height: ['Top', 'Bottom'] },\n      _margins = ['marginLeft', 'marginRight', 'marginTop', 'marginBottom'],\n\n\n  /**\r\n  * @private Gets the width or height of an element\r\n  * @param {!Object} t Target element\r\n  * @param {!string} p Property name (\"width\" or \"height\")\r\n  * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.\r\n  * @return {number} Dimension (in pixels)\r\n  */\n  _getDimension = function _getDimension(t, p, cs) {\n    if ((t.nodeName + '').toLowerCase() === 'svg') {\n      //Chrome no longer supports offsetWidth/offsetHeight on SVG elements.\n      return (cs || _getComputedStyle(t))[p] || 0;\n    } else if (t.getCTM && _isSVG(t)) {\n      return t.getBBox()[p] || 0;\n    }\n    var v = parseFloat(p === 'width' ? t.offsetWidth : t.offsetHeight),\n        a = _dimensions[p],\n        i = a.length;\n    cs = cs || _getComputedStyle(t, null);\n    while (--i > -1) {\n      v -= parseFloat(_getStyle(t, 'padding' + a[i], cs, true)) || 0;\n      v -= parseFloat(_getStyle(t, 'border' + a[i] + 'Width', cs, true)) || 0;\n    }\n    return v;\n  },\n\n\n  // @private Parses position-related complex strings like \"top left\" or \"50px 10px\" or \"70% 20%\", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: \"ox\" (offsetX), \"oy\" (offsetY), \"oxp\" (if true, \"ox\" is a percentage not a pixel value), and \"oxy\" (if true, \"oy\" is a percentage not a pixel value)\n  _parsePosition = function _parsePosition(v, recObj) {\n    if (v === 'contain' || v === 'auto' || v === 'auto auto') {\n      //note: Firefox uses \"auto auto\" as default whereas Chrome uses \"auto\".\n      return v + ' ';\n    }\n    if (v == null || v === '') {\n      v = '0 0';\n    }\n    var a = v.split(' '),\n        x = v.indexOf('left') !== -1 ? '0%' : v.indexOf('right') !== -1 ? '100%' : a[0],\n        y = v.indexOf('top') !== -1 ? '0%' : v.indexOf('bottom') !== -1 ? '100%' : a[1],\n        i;\n    if (a.length > 3 && !recObj) {\n      //multiple positions\n      a = v.split(', ').join(',').split(',');\n      v = [];\n      for (i = 0; i < a.length; i++) {\n        v.push(_parsePosition(a[i]));\n      }\n      return v.join(',');\n    }\n    if (y == null) {\n      y = x === 'center' ? '50%' : '0';\n    } else if (y === 'center') {\n      y = '50%';\n    }\n    if (x === 'center' || isNaN(parseFloat(x)) && (x + '').indexOf('=') === -1) {\n      //remember, the user could flip-flop the values and say \"bottom center\" or \"center bottom\", etc. \"center\" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an \"=\" sign in the value, it's relative.\n      x = '50%';\n    }\n    v = x + ' ' + y + (a.length > 2 ? ' ' + a[2] : '');\n    if (recObj) {\n      recObj.oxp = x.indexOf('%') !== -1;\n      recObj.oyp = y.indexOf('%') !== -1;\n      recObj.oxr = x.charAt(1) === '=';\n      recObj.oyr = y.charAt(1) === '=';\n      recObj.ox = parseFloat(x.replace(_NaNExp, ''));\n      recObj.oy = parseFloat(y.replace(_NaNExp, ''));\n      recObj.v = v;\n    }\n    return recObj || v;\n  },\n\n\n  /**\r\n  * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)\r\n  * @param {(number|string)} e End value which is typically a string, but could be a number\r\n  * @param {(number|string)} b Beginning value which is typically a string but could be a number\r\n  * @return {number} Amount of change between the beginning and ending values (relative values that have a \"+=\" or \"-=\" are recognized)\r\n  */\n  _parseChange = function _parseChange(e, b) {\n    if (typeof e === 'function') {\n      e = e(_index, _target);\n    }\n    return typeof e === 'string' && e.charAt(1) === '=' ? parseInt(e.charAt(0) + '1', 10) * parseFloat(e.substr(2)) : parseFloat(e) - parseFloat(b) || 0;\n  },\n\n\n  /**\r\n  * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.\r\n  * @param {Object} v Value to be parsed\r\n  * @param {!number} d Default value (which is also used for relative calculations if \"+=\" or \"-=\" is found in the first parameter)\r\n  * @return {number} Parsed value\r\n  */\n  _parseVal = function _parseVal(v, d) {\n    if (typeof v === 'function') {\n      v = v(_index, _target);\n    }\n    var isRelative = typeof v === 'string' && v.charAt(1) === '=';\n    if (typeof v === 'string' && v.charAt(v.length - 2) === 'v') {\n      //convert vw and vh into px-equivalents.\n      v = (isRelative ? v.substr(0, 2) : 0) + window['inner' + (v.substr(-2) === 'vh' ? 'Height' : 'Width')] * (parseFloat(isRelative ? v.substr(2) : v) / 100);\n    }\n    return v == null ? d : isRelative ? parseInt(v.charAt(0) + '1', 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0;\n  },\n\n\n  /**\r\n  * @private Translates strings like \"40deg\" or \"40\" or 40rad\" or \"+=40deg\" or \"270_short\" or \"-90_cw\" or \"+=45_ccw\" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.\r\n  * @param {Object} v Value to be parsed\r\n  * @param {!number} d Default value (which is also used for relative calculations if \"+=\" or \"-=\" is found in the first parameter)\r\n  * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional (\"_short\", \"_cw\", or \"_ccw\" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be \"rotation\", \"rotationX\", or \"rotationY\"\r\n  * @param {Object=} directionalEnd An object that will store the raw end values for directional angles (\"_short\", \"_cw\", or \"_ccw\" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.\r\n  * @return {number} parsed angle in radians\r\n  */\n  _parseAngle = function _parseAngle(v, d, p, directionalEnd) {\n    var min = 0.000001,\n        cap,\n        split,\n        dif,\n        result,\n        isRelative;\n    if (typeof v === 'function') {\n      v = v(_index, _target);\n    }\n    if (v == null) {\n      result = d;\n    } else if (typeof v === 'number') {\n      result = v;\n    } else {\n      cap = 360;\n      split = v.split('_');\n      isRelative = v.charAt(1) === '=';\n      dif = (isRelative ? parseInt(v.charAt(0) + '1', 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * (v.indexOf('rad') === -1 ? 1 : _RAD2DEG) - (isRelative ? 0 : d);\n      if (split.length) {\n        if (directionalEnd) {\n          directionalEnd[p] = d + dif;\n        }\n        if (v.indexOf('short') !== -1) {\n          dif = dif % cap;\n          if (dif !== dif % (cap / 2)) {\n            dif = dif < 0 ? dif + cap : dif - cap;\n          }\n        }\n        if (v.indexOf('_cw') !== -1 && dif < 0) {\n          dif = (dif + cap * 9999999999) % cap - (dif / cap | 0) * cap;\n        } else if (v.indexOf('ccw') !== -1 && dif > 0) {\n          dif = (dif - cap * 9999999999) % cap - (dif / cap | 0) * cap;\n        }\n      }\n      result = d + dif;\n    }\n    if (result < min && result > -min) {\n      result = 0;\n    }\n    return result;\n  },\n      _colorLookup = { aqua: [0, 255, 255],\n    lime: [0, 255, 0],\n    silver: [192, 192, 192],\n    black: [0, 0, 0],\n    maroon: [128, 0, 0],\n    teal: [0, 128, 128],\n    blue: [0, 0, 255],\n    navy: [0, 0, 128],\n    white: [255, 255, 255],\n    fuchsia: [255, 0, 255],\n    olive: [128, 128, 0],\n    yellow: [255, 255, 0],\n    orange: [255, 165, 0],\n    gray: [128, 128, 128],\n    purple: [128, 0, 128],\n    green: [0, 128, 0],\n    red: [255, 0, 0],\n    pink: [255, 192, 203],\n    cyan: [0, 255, 255],\n    transparent: [255, 255, 255, 0] },\n      _hue = function _hue(h, m1, m2) {\n    h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;\n    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < 0.5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255 + 0.5 | 0;\n  },\n\n\n  /**\r\n  * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).\r\n  * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.\r\n  * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()\r\n  * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.\r\n  */\n  _parseColor = CSSPlugin.parseColor = function (v, toHSL) {\n    var a, r, g, b, h, s, l, max, min, d, wasHSL;\n    if (!v) {\n      a = _colorLookup.black;\n    } else if (typeof v === 'number') {\n      a = [v >> 16, v >> 8 & 255, v & 255];\n    } else {\n      if (v.charAt(v.length - 1) === ',') {\n        //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:\"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)\" - in this example \"blue,\" has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.\n        v = v.substr(0, v.length - 1);\n      }\n      if (_colorLookup[v]) {\n        a = _colorLookup[v];\n      } else if (v.charAt(0) === '#') {\n        if (v.length === 4) {\n          //for shorthand like #9F0\n          r = v.charAt(1);\n          g = v.charAt(2);\n          b = v.charAt(3);\n          v = '#' + r + r + g + g + b + b;\n        }\n        v = parseInt(v.substr(1), 16);\n        a = [v >> 16, v >> 8 & 255, v & 255];\n      } else if (v.substr(0, 3) === 'hsl') {\n        a = wasHSL = v.match(_numExp);\n        if (!toHSL) {\n          h = Number(a[0]) % 360 / 360;\n          s = Number(a[1]) / 100;\n          l = Number(a[2]) / 100;\n          g = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n          r = l * 2 - g;\n          if (a.length > 3) {\n            a[3] = Number(a[3]);\n          }\n          a[0] = _hue(h + 1 / 3, r, g);\n          a[1] = _hue(h, r, g);\n          a[2] = _hue(h - 1 / 3, r, g);\n        } else if (v.indexOf('=') !== -1) {\n          //if relative values are found, just return the raw strings with the relative prefixes in place.\n          return v.match(_relNumExp);\n        }\n      } else {\n        a = v.match(_numExp) || _colorLookup.transparent;\n      }\n      a[0] = Number(a[0]);\n      a[1] = Number(a[1]);\n      a[2] = Number(a[2]);\n      if (a.length > 3) {\n        a[3] = Number(a[3]);\n      }\n    }\n    if (toHSL && !wasHSL) {\n      r = a[0] / 255;\n      g = a[1] / 255;\n      b = a[2] / 255;\n      max = Math.max(r, g, b);\n      min = Math.min(r, g, b);\n      l = (max + min) / 2;\n      if (max === min) {\n        h = s = 0;\n      } else {\n        d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n        h *= 60;\n      }\n      a[0] = h + 0.5 | 0;\n      a[1] = s * 100 + 0.5 | 0;\n      a[2] = l * 100 + 0.5 | 0;\n    }\n    return a;\n  },\n      _formatColors = function _formatColors(s, toHSL) {\n    var colors = s.match(_colorExp) || [],\n        charIndex = 0,\n        parsed = '',\n        i,\n        color,\n        temp;\n    if (!colors.length) {\n      return s;\n    }\n    for (i = 0; i < colors.length; i++) {\n      color = colors[i];\n      temp = s.substr(charIndex, s.indexOf(color, charIndex) - charIndex);\n      charIndex += temp.length + color.length;\n      color = _parseColor(color, toHSL);\n      if (color.length === 3) {\n        color.push(1);\n      }\n      parsed += temp + (toHSL ? 'hsla(' + color[0] + ',' + color[1] + '%,' + color[2] + '%,' + color[3] : 'rgba(' + color.join(',')) + ')';\n    }\n    return parsed + s.substr(charIndex);\n  },\n      _colorExp = '(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3}){1,2}\\\\b'; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.\n\n  for (p in _colorLookup) {\n    _colorExp += '|' + p + '\\\\b';\n  }\n  _colorExp = new RegExp(_colorExp + ')', 'gi');\n\n  CSSPlugin.colorStringFilter = function (a) {\n    var combined = a[0] + ' ' + a[1],\n        toHSL;\n    if (_colorExp.test(combined)) {\n      toHSL = combined.indexOf('hsl(') !== -1 || combined.indexOf('hsla(') !== -1;\n      a[0] = _formatColors(a[0], toHSL);\n      a[1] = _formatColors(a[1], toHSL);\n    }\n    _colorExp.lastIndex = 0;\n  };\n\n  if (!_TweenLite2.default.defaultStringFilter) {\n    _TweenLite2.default.defaultStringFilter = CSSPlugin.colorStringFilter;\n  }\n\n  /**\r\n   * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as \"0px red\" or \"0px 0px 10px rgb(255,0,0)\" or \"0px 0px 20px 20px #F00\" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter(\"0px 0px 0px 0px #777\", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.\r\n   * @param {!string} dflt The default value and pattern to follow. So \"0px 0px 0px 0px #777\" will ensure that 4 numbers and a color will always get returned.\r\n   * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.\r\n   * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.\r\n   * @return {Function} formatter function\r\n   */\n  var _getFormatter = function _getFormatter(dflt, clr, collapsible, multi) {\n    if (dflt == null) {\n      return function (v) {\n        return v;\n      };\n    }\n    var dColor = clr ? (dflt.match(_colorExp) || [''])[0] : '',\n        dVals = dflt.split(dColor).join('').match(_valuesExp) || [],\n        pfx = dflt.substr(0, dflt.indexOf(dVals[0])),\n        sfx = dflt.charAt(dflt.length - 1) === ')' ? ')' : '',\n        delim = dflt.indexOf(' ') !== -1 ? ' ' : ',',\n        numVals = dVals.length,\n        dSfx = numVals > 0 ? dVals[0].replace(_numExp, '') : '',\n        _formatter2;\n    if (!numVals) {\n      return function (v) {\n        return v;\n      };\n    }\n    if (clr) {\n      _formatter2 = function formatter(v) {\n        var color, vals, i, a;\n        if (typeof v === 'number') {\n          v += dSfx;\n        } else if (multi && _commasOutsideParenExp.test(v)) {\n          a = v.replace(_commasOutsideParenExp, '|').split('|');\n          for (i = 0; i < a.length; i++) {\n            a[i] = _formatter2(a[i]);\n          }\n          return a.join(',');\n        }\n        color = (v.match(_colorExp) || [dColor])[0];\n        vals = v.split(color).join('').match(_valuesExp) || [];\n        i = vals.length;\n        if (numVals > i--) {\n          while (++i < numVals) {\n            vals[i] = collapsible ? vals[(i - 1) / 2 | 0] : dVals[i];\n          }\n        }\n        return pfx + vals.join(delim) + delim + color + sfx + (v.indexOf('inset') !== -1 ? ' inset' : '');\n      };\n      return _formatter2;\n    }\n    _formatter2 = function _formatter(v) {\n      var vals, a, i;\n      if (typeof v === 'number') {\n        v += dSfx;\n      } else if (multi && _commasOutsideParenExp.test(v)) {\n        a = v.replace(_commasOutsideParenExp, '|').split('|');\n        for (i = 0; i < a.length; i++) {\n          a[i] = _formatter2(a[i]);\n        }\n        return a.join(',');\n      }\n      vals = v.match(_valuesExp) || [];\n      i = vals.length;\n      if (numVals > i--) {\n        while (++i < numVals) {\n          vals[i] = collapsible ? vals[(i - 1) / 2 | 0] : dVals[i];\n        }\n      }\n      return pfx + vals.join(delim) + sfx;\n    };\n    return _formatter2;\n  },\n\n\n  /**\r\n  * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.\r\n  * @param {!string} props a comma-delimited list of property names in order from top to left, like \"marginTop,marginRight,marginBottom,marginLeft\"\r\n  * @return {Function} a formatter function\r\n  */\n  _getEdgeParser = function _getEdgeParser(props) {\n    props = props.split(',');\n    return function (t, e, p, cssp, pt, plugin, vars) {\n      var a = (e + '').split(' '),\n          i;\n      vars = {};\n      for (i = 0; i < 4; i++) {\n        vars[props[i]] = a[i] = a[i] || a[(i - 1) / 2 >> 0];\n      }\n      return cssp.parse(t, vars, pt, plugin);\n    };\n  },\n\n\n  // @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.\n  _setPluginRatio = _internals._setPluginRatio = function (v) {\n    this.plugin.setRatio(v);\n    var d = this.data,\n        proxy = d.proxy,\n        mpt = d.firstMPT,\n        min = 0.000001,\n        val,\n        pt,\n        i,\n        str,\n        p;\n    while (mpt) {\n      val = proxy[mpt.v];\n      if (mpt.r) {\n        val = mpt.r(val);\n      } else if (val < min && val > -min) {\n        val = 0;\n      }\n      mpt.t[mpt.p] = val;\n      mpt = mpt._next;\n    }\n    if (d.autoRotate) {\n      d.autoRotate.rotation = d.mod ? d.mod.call(this._tween, proxy.rotation, this.t, this._tween) : proxy.rotation; //special case for ModifyPlugin to hook into an auto-rotating bezier\n    }\n    //at the end, we must set the CSSPropTween's \"e\" (end) value dynamically here because that's what is used in the final setRatio() method. Same for \"b\" at the beginning.\n    if (v === 1 || v === 0) {\n      mpt = d.firstMPT;\n      p = v === 1 ? 'e' : 'b';\n      while (mpt) {\n        pt = mpt.t;\n        if (!pt.type) {\n          pt[p] = pt.s + pt.xs0;\n        } else if (pt.type === 1) {\n          str = pt.xs0 + pt.s + pt.xs1;\n          for (i = 1; i < pt.l; i++) {\n            str += pt['xn' + i] + pt['xs' + (i + 1)];\n          }\n          pt[p] = str;\n        }\n        mpt = mpt._next;\n      }\n    }\n  },\n\n\n  /**\r\n  * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.\r\n  * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)\r\n  * @param {!string} p property name\r\n  * @param {(number|string|object)} v value\r\n  * @param {MiniPropTween=} next next MiniPropTween in the linked list\r\n  * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer\r\n  */\n  MiniPropTween = function MiniPropTween(t, p, v, next, r) {\n    this.t = t;\n    this.p = p;\n    this.v = v;\n    this.r = r;\n    if (next) {\n      next._prev = this;\n      this._next = next;\n    }\n  },\n\n\n  /**\r\n  * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like \"10px 10px 20px 30px rgb(255,0,0)\" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like \"s\" or \"xn1\" or \"xn2\") that we're tweening and the unique property name that was used for the proxy (like \"boxShadow_xn1\" and \"boxShadow_xn2\") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.\r\n  * This method returns an object that has the following properties:\r\n  *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target\r\n  *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values\r\n  *  - firstMPT: the first MiniPropTween in the linked list\r\n  *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the \"pt\" (4th) parameter.\r\n  * @param {!Object} t target object to be tweened\r\n  * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed\r\n  * @param {!CSSPlugin} cssp The CSSPlugin instance\r\n  * @param {CSSPropTween=} pt the next CSSPropTween in the linked list\r\n  * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values\r\n  * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the \"pt\" (4th) parameter.\r\n  * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)\r\n  */\n  _parseToProxy = _internals._parseToProxy = function (t, vars, cssp, pt, plugin, shallow) {\n    var bpt = pt,\n        start = {},\n        end = {},\n        transform = cssp._transform,\n        oldForce = _forcePT,\n        i,\n        p,\n        xp,\n        mpt,\n        firstPT;\n    cssp._transform = null;\n    _forcePT = vars;\n    pt = firstPT = cssp.parse(t, vars, pt, plugin);\n    _forcePT = oldForce;\n    //break off from the linked list so the new ones are isolated.\n    if (shallow) {\n      cssp._transform = transform;\n      if (bpt) {\n        bpt._prev = null;\n        if (bpt._prev) {\n          bpt._prev._next = null;\n        }\n      }\n    }\n    while (pt && pt !== bpt) {\n      if (pt.type <= 1) {\n        p = pt.p;\n        end[p] = pt.s + pt.c;\n        start[p] = pt.s;\n        if (!shallow) {\n          mpt = new MiniPropTween(pt, 's', p, mpt, pt.r);\n          pt.c = 0;\n        }\n        if (pt.type === 1) {\n          i = pt.l;\n          while (--i > 0) {\n            xp = 'xn' + i;\n            p = pt.p + '_' + xp;\n            end[p] = pt.data[xp];\n            start[p] = pt[xp];\n            if (!shallow) {\n              mpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);\n            }\n          }\n        }\n      }\n      pt = pt._next;\n    }\n    return { proxy: start, end: end, firstMPT: mpt, pt: firstPT };\n  },\n\n\n  /**\r\n  * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of \"extra\" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where \"s\" indicates string and \"n\" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be \"5px 5px 8px rgb(102, 102, 51)\". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.\r\n  * CSSPropTweens have the following optional properties as well (not defined through the constructor):\r\n  *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.\r\n  *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)\r\n  *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.\r\n  *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.\r\n  *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.\r\n  * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.\r\n  * @param {string} p Property to tween (name). For example, to tween element.width, p would be \"width\".\r\n  * @param {number} s Starting numeric value\r\n  * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.\r\n  * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.\r\n  * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:\"1px solid red\"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.\r\n  * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a \"clip:rect(...)\" tween in which case \"p\" might be xs1 but \"n\" is still \"clip\"\r\n  * @param {boolean=} r If true, the value(s) should be rounded\r\n  * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.\r\n  * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.\r\n  * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.\r\n  */\n  CSSPropTween = _internals.CSSPropTween = function (t, p, s, c, next, type, n, r, pr, b, e) {\n    this.t = t; //target\n    this.p = p; //property\n    this.s = s; //starting value\n    this.c = c; //change value\n    this.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)\n    if (!(t instanceof CSSPropTween)) {\n      _overwriteProps.push(this.n);\n    }\n    this.r = !r ? r : typeof r === 'function' ? r : Math.round; //round (boolean)\n    this.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work\n    if (pr) {\n      this.pr = pr;\n      _hasPriority = true;\n    }\n    this.b = b === undefined ? s : b;\n    this.e = e === undefined ? s + c : e;\n    if (next) {\n      this._next = next;\n      next._prev = this;\n    }\n  },\n      _addNonTweeningNumericPT = function _addNonTweeningNumericPT(target, prop, start, end, next, overwriteProp) {\n    //cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween\n    var pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);\n    pt.b = start;\n    pt.e = pt.xs0 = end;\n    return pt;\n  },\n\n\n  /**\r\n  * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:\r\n  * sp.parseComplex(element, \"boxShadow\", \"5px 10px 20px rgb(255,102,51)\", \"0px 0px 0px red\", true, \"0px 0px 0px rgb(0,0,0,0)\", pt);\r\n  * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the \"data\" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().\r\n  * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.\r\n  *\r\n  * @param {!Object} t Target whose property will be tweened\r\n  * @param {!string} p Property that will be tweened (its name, like \"left\" or \"backgroundColor\" or \"boxShadow\")\r\n  * @param {string} b Beginning value\r\n  * @param {string} e Ending value\r\n  * @param {boolean} clrs If true, the value could contain a color value like \"rgb(255,0,0)\" or \"#F00\" or \"red\". The default is false, so no colors will be recognized (a performance optimization)\r\n  * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match\r\n  * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).\r\n  * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.\r\n  * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the \"data\" property, like {s:100, xn1:50, xn2:300}\r\n  * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.\r\n  * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.\r\n  */\n  _parseComplex = CSSPlugin.parseComplex = function (t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {\n    //DEBUG: _log(\"parseComplex: \"+p+\", b: \"+b+\", e: \"+e);\n    b = b || dflt || '';\n    if (typeof e === 'function') {\n      e = e(_index, _target);\n    }\n    pt = new CSSPropTween(t, p, 0, 0, pt, setRatio ? 2 : 1, null, false, pr, b, e);\n    e += ''; //ensures it's a string\n    if (clrs && _colorExp.test(e + b)) {\n      //if colors are found, normalize the formatting to rgba() or hsla().\n      e = [b, e];\n      CSSPlugin.colorStringFilter(e);\n      b = e[0];\n      e = e[1];\n    }\n    var ba = b.split(', ').join(',').split(' '),\n        //beginning array\n    ea = e.split(', ').join(',').split(' '),\n        //ending array\n    l = ba.length,\n        autoRound = _autoRound !== false,\n        i,\n        xi,\n        ni,\n        bv,\n        ev,\n        bnums,\n        enums,\n        bn,\n        hasAlpha,\n        temp,\n        cv,\n        str,\n        useHSL;\n    if (e.indexOf(',') !== -1 || b.indexOf(',') !== -1) {\n      if ((e + b).indexOf('rgb') !== -1 || (e + b).indexOf('hsl') !== -1) {\n        //keep rgb(), rgba(), hsl(), and hsla() values together! (remember, we're splitting on spaces)\n        ba = ba.join(' ').replace(_commasOutsideParenExp, ', ').split(' ');\n        ea = ea.join(' ').replace(_commasOutsideParenExp, ', ').split(' ');\n      } else {\n        ba = ba.join(' ').split(',').join(', ').split(' ');\n        ea = ea.join(' ').split(',').join(', ').split(' ');\n      }\n      l = ba.length;\n    }\n    if (l !== ea.length) {\n      //DEBUG: _log(\"mismatched formatting detected on \" + p + \" (\" + b + \" vs \" + e + \")\");\n      ba = (dflt || '').split(' ');\n      l = ba.length;\n    }\n    pt.plugin = plugin;\n    pt.setRatio = setRatio;\n    _colorExp.lastIndex = 0;\n    for (i = 0; i < l; i++) {\n      bv = ba[i];\n      ev = ea[i] + '';\n      bn = parseFloat(bv);\n      //if the value begins with a number (most common). It's fine if it has a suffix like px\n      if (bn || bn === 0) {\n        pt.appendXtra('', bn, _parseChange(ev, bn), ev.replace(_relNumExp, ''), autoRound && ev.indexOf('px') !== -1 ? Math.round : false, true);\n\n        //if the value is a color\n      } else if (clrs && _colorExp.test(bv)) {\n        str = ev.indexOf(')') + 1;\n        str = ')' + (str ? ev.substr(str) : ''); //if there's a comma or ) at the end, retain it.\n        useHSL = ev.indexOf('hsl') !== -1 && _supportsOpacity;\n        temp = ev; //original string value so we can look for any prefix later.\n        bv = _parseColor(bv, useHSL);\n        ev = _parseColor(ev, useHSL);\n        hasAlpha = bv.length + ev.length > 6;\n        if (hasAlpha && !_supportsOpacity && ev[3] === 0) {\n          //older versions of IE don't support rgba(), so if the destination alpha is 0, just use \"transparent\" for the end color\n          pt['xs' + pt.l] += pt.l ? ' transparent' : 'transparent';\n          pt.e = pt.e.split(ea[i]).join('transparent');\n        } else {\n          if (!_supportsOpacity) {\n            //old versions of IE don't support rgba().\n            hasAlpha = false;\n          }\n          if (useHSL) {\n            pt.appendXtra(temp.substr(0, temp.indexOf('hsl')) + (hasAlpha ? 'hsla(' : 'hsl('), bv[0], _parseChange(ev[0], bv[0]), ',', false, true).appendXtra('', bv[1], _parseChange(ev[1], bv[1]), '%,', false).appendXtra('', bv[2], _parseChange(ev[2], bv[2]), hasAlpha ? '%,' : '%' + str, false);\n          } else {\n            pt.appendXtra(temp.substr(0, temp.indexOf('rgb')) + (hasAlpha ? 'rgba(' : 'rgb('), bv[0], ev[0] - bv[0], ',', Math.round, true).appendXtra('', bv[1], ev[1] - bv[1], ',', Math.round).appendXtra('', bv[2], ev[2] - bv[2], hasAlpha ? ',' : str, Math.round);\n          }\n\n          if (hasAlpha) {\n            bv = bv.length < 4 ? 1 : bv[3];\n            pt.appendXtra('', bv, (ev.length < 4 ? 1 : ev[3]) - bv, str, false);\n          }\n        }\n        _colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.\n      } else {\n        bnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array\n\n        //if no number is found, treat it as a non-tweening value and just append the string to the current xs.\n        if (!bnums) {\n          pt['xs' + pt.l] += pt.l || pt['xs' + pt.l] ? ' ' + ev : ev;\n\n          //loop through all the numbers that are found and construct the extra values on the pt.\n        } else {\n          enums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5\n          if (!enums || enums.length !== bnums.length) {\n            //DEBUG: _log(\"mismatched formatting detected on \" + p + \" (\" + b + \" vs \" + e + \")\");\n            return pt;\n          }\n          ni = 0;\n          for (xi = 0; xi < bnums.length; xi++) {\n            cv = bnums[xi];\n            temp = bv.indexOf(cv, ni);\n            pt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), '', autoRound && bv.substr(temp + cv.length, 2) === 'px' ? Math.round : false, xi === 0);\n            ni = temp + cv.length;\n          }\n          pt['xs' + pt.l] += bv.substr(ni);\n        }\n      }\n    }\n    //if there are relative values (\"+=\" or \"-=\" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.\n    if (e.indexOf('=') !== -1) if (pt.data) {\n      str = pt.xs0 + pt.data.s;\n      for (i = 1; i < pt.l; i++) {\n        str += pt['xs' + i] + pt.data['xn' + i];\n      }\n      pt.e = str + pt['xs' + i];\n    }\n    if (!pt.l) {\n      pt.type = -1;\n      pt.xs0 = pt.e;\n    }\n    return pt.xfirst || pt;\n  },\n      i = 9;\n\n  p = CSSPropTween.prototype;\n  p.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.\n  while (--i > 0) {\n    p['xn' + i] = 0;\n    p['xs' + i] = '';\n  }\n  p.xs0 = '';\n  p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;\n\n  /**\r\n   * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like \"rect(10px, 5px, 0px, 20px)\", the values would be stored like this:\r\n   * xs0:\"rect(\", s:10, xs1:\"px, \", xn1:5, xs2:\"px, \", xn2:0, xs3:\"px, \", xn3:20, xn4:\"px)\"\r\n   * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).\r\n   * @param {string=} pfx Prefix (if any)\r\n   * @param {!number} s Starting value\r\n   * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.\r\n   * @param {string=} sfx Suffix (if any)\r\n   * @param {boolean=} r Round (if true).\r\n   * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.\r\n   * @return {CSSPropTween} returns itself so that multiple methods can be chained together.\r\n   */\n  p.appendXtra = function (pfx, s, c, sfx, r, pad) {\n    var pt = this,\n        l = pt.l;\n    pt['xs' + l] += pad && (l || pt['xs' + l]) ? ' ' + pfx : pfx || '';\n    if (!c) if (l !== 0 && !pt.plugin) {\n      //typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!\n      pt['xs' + l] += s + (sfx || '');\n      return pt;\n    }\n    pt.l++;\n    pt.type = pt.setRatio ? 2 : 1;\n    pt['xs' + pt.l] = sfx || '';\n    if (l > 0) {\n      pt.data['xn' + l] = s + c;\n      pt.rxp['xn' + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)\n      pt['xn' + l] = s;\n      if (!pt.plugin) {\n        pt.xfirst = new CSSPropTween(pt, 'xn' + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);\n        pt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is \"\" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.\n      }\n      return pt;\n    }\n    pt.data = { s: s + c };\n    pt.rxp = {};\n    pt.s = s;\n    pt.c = c;\n    pt.r = r;\n    return pt;\n  };\n\n  /**\r\n   * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:\"5px 10px 15px rgb(255, 102, 51)\" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like \"boxShadow\" or \"throwProps\" or \"bezier\" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.\r\n   * @param {!string} p Property name (like \"boxShadow\" or \"throwProps\")\r\n   * @param {Object=} options An object containing any of the following configuration options:\r\n   *                      - defaultValue: the default value\r\n   *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)\r\n   *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take \"5px 5px red\" and format it to \"5px 5px 0px 0px red\" so that both the beginning and ending values have a common order and quantity of values.)\r\n   *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)\r\n   *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.\r\n   *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.\r\n   *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.\r\n   *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like \"5px\" would apply to all, \"5px, 10px\" would use 5px for top/bottom and 10px for right/left, etc.\r\n   *                      - keyword: a special keyword that can [optionally] be found inside the value (like \"inset\" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).\r\n   */\n  var SpecialProp = function SpecialProp(p, options) {\n    options = options || {};\n    this.p = options.prefix ? _checkPropPrefix(p) || p : p;\n    _specialProps[p] = _specialProps[this.p] = this;\n    this.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);\n    if (options.parser) {\n      this.parse = options.parser;\n    }\n    this.clrs = options.color;\n    this.multi = options.multi;\n    this.keyword = options.keyword;\n    this.dflt = options.defaultValue;\n    this.pr = options.priority || 0;\n  },\n\n\n  //shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.\n  _registerComplexSpecialProp = _internals._registerComplexSpecialProp = function (p, options, defaults) {\n    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') {\n      options = { parser: defaults }; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin\n    }\n    var a = p.split(','),\n        d = options.defaultValue,\n        i,\n        temp;\n    defaults = defaults || [d];\n    for (i = 0; i < a.length; i++) {\n      options.prefix = i === 0 && options.prefix;\n      options.defaultValue = defaults[i] || d;\n      temp = new SpecialProp(a[i], options);\n    }\n  },\n\n\n  //creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.\n  _registerPluginProp = _internals._registerPluginProp = function (p) {\n    if (!_specialProps[p]) {\n      var pluginName = p.charAt(0).toUpperCase() + p.substr(1) + 'Plugin';\n      _registerComplexSpecialProp(p, { parser: function parser(t, e, p, cssp, pt, plugin, vars) {\n          var pluginClass = _globals.com.greensock.plugins[pluginName];\n          if (!pluginClass) {\n            _log('Error: ' + pluginName + ' js file not loaded.');\n            return pt;\n          }\n          pluginClass._cssRegister();\n          return _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);\n        } });\n    }\n  };\n\n  p = SpecialProp.prototype;\n\n  /**\r\n   * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like \"inset\" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)\r\n   * @param {!Object} t target element\r\n   * @param {(string|number|object)} b beginning value\r\n   * @param {(string|number|object)} e ending (destination) value\r\n   * @param {CSSPropTween=} pt next CSSPropTween in the linked list\r\n   * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.\r\n   * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.\r\n   * @return {CSSPropTween=} First CSSPropTween in the linked list\r\n   */\n  p.parseComplex = function (t, b, e, pt, plugin, setRatio) {\n    var kwd = this.keyword,\n        i,\n        ba,\n        ea,\n        l,\n        bi,\n        ei;\n    //if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like \"inset\" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)\n    if (this.multi) if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {\n      ba = b.replace(_commasOutsideParenExp, '|').split('|');\n      ea = e.replace(_commasOutsideParenExp, '|').split('|');\n    } else if (kwd) {\n      ba = [b];\n      ea = [e];\n    }\n    if (ea) {\n      l = ea.length > ba.length ? ea.length : ba.length;\n      for (i = 0; i < l; i++) {\n        b = ba[i] = ba[i] || this.dflt;\n        e = ea[i] = ea[i] || this.dflt;\n        if (kwd) {\n          bi = b.indexOf(kwd);\n          ei = e.indexOf(kwd);\n          if (bi !== ei) {\n            if (ei === -1) {\n              //if the keyword isn't in the end value, remove it from the beginning one.\n              ba[i] = ba[i].split(kwd).join('');\n            } else if (bi === -1) {\n              //if the keyword isn't in the beginning, add it.\n              ba[i] += ' ' + kwd;\n            }\n          }\n        }\n      }\n      b = ba.join(', ');\n      e = ea.join(', ');\n    }\n    return _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);\n  };\n\n  /**\r\n   * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:\r\n   * this._firstPT = sp.parse(element, \"5px 10px 20px rgb(2550,102,51)\", \"boxShadow\", this);\r\n   * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).\r\n   * @param {!Object} t Target object whose property is being tweened\r\n   * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).\r\n   * @param {!string} p Property name\r\n   * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.\r\n   * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)\r\n   * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.\r\n   * @param {Object=} vars Original vars object that contains the data for parsing.\r\n   * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.\r\n   */\n  p.parse = function (t, e, p, cssp, pt, plugin, vars) {\n    return this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);\n  };\n\n  /**\r\n   * Registers a special property that should be intercepted from any \"css\" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:\r\n   *  1) Target object whose property should be tweened (typically a DOM element)\r\n   *  2) The end/destination value (could be a string, number, object, or whatever you want)\r\n   *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)\r\n   *\r\n   * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric \"ratio\" parameter to your function that indicates the change factor (usually between 0 and 1). For example:\r\n   *\r\n   * CSSPlugin.registerSpecialProp(\"myCustomProp\", function(target, value, tween) {\r\n   *      var start = target.style.width;\r\n   *      return function(ratio) {\r\n   *              target.style.width = (start + value * ratio) + \"px\";\r\n   *              console.log(\"set width to \" + target.style.width);\r\n   *          }\r\n   * }, 0);\r\n   *\r\n   * Then, when I do this tween, it will trigger my special property:\r\n   *\r\n   * TweenLite.to(element, 1, {css:{myCustomProp:100}});\r\n   *\r\n   * In the example, of course, we're just changing the width, but you can do anything you want.\r\n   *\r\n   * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define \"myCustomProp\", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})\r\n   * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a \"change factor\" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.\r\n   * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.\r\n   */\n  CSSPlugin.registerSpecialProp = function (name, onInitTween, priority) {\n    _registerComplexSpecialProp(name, { parser: function parser(t, e, p, cssp, pt, plugin, vars) {\n        var rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);\n        rv.plugin = plugin;\n        rv.setRatio = onInitTween(t, e, cssp._tween, p);\n        return rv;\n      }, priority: priority });\n  };\n\n  //transform-related methods and properties\n  CSSPlugin.useSVGTransformAttr = true; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the \"transform\" attribute instead (users can override this).\n  var _transformProps = 'scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent'.split(','),\n      _transformProp = _checkPropPrefix('transform'),\n      //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.\n  _transformPropCSS = _prefixCSS + 'transform',\n      _transformOriginProp = _checkPropPrefix('transformOrigin'),\n      _supports3D = _checkPropPrefix('perspective') !== null,\n      Transform = _internals.Transform = function () {\n    this.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;\n    this.force3D = CSSPlugin.defaultForce3D === false || !_supports3D ? false : CSSPlugin.defaultForce3D || 'auto';\n  },\n      _SVGElement = _TweenLite._gsScope.SVGElement,\n      _useSVGTransformAttr,\n\n  //Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.\n\n  _createSVG = function _createSVG(type, container, attributes) {\n    var element = _doc.createElementNS('http://www.w3.org/2000/svg', type),\n        reg = /([a-z])([A-Z])/g,\n        p;\n    for (p in attributes) {\n      element.setAttributeNS(null, p.replace(reg, '$1-$2').toLowerCase(), attributes[p]);\n    }\n    container.appendChild(element);\n    return element;\n  },\n      _docElement = _doc.documentElement || {},\n      _forceSVGTransformAttr = function () {\n    //IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the \"transform\" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element\n    var force = _ieVers || /Android/i.test(_agent) && !_TweenLite._gsScope.chrome,\n        svg,\n        rect,\n        width;\n    if (_doc.createElementNS && !force) {\n      //IE8 and earlier doesn't support SVG anyway\n      svg = _createSVG('svg', _docElement);\n      rect = _createSVG('rect', svg, { width: 100, height: 50, x: 100 });\n      width = rect.getBoundingClientRect().width;\n      rect.style[_transformOriginProp] = '50% 50%';\n      rect.style[_transformProp] = 'scaleX(0.5)';\n      force = width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).\n      _docElement.removeChild(svg);\n    }\n    return force;\n  }(),\n      _parseSVGOrigin = function _parseSVGOrigin(e, local, decoratee, absolute, smoothOrigin, skipRecord) {\n    var tm = e._gsTransform,\n        m = _getMatrix(e, true),\n        v,\n        x,\n        y,\n        xOrigin,\n        yOrigin,\n        a,\n        b,\n        c,\n        d,\n        tx,\n        ty,\n        determinant,\n        xOriginOld,\n        yOriginOld;\n    if (tm) {\n      xOriginOld = tm.xOrigin; //record the original values before we alter them.\n      yOriginOld = tm.yOrigin;\n    }\n    if (!absolute || (v = absolute.split(' ')).length < 2) {\n      b = e.getBBox();\n      if (b.x === 0 && b.y === 0 && b.width + b.height === 0) {\n        //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.\n        b = { x: parseFloat(e.hasAttribute('x') ? e.getAttribute('x') : e.hasAttribute('cx') ? e.getAttribute('cx') : 0) || 0, y: parseFloat(e.hasAttribute('y') ? e.getAttribute('y') : e.hasAttribute('cy') ? e.getAttribute('cy') : 0) || 0, width: 0, height: 0 };\n      }\n      local = _parsePosition(local).split(' ');\n      v = [(local[0].indexOf('%') !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x, (local[1].indexOf('%') !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y];\n    }\n    decoratee.xOrigin = xOrigin = parseFloat(v[0]);\n    decoratee.yOrigin = yOrigin = parseFloat(v[1]);\n    if (absolute && m !== _identity2DMatrix) {\n      //if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.\n      a = m[0];\n      b = m[1];\n      c = m[2];\n      d = m[3];\n      tx = m[4];\n      ty = m[5];\n      determinant = a * d - b * c;\n      if (determinant) {\n        //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.\n        x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n        y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n        xOrigin = decoratee.xOrigin = v[0] = x;\n        yOrigin = decoratee.yOrigin = v[1] = y;\n      }\n    }\n    if (tm) {\n      //avoid jump when transformOrigin is changed - adjust the x/y values accordingly\n      if (skipRecord) {\n        decoratee.xOffset = tm.xOffset;\n        decoratee.yOffset = tm.yOffset;\n        tm = decoratee;\n      }\n      if (smoothOrigin || smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false) {\n        x = xOrigin - xOriginOld;\n        y = yOrigin - yOriginOld;\n        //originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.\n        //tm.x -= x - (x * m[0] + y * m[2]);\n        //tm.y -= y - (x * m[1] + y * m[3]);\n        tm.xOffset += x * m[0] + y * m[2] - x;\n        tm.yOffset += x * m[1] + y * m[3] - y;\n      } else {\n        tm.xOffset = tm.yOffset = 0;\n      }\n    }\n    if (!skipRecord) {\n      e.setAttribute('data-svg-origin', v.join(' '));\n    }\n  },\n      _getBBoxHack = function _getBBoxHack(swapIfPossible) {\n    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).\n    var svg = _createElement('svg', this.ownerSVGElement && this.ownerSVGElement.getAttribute('xmlns') || 'http://www.w3.org/2000/svg'),\n        oldParent = this.parentNode,\n        oldSibling = this.nextSibling,\n        oldCSS = this.style.cssText,\n        bbox;\n    _docElement.appendChild(svg);\n    svg.appendChild(this);\n    this.style.display = 'block';\n    if (swapIfPossible) {\n      try {\n        bbox = this.getBBox();\n        this._originalGetBBox = this.getBBox;\n        this.getBBox = _getBBoxHack;\n      } catch (e) {}\n    } else if (this._originalGetBBox) {\n      bbox = this._originalGetBBox();\n    }\n    if (oldSibling) {\n      oldParent.insertBefore(this, oldSibling);\n    } else {\n      oldParent.appendChild(this);\n    }\n    _docElement.removeChild(svg);\n    this.style.cssText = oldCSS;\n    return bbox;\n  },\n      _getBBox = function _getBBox(e) {\n    try {\n      return e.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118\n    } catch (error) {\n      return _getBBoxHack.call(e, true);\n    }\n  },\n      _isSVG = function _isSVG(e) {\n    //reports if the element is an SVG on which getBBox() actually works\n    return !!(_SVGElement && e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n  },\n      _identity2DMatrix = [1, 0, 0, 1, 0, 0],\n      _getMatrix = function _getMatrix(e, force2D) {\n    var tm = e._gsTransform || new Transform(),\n        rnd = 100000,\n        style = e.style,\n        isDefault,\n        s,\n        m,\n        n,\n        dec,\n        none;\n    if (_transformProp) {\n      s = _getStyle(e, _transformPropCSS, null, true);\n    } else if (e.currentStyle) {\n      //for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.\n      s = e.currentStyle.filter.match(_ieGetMatrixExp);\n      s = s && s.length === 4 ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), tm.x || 0, tm.y || 0].join(',') : '';\n    }\n    isDefault = !s || s === 'none' || s === 'matrix(1, 0, 0, 1, 0, 0)';\n    if (_transformProp && ((none = !_getComputedStyle(e) || _getComputedStyle(e).display === 'none') || !e.parentNode)) {\n      //note: Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (none) {\n        //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not \"none\". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).\n        n = style.display;\n        style.display = 'block';\n      }\n      if (!e.parentNode) {\n        dec = 1; //flag\n        _docElement.appendChild(e);\n      }\n      s = _getStyle(e, _transformPropCSS, null, true);\n      isDefault = !s || s === 'none' || s === 'matrix(1, 0, 0, 1, 0, 0)';\n      if (n) {\n        style.display = n;\n      } else if (none) {\n        _removeProp(style, 'display');\n      }\n      if (dec) {\n        _docElement.removeChild(e);\n      }\n    }\n    if (tm.svg || e.getCTM && _isSVG(e)) {\n      if (isDefault && (style[_transformProp] + '').indexOf('matrix') !== -1) {\n        //some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values\n        s = style[_transformProp];\n        isDefault = 0;\n      }\n      m = e.getAttribute('transform');\n      if (isDefault && m) {\n        m = e.transform.baseVal.consolidate().matrix; //ensures that even complex values like \"translate(50,60) rotate(135,0,0)\" are parsed because it mashes it into a matrix.\n        s = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';\n        isDefault = 0;\n      }\n    }\n    if (isDefault) {\n      return _identity2DMatrix;\n    }\n    //split the matrix values out into an array (m for matrix)\n    m = (s || '').match(_numExp) || [];\n    i = m.length;\n    while (--i > -1) {\n      n = Number(m[i]);\n      m[i] = (dec = n - (n |= 0)) ? (dec * rnd + (dec < 0 ? -0.5 : 0.5) | 0) / rnd + n : n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).\n    }\n    return force2D && m.length > 6 ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;\n  },\n\n\n  /**\r\n  * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.\r\n  * @param {!Object} t target element\r\n  * @param {Object=} cs computed style object (optional)\r\n  * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}\r\n  * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)\r\n  * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}\r\n  */\n  _getTransform = _internals.getTransform = function (t, cs, rec, parse) {\n    if (t._gsTransform && rec && !parse) {\n      return t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.\n    }\n    var tm = rec ? t._gsTransform || new Transform() : new Transform(),\n        invX = tm.scaleX < 0,\n        //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.\n    min = 0.00002,\n        rnd = 100000,\n        zOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, '0 0 0').split(' ')[2]) || tm.zOrigin || 0 : 0,\n        defaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0,\n        m,\n        i,\n        scaleX,\n        scaleY,\n        rotation,\n        skewX;\n\n    tm.svg = !!(t.getCTM && _isSVG(t));\n    if (tm.svg) {\n      _parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, '50% 50%') + '', tm, t.getAttribute('data-svg-origin'));\n      _useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;\n    }\n    m = _getMatrix(t);\n    if (m !== _identity2DMatrix) {\n\n      if (m.length === 16) {\n        //we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)\n        var a11 = m[0],\n            a21 = m[1],\n            a31 = m[2],\n            a41 = m[3],\n            a12 = m[4],\n            a22 = m[5],\n            a32 = m[6],\n            a42 = m[7],\n            a13 = m[8],\n            a23 = m[9],\n            a33 = m[10],\n            a14 = m[12],\n            a24 = m[13],\n            a34 = m[14],\n            a43 = m[11],\n            angle = Math.atan2(a32, a33),\n            t1,\n            t2,\n            t3,\n            t4,\n            cos,\n            sin;\n        //we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari\n        if (tm.zOrigin) {\n          a34 = -tm.zOrigin;\n          a14 = a13 * a34 - m[12];\n          a24 = a23 * a34 - m[13];\n          a34 = a33 * a34 + tm.zOrigin - m[14];\n        }\n        //note for possible future consolidation: rotationX: Math.atan2(a32, a33), rotationY: Math.atan2(-a31, Math.sqrt(a33 * a33 + a32 * a32)), rotation: Math.atan2(a21, a11), skew: Math.atan2(a12, a22). However, it doesn't seem to be quite as reliable as the full-on backwards rotation procedure.\n        tm.rotationX = angle * _RAD2DEG;\n        //rotationX\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a12 * cos + a13 * sin;\n          t2 = a22 * cos + a23 * sin;\n          t3 = a32 * cos + a33 * sin;\n          a13 = a12 * -sin + a13 * cos;\n          a23 = a22 * -sin + a23 * cos;\n          a33 = a32 * -sin + a33 * cos;\n          a43 = a42 * -sin + a43 * cos;\n          a12 = t1;\n          a22 = t2;\n          a32 = t3;\n        }\n        //rotationY\n        angle = Math.atan2(-a31, a33);\n        tm.rotationY = angle * _RAD2DEG;\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a11 * cos - a13 * sin;\n          t2 = a21 * cos - a23 * sin;\n          t3 = a31 * cos - a33 * sin;\n          a23 = a21 * sin + a23 * cos;\n          a33 = a31 * sin + a33 * cos;\n          a43 = a41 * sin + a43 * cos;\n          a11 = t1;\n          a21 = t2;\n          a31 = t3;\n        }\n        //rotationZ\n        angle = Math.atan2(a21, a11);\n        tm.rotation = angle * _RAD2DEG;\n        if (angle) {\n          cos = Math.cos(angle);\n          sin = Math.sin(angle);\n          t1 = a11 * cos + a21 * sin;\n          t2 = a12 * cos + a22 * sin;\n          t3 = a13 * cos + a23 * sin;\n          a21 = a21 * cos - a11 * sin;\n          a22 = a22 * cos - a12 * sin;\n          a23 = a23 * cos - a13 * sin;\n          a11 = t1;\n          a12 = t2;\n          a13 = t3;\n        }\n\n        if (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) {\n          //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.\n          tm.rotationX = tm.rotation = 0;\n          tm.rotationY = 180 - tm.rotationY;\n        }\n\n        //skewX\n        angle = Math.atan2(a12, a22);\n\n        //scales\n        tm.scaleX = (Math.sqrt(a11 * a11 + a21 * a21 + a31 * a31) * rnd + 0.5 | 0) / rnd;\n        tm.scaleY = (Math.sqrt(a22 * a22 + a32 * a32) * rnd + 0.5 | 0) / rnd;\n        tm.scaleZ = (Math.sqrt(a13 * a13 + a23 * a23 + a33 * a33) * rnd + 0.5 | 0) / rnd;\n        a11 /= tm.scaleX;\n        a12 /= tm.scaleY;\n        a21 /= tm.scaleX;\n        a22 /= tm.scaleY;\n        if (Math.abs(angle) > min) {\n          tm.skewX = angle * _RAD2DEG;\n          a12 = 0; //unskews\n          if (tm.skewType !== 'simple') {\n            tm.scaleY *= 1 / Math.cos(angle); //by default, we compensate the scale based on the skew so that the element maintains a similar proportion when skewed, so we have to alter the scaleY here accordingly to match the default (non-adjusted) skewing that CSS does (stretching more and more as it skews).\n          }\n        } else {\n          tm.skewX = 0;\n        }\n\n        /* //for testing purposes\r\n        var transform = \"matrix3d(\",\r\n        comma = \",\",\r\n        zero = \"0\";\r\n        a13 /= tm.scaleZ;\r\n        a23 /= tm.scaleZ;\r\n        a31 /= tm.scaleX;\r\n        a32 /= tm.scaleY;\r\n        a33 /= tm.scaleZ;\r\n        transform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);\r\n        transform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);\r\n        transform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);\r\n        transform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;\r\n        transform += a14 + comma + a24 + comma + a34 + comma + (tm.perspective ? (1 + (-a34 / tm.perspective)) : 1) + \")\";\r\n        console.log(transform);\r\n        document.querySelector(\".test\").style[_transformProp] = transform;\r\n        */\n\n        tm.perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n        tm.x = a14;\n        tm.y = a24;\n        tm.z = a34;\n        if (tm.svg) {\n          tm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);\n          tm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);\n        }\n      } else if (!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || !tm.rotationX && !tm.rotationY) {\n        //sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's \"display\" is \"none\", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.\n        var k = m.length >= 6,\n            a = k ? m[0] : 1,\n            b = m[1] || 0,\n            c = m[2] || 0,\n            d = k ? m[3] : 1;\n        tm.x = m[4] || 0;\n        tm.y = m[5] || 0;\n        scaleX = Math.sqrt(a * a + b * b);\n        scaleY = Math.sqrt(d * d + c * c);\n        rotation = a || b ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).\n        skewX = c || d ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;\n        tm.scaleX = scaleX;\n        tm.scaleY = scaleY;\n        tm.rotation = rotation;\n        tm.skewX = skewX;\n        if (_supports3D) {\n          tm.rotationX = tm.rotationY = tm.z = 0;\n          tm.perspective = defaultTransformPerspective;\n          tm.scaleZ = 1;\n        }\n        if (tm.svg) {\n          tm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);\n          tm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);\n        }\n      }\n      if (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {\n        if (invX) {\n          tm.scaleX *= -1;\n          tm.skewX += tm.rotation <= 0 ? 180 : -180;\n          tm.rotation += tm.rotation <= 0 ? 180 : -180;\n        } else {\n          tm.scaleY *= -1;\n          tm.skewX += tm.skewX <= 0 ? 180 : -180;\n        }\n      }\n      tm.zOrigin = zOrigin;\n      //some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the \"e-\" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.\n      for (i in tm) {\n        if (tm[i] < min) if (tm[i] > -min) {\n          tm[i] = 0;\n        }\n      }\n    }\n    //DEBUG: _log(\"parsed rotation of \" + t.getAttribute(\"id\")+\": \"+(tm.rotationX)+\", \"+(tm.rotationY)+\", \"+(tm.rotation)+\", scale: \"+tm.scaleX+\", \"+tm.scaleY+\", \"+tm.scaleZ+\", position: \"+tm.x+\", \"+tm.y+\", \"+tm.z+\", perspective: \"+tm.perspective+ \", origin: \"+ tm.xOrigin+ \",\"+ tm.yOrigin);\n    if (rec) {\n      t._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)\n      if (tm.svg) {\n        //if we're supposed to apply transforms to the SVG element's \"transform\" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.\n        if (_useSVGTransformAttr && t.style[_transformProp]) {\n          _TweenLite2.default.delayedCall(0.001, function () {\n            //if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).\n            _removeProp(t.style, _transformProp);\n          });\n        } else if (!_useSVGTransformAttr && t.getAttribute('transform')) {\n          _TweenLite2.default.delayedCall(0.001, function () {\n            t.removeAttribute('transform');\n          });\n        }\n      }\n    }\n    return tm;\n  },\n\n\n  //for setting 2D transforms in IE6, IE7, and IE8 (must use a \"filter\" to emulate the behavior of modern day browser transforms)\n  _setIETransformRatio = function _setIETransformRatio(v) {\n    var t = this.data,\n        //refers to the element's _gsTransform object\n    ang = -t.rotation * _DEG2RAD,\n        skew = ang + t.skewX * _DEG2RAD,\n        rnd = 100000,\n        a = (Math.cos(ang) * t.scaleX * rnd | 0) / rnd,\n        b = (Math.sin(ang) * t.scaleX * rnd | 0) / rnd,\n        c = (Math.sin(skew) * -t.scaleY * rnd | 0) / rnd,\n        d = (Math.cos(skew) * t.scaleY * rnd | 0) / rnd,\n        style = this.t.style,\n        cs = this.t.currentStyle,\n        filters,\n        val;\n    if (!cs) {\n      return;\n    }\n    val = b; //just for swapping the variables an inverting them (reused \"val\" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)\n    b = -c;\n    c = -val;\n    filters = cs.filter;\n    style.filter = ''; //remove filters so that we can accurately measure offsetWidth/offsetHeight\n    var w = this.t.offsetWidth,\n        h = this.t.offsetHeight,\n        clip = cs.position !== 'absolute',\n        m = 'progid:DXImageTransform.Microsoft.Matrix(M11=' + a + ', M12=' + b + ', M21=' + c + ', M22=' + d,\n        ox = t.x + w * t.xPercent / 100,\n        oy = t.y + h * t.yPercent / 100,\n        dx,\n        dy;\n\n    //if transformOrigin is being used, adjust the offset x and y\n    if (t.ox != null) {\n      dx = (t.oxp ? w * t.ox * 0.01 : t.ox) - w / 2;\n      dy = (t.oyp ? h * t.oy * 0.01 : t.oy) - h / 2;\n      ox += dx - (dx * a + dy * b);\n      oy += dy - (dx * c + dy * d);\n    }\n\n    if (!clip) {\n      m += \", sizingMethod='auto expand')\";\n    } else {\n      dx = w / 2;\n      dy = h / 2;\n      //translate to ensure that transformations occur around the correct origin (default is center).\n      m += ', Dx=' + (dx - (dx * a + dy * b) + ox) + ', Dy=' + (dy - (dx * c + dy * d) + oy) + ')';\n    }\n    if (filters.indexOf('DXImageTransform.Microsoft.Matrix(') !== -1) {\n      style.filter = filters.replace(_ieSetMatrixExp, m);\n    } else {\n      style.filter = m + ' ' + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.\n    }\n\n    //at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.\n    if (v === 0 || v === 1) if (a === 1) if (b === 0) if (c === 0) if (d === 1) if (!clip || m.indexOf('Dx=0, Dy=0') !== -1) if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100) if (filters.indexOf('gradient(' && filters.indexOf('Alpha')) === -1) {\n      style.removeAttribute('filter');\n    }\n\n    //we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).\n    if (!clip) {\n      var mult = _ieVers < 8 ? 1 : -1,\n          //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom\n      marg,\n          prop,\n          dif;\n      dx = t.ieOffsetX || 0;\n      dy = t.ieOffsetY || 0;\n      t.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);\n      t.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);\n      for (i = 0; i < 4; i++) {\n        prop = _margins[i];\n        marg = cs[prop];\n        //we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)\n        val = marg.indexOf('px') !== -1 ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, '')) || 0;\n        if (val !== t[prop]) {\n          dif = i < 2 ? -t.ieOffsetX : -t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.\n        } else {\n          dif = i < 2 ? dx - t.ieOffsetX : dy - t.ieOffsetY;\n        }\n        style[prop] = (t[prop] = Math.round(val - dif * (i === 0 || i === 2 ? 1 : mult))) + 'px';\n      }\n    }\n  },\n\n\n  /* translates a super small decimal to a string WITHOUT scientific notation\r\n  _safeDecimal = function(n) {\r\n  var s = (n < 0 ? -n : n) + \"\",\r\n  \ta = s.split(\"e-\");\r\n  return (n < 0 ? \"-0.\" : \"0.\") + new Array(parseInt(a[1], 10) || 0).join(\"0\") + a[0].split(\".\").join(\"\");\r\n  },\r\n  */\n\n  _setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function (v) {\n    var t = this.data,\n        //refers to the element's _gsTransform object\n    style = this.t.style,\n        angle = t.rotation,\n        rotationX = t.rotationX,\n        rotationY = t.rotationY,\n        sx = t.scaleX,\n        sy = t.scaleY,\n        sz = t.scaleZ,\n        x = t.x,\n        y = t.y,\n        z = t.z,\n        isSVG = t.svg,\n        perspective = t.perspective,\n        force3D = t.force3D,\n        skewY = t.skewY,\n        skewX = t.skewX,\n        t1,\n        a11,\n        a12,\n        a13,\n        a21,\n        a22,\n        a23,\n        a31,\n        a32,\n        a33,\n        a41,\n        a42,\n        a43,\n        zOrigin,\n        min,\n        cos,\n        sin,\n        t2,\n        transform,\n        comma,\n        zero,\n        skew,\n        rnd;\n    if (skewY) {\n      //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.\n      skewX += skewY;\n      angle += skewY;\n    }\n\n    //check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)\n    if (((v === 1 || v === 0) && force3D === 'auto' && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime) || !force3D) && !z && !perspective && !rotationY && !rotationX && sz === 1 || _useSVGTransformAttr && isSVG || !_supports3D) {\n      //on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.\n\n      //2D\n      if (angle || skewX || isSVG) {\n        angle *= _DEG2RAD;\n        skew = skewX * _DEG2RAD;\n        rnd = 100000;\n        a11 = Math.cos(angle) * sx;\n        a21 = Math.sin(angle) * sx;\n        a12 = Math.sin(angle - skew) * -sy;\n        a22 = Math.cos(angle - skew) * sy;\n        if (skew && t.skewType === 'simple') {\n          //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to \"simple\" to use the uncompensated skewing that CSS does\n          t1 = Math.tan(skew - skewY * _DEG2RAD);\n          t1 = Math.sqrt(1 + t1 * t1);\n          a12 *= t1;\n          a22 *= t1;\n          if (skewY) {\n            t1 = Math.tan(skewY * _DEG2RAD);\n            t1 = Math.sqrt(1 + t1 * t1);\n            a11 *= t1;\n            a21 *= t1;\n          }\n        }\n        if (isSVG) {\n          x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;\n          y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;\n          if (_useSVGTransformAttr && (t.xPercent || t.yPercent)) {\n            //The SVG spec doesn't support percentage-based translation in the \"transform\" attribute, so we merge it into the matrix to simulate it.\n            min = this.t.getBBox();\n            x += t.xPercent * 0.01 * min.width;\n            y += t.yPercent * 0.01 * min.height;\n          }\n          min = 0.000001;\n          if (x < min) if (x > -min) {\n            x = 0;\n          }\n          if (y < min) if (y > -min) {\n            y = 0;\n          }\n        }\n        transform = (a11 * rnd | 0) / rnd + ',' + (a21 * rnd | 0) / rnd + ',' + (a12 * rnd | 0) / rnd + ',' + (a22 * rnd | 0) / rnd + ',' + x + ',' + y + ')';\n        if (isSVG && _useSVGTransformAttr) {\n          this.t.setAttribute('transform', 'matrix(' + transform);\n        } else {\n          //some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the \"e-\" towards the end) and would render the object slightly off. So we round to 5 decimal places.\n          style[_transformProp] = (t.xPercent || t.yPercent ? 'translate(' + t.xPercent + '%,' + t.yPercent + '%) matrix(' : 'matrix(') + transform;\n        }\n      } else {\n        style[_transformProp] = (t.xPercent || t.yPercent ? 'translate(' + t.xPercent + '%,' + t.yPercent + '%) matrix(' : 'matrix(') + sx + ',0,0,' + sy + ',' + x + ',' + y + ')';\n      }\n      return;\n    }\n    if (_isFirefox) {\n      //Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.\n      min = 0.0001;\n      if (sx < min && sx > -min) {\n        sx = sz = 0.00002;\n      }\n      if (sy < min && sy > -min) {\n        sy = sz = 0.00002;\n      }\n      if (perspective && !t.z && !t.rotationX && !t.rotationY) {\n        //Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).\n        perspective = 0;\n      }\n    }\n    if (angle || skewX) {\n      angle *= _DEG2RAD;\n      cos = a11 = Math.cos(angle);\n      sin = a21 = Math.sin(angle);\n      if (skewX) {\n        angle -= skewX * _DEG2RAD;\n        cos = Math.cos(angle);\n        sin = Math.sin(angle);\n        if (t.skewType === 'simple') {\n          //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to \"simple\" to use the uncompensated skewing that CSS does\n          t1 = Math.tan((skewX - skewY) * _DEG2RAD);\n          t1 = Math.sqrt(1 + t1 * t1);\n          cos *= t1;\n          sin *= t1;\n          if (t.skewY) {\n            t1 = Math.tan(skewY * _DEG2RAD);\n            t1 = Math.sqrt(1 + t1 * t1);\n            a11 *= t1;\n            a21 *= t1;\n          }\n        }\n      }\n      a12 = -sin;\n      a22 = cos;\n    } else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) {\n      //if we're only translating and/or 2D scaling, this is faster...\n      style[_transformProp] = (t.xPercent || t.yPercent ? 'translate(' + t.xPercent + '%,' + t.yPercent + '%) translate3d(' : 'translate3d(') + x + 'px,' + y + 'px,' + z + 'px)' + (sx !== 1 || sy !== 1 ? ' scale(' + sx + ',' + sy + ')' : '');\n      return;\n    } else {\n      a11 = a22 = 1;\n      a12 = a21 = 0;\n    }\n    // KEY  INDEX   AFFECTS a[row][column]\n    // a11  0       rotation, rotationY, scaleX\n    // a21  1       rotation, rotationY, scaleX\n    // a31  2       rotationY, scaleX\n    // a41  3       rotationY, scaleX\n    // a12  4       rotation, skewX, rotationX, scaleY\n    // a22  5       rotation, skewX, rotationX, scaleY\n    // a32  6       rotationX, scaleY\n    // a42  7       rotationX, scaleY\n    // a13  8       rotationY, rotationX, scaleZ\n    // a23  9       rotationY, rotationX, scaleZ\n    // a33  10      rotationY, rotationX, scaleZ\n    // a43  11      rotationY, rotationX, perspective, scaleZ\n    // a14  12      x, zOrigin, svgOrigin\n    // a24  13      y, zOrigin, svgOrigin\n    // a34  14      z, zOrigin\n    // a44  15\n    // rotation: Math.atan2(a21, a11)\n    // rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))\n    // rotationX: Math.atan2(a32, a33)\n    a33 = 1;\n    a13 = a23 = a31 = a32 = a41 = a42 = 0;\n    a43 = perspective ? -1 / perspective : 0;\n    zOrigin = t.zOrigin;\n    min = 0.000001; //threshold below which browsers use scientific notation which won't work.\n    comma = ',';\n    zero = '0';\n    angle = rotationY * _DEG2RAD;\n    if (angle) {\n      cos = Math.cos(angle);\n      sin = Math.sin(angle);\n      a31 = -sin;\n      a41 = a43 * -sin;\n      a13 = a11 * sin;\n      a23 = a21 * sin;\n      a33 = cos;\n      a43 *= cos;\n      a11 *= cos;\n      a21 *= cos;\n    }\n    angle = rotationX * _DEG2RAD;\n    if (angle) {\n      cos = Math.cos(angle);\n      sin = Math.sin(angle);\n      t1 = a12 * cos + a13 * sin;\n      t2 = a22 * cos + a23 * sin;\n      a32 = a33 * sin;\n      a42 = a43 * sin;\n      a13 = a12 * -sin + a13 * cos;\n      a23 = a22 * -sin + a23 * cos;\n      a33 = a33 * cos;\n      a43 = a43 * cos;\n      a12 = t1;\n      a22 = t2;\n    }\n    if (sz !== 1) {\n      a13 *= sz;\n      a23 *= sz;\n      a33 *= sz;\n      a43 *= sz;\n    }\n    if (sy !== 1) {\n      a12 *= sy;\n      a22 *= sy;\n      a32 *= sy;\n      a42 *= sy;\n    }\n    if (sx !== 1) {\n      a11 *= sx;\n      a21 *= sx;\n      a31 *= sx;\n      a41 *= sx;\n    }\n\n    if (zOrigin || isSVG) {\n      if (zOrigin) {\n        x += a13 * -zOrigin;\n        y += a23 * -zOrigin;\n        z += a33 * -zOrigin + zOrigin;\n      }\n      if (isSVG) {\n        //due to bugs in some browsers, we need to manage the transform-origin of SVG manually\n        x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;\n        y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;\n      }\n      if (x < min && x > -min) {\n        x = zero;\n      }\n      if (y < min && y > -min) {\n        y = zero;\n      }\n      if (z < min && z > -min) {\n        z = 0; //don't use string because we calculate perspective later and need the number.\n      }\n    }\n\n    //optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:\n    transform = t.xPercent || t.yPercent ? 'translate(' + t.xPercent + '%,' + t.yPercent + '%) matrix3d(' : 'matrix3d(';\n    transform += (a11 < min && a11 > -min ? zero : a11) + comma + (a21 < min && a21 > -min ? zero : a21) + comma + (a31 < min && a31 > -min ? zero : a31);\n    transform += comma + (a41 < min && a41 > -min ? zero : a41) + comma + (a12 < min && a12 > -min ? zero : a12) + comma + (a22 < min && a22 > -min ? zero : a22);\n    if (rotationX || rotationY || sz !== 1) {\n      //performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)\n      transform += comma + (a32 < min && a32 > -min ? zero : a32) + comma + (a42 < min && a42 > -min ? zero : a42) + comma + (a13 < min && a13 > -min ? zero : a13);\n      transform += comma + (a23 < min && a23 > -min ? zero : a23) + comma + (a33 < min && a33 > -min ? zero : a33) + comma + (a43 < min && a43 > -min ? zero : a43) + comma;\n    } else {\n      transform += ',0,0,0,0,1,0,';\n    }\n    transform += x + comma + y + comma + z + comma + (perspective ? 1 + -z / perspective : 1) + ')';\n\n    style[_transformProp] = transform;\n  };\n\n  p = Transform.prototype;\n  p.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;\n  p.scaleX = p.scaleY = p.scaleZ = 1;\n\n  _registerComplexSpecialProp('transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin', { parser: function parser(t, e, parsingProp, cssp, pt, plugin, vars) {\n      if (cssp._lastParsedTransform === vars) {\n        return pt;\n      } //only need to parse the transform once, and only if the browser supports it.\n      cssp._lastParsedTransform = vars;\n      var scaleFunc = vars.scale && typeof vars.scale === 'function' ? vars.scale : 0,\n          //if there's a function-based \"scale\" value, swap in the resulting numeric value temporarily. Otherwise, if it's called for both scaleX and scaleY independently, they may not match (like if the function uses Math.random()).\n      swapFunc;\n      if (typeof vars[parsingProp] === 'function') {\n        //whatever property triggers the initial parsing might be a function-based value in which case it already got called in parse(), thus we don't want to call it again in here. The most efficient way to avoid this is to temporarily swap the value directly into the vars object, and then after we do all our parsing in this function, we'll swap it back again.\n        swapFunc = vars[parsingProp];\n        vars[parsingProp] = e;\n      }\n      if (scaleFunc) {\n        vars.scale = scaleFunc(_index, t);\n      }\n      var originalGSTransform = t._gsTransform,\n          style = t.style,\n          min = 0.000001,\n          i = _transformProps.length,\n          v = vars,\n          endRotations = {},\n          transformOriginString = 'transformOrigin',\n          m1 = _getTransform(t, _cs, true, v.parseTransform),\n          orig = v.transform && (typeof v.transform === 'function' ? v.transform(_index, _target) : v.transform),\n          m2,\n          copy,\n          has3D,\n          hasChange,\n          dr,\n          x,\n          y,\n          matrix,\n          p;\n      m1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;\n      cssp._transform = m1;\n      if ('rotationZ' in v) {\n        v.rotation = v.rotationZ;\n      }\n      if (orig && typeof orig === 'string' && _transformProp) {\n        //for values like transform:\"rotate(60deg) scale(0.5, 0.8)\"\n        copy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.\n        copy[_transformProp] = orig;\n        copy.display = 'block'; //if display is \"none\", the browser often refuses to report the transform properties correctly.\n        copy.position = 'absolute';\n        if (orig.indexOf('%') !== -1) {\n          //%-based translations will fail unless we set the width/height to match the original target...\n          copy.width = _getStyle(t, 'width');\n          copy.height = _getStyle(t, 'height');\n        }\n        _doc.body.appendChild(_tempDiv);\n        m2 = _getTransform(_tempDiv, null, false);\n        if (m1.skewType === 'simple') {\n          //the default _getTransform() reports the skewX/scaleY as if skewType is \"compensated\", thus we need to adjust that here if skewType is \"simple\".\n          m2.scaleY *= Math.cos(m2.skewX * _DEG2RAD);\n        }\n        if (m1.svg) {\n          //if it's an SVG element, x/y part of the matrix will be affected by whatever we use as the origin and the offsets, so compensate here...\n          x = m1.xOrigin;\n          y = m1.yOrigin;\n          m2.x -= m1.xOffset;\n          m2.y -= m1.yOffset;\n          if (v.transformOrigin || v.svgOrigin) {\n            //if this tween is altering the origin, we must factor that in here. The actual work of recording the transformOrigin values and setting up the PropTween is done later (still inside this function) so we cannot leave the changes intact here - we only want to update the x/y accordingly.\n            orig = {};\n            _parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);\n            x = orig.xOrigin;\n            y = orig.yOrigin;\n            m2.x -= orig.xOffset - m1.xOffset;\n            m2.y -= orig.yOffset - m1.yOffset;\n          }\n          if (x || y) {\n            matrix = _getMatrix(_tempDiv, true);\n            m2.x -= x - (x * matrix[0] + y * matrix[2]);\n            m2.y -= y - (x * matrix[1] + y * matrix[3]);\n          }\n        }\n        _doc.body.removeChild(_tempDiv);\n        if (!m2.perspective) {\n          m2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.\n        }\n        if (v.xPercent != null) {\n          m2.xPercent = _parseVal(v.xPercent, m1.xPercent);\n        }\n        if (v.yPercent != null) {\n          m2.yPercent = _parseVal(v.yPercent, m1.yPercent);\n        }\n      } else if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object') {\n        //for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)\n        m2 = { scaleX: _parseVal(v.scaleX != null ? v.scaleX : v.scale, m1.scaleX),\n          scaleY: _parseVal(v.scaleY != null ? v.scaleY : v.scale, m1.scaleY),\n          scaleZ: _parseVal(v.scaleZ, m1.scaleZ),\n          x: _parseVal(v.x, m1.x),\n          y: _parseVal(v.y, m1.y),\n          z: _parseVal(v.z, m1.z),\n          xPercent: _parseVal(v.xPercent, m1.xPercent),\n          yPercent: _parseVal(v.yPercent, m1.yPercent),\n          perspective: _parseVal(v.transformPerspective, m1.perspective) };\n        dr = v.directionalRotation;\n        if (dr != null) {\n          if ((typeof dr === 'undefined' ? 'undefined' : _typeof(dr)) === 'object') {\n            for (copy in dr) {\n              v[copy] = dr[copy];\n            }\n          } else {\n            v.rotation = dr;\n          }\n        }\n        if (typeof v.x === 'string' && v.x.indexOf('%') !== -1) {\n          m2.x = 0;\n          m2.xPercent = _parseVal(v.x, m1.xPercent);\n        }\n        if (typeof v.y === 'string' && v.y.indexOf('%') !== -1) {\n          m2.y = 0;\n          m2.yPercent = _parseVal(v.y, m1.yPercent);\n        }\n\n        m2.rotation = _parseAngle('rotation' in v ? v.rotation : 'shortRotation' in v ? v.shortRotation + '_short' : m1.rotation, m1.rotation, 'rotation', endRotations);\n        if (_supports3D) {\n          m2.rotationX = _parseAngle('rotationX' in v ? v.rotationX : 'shortRotationX' in v ? v.shortRotationX + '_short' : m1.rotationX || 0, m1.rotationX, 'rotationX', endRotations);\n          m2.rotationY = _parseAngle('rotationY' in v ? v.rotationY : 'shortRotationY' in v ? v.shortRotationY + '_short' : m1.rotationY || 0, m1.rotationY, 'rotationY', endRotations);\n        }\n        m2.skewX = _parseAngle(v.skewX, m1.skewX);\n        m2.skewY = _parseAngle(v.skewY, m1.skewY);\n      }\n      if (_supports3D && v.force3D != null) {\n        m1.force3D = v.force3D;\n        hasChange = true;\n      }\n\n      has3D = m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective;\n      if (!has3D && v.scale != null) {\n        m2.scaleZ = 1; //no need to tween scaleZ.\n      }\n\n      while (--i > -1) {\n        p = _transformProps[i];\n        orig = m2[p] - m1[p];\n        if (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {\n          hasChange = true;\n          pt = new CSSPropTween(m1, p, m1[p], orig, pt);\n          if (p in endRotations) {\n            pt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested\n          }\n          pt.xs0 = 0; //ensures the value stays numeric in setRatio()\n          pt.plugin = plugin;\n          cssp._overwriteProps.push(pt.n);\n        }\n      }\n\n      orig = v.transformOrigin;\n      if (m1.svg && (orig || v.svgOrigin)) {\n        x = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin\n        y = m1.yOffset;\n        _parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);\n        pt = _addNonTweeningNumericPT(m1, 'xOrigin', (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to(\"#wheel\", 3, {rotation:180, transformOrigin:\"50% 50%\", delay:1}); TweenLite.fromTo(\"#wheel\", 3, {scale:0.5, transformOrigin:\"50% 50%\"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.\n        pt = _addNonTweeningNumericPT(m1, 'yOrigin', (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);\n        if (x !== m1.xOffset || y !== m1.yOffset) {\n          pt = _addNonTweeningNumericPT(m1, 'xOffset', originalGSTransform ? x : m1.xOffset, m1.xOffset, pt, transformOriginString);\n          pt = _addNonTweeningNumericPT(m1, 'yOffset', originalGSTransform ? y : m1.yOffset, m1.yOffset, pt, transformOriginString);\n        }\n        orig = '0px 0px'; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin\n      }\n      if (orig || _supports3D && has3D && m1.zOrigin) {\n        //if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a \"transformOrigin\" in this particular tween (maybe they did it via css directly).\n        if (_transformProp) {\n          hasChange = true;\n          p = _transformOriginProp;\n          orig = (orig || _getStyle(t, p, _cs, false, '50% 50%')) + ''; //cast as string to avoid errors\n          pt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);\n          pt.b = style[p];\n          pt.plugin = plugin;\n          if (_supports3D) {\n            copy = m1.zOrigin;\n            orig = orig.split(' ');\n            m1.zOrigin = (orig.length > 2 && !(copy !== 0 && orig[2] === '0px') ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.\n            pt.xs0 = pt.e = orig[0] + ' ' + (orig[1] || '50%') + ' 0px'; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!\n            pt = new CSSPropTween(m1, 'zOrigin', 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)\n            pt.b = copy;\n            pt.xs0 = pt.e = m1.zOrigin;\n          } else {\n            pt.xs0 = pt.e = orig;\n          }\n\n          //for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).\n        } else {\n          _parsePosition(orig + '', m1);\n        }\n      }\n      if (hasChange) {\n        cssp._transformType = !(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3) ? 3 : 2; //quicker than calling cssp._enableTransforms();\n      }\n      if (swapFunc) {\n        vars[parsingProp] = swapFunc;\n      }\n      if (scaleFunc) {\n        vars.scale = scaleFunc;\n      }\n      return pt;\n    }, prefix: true });\n\n  _registerComplexSpecialProp('boxShadow', { defaultValue: '0px 0px 0px 0px #999', prefix: true, color: true, multi: true, keyword: 'inset' });\n\n  _registerComplexSpecialProp('borderRadius', { defaultValue: '0px', parser: function parser(t, e, p, cssp, pt, plugin) {\n      e = this.format(e);\n      var props = ['borderTopLeftRadius', 'borderTopRightRadius', 'borderBottomRightRadius', 'borderBottomLeftRadius'],\n          style = t.style,\n          ea1,\n          i,\n          es2,\n          bs2,\n          bs,\n          es,\n          bn,\n          en,\n          w,\n          h,\n          esfx,\n          bsfx,\n          rel,\n          hn,\n          vn,\n          em;\n      w = parseFloat(t.offsetWidth);\n      h = parseFloat(t.offsetHeight);\n      ea1 = e.split(' ');\n      for (i = 0; i < props.length; i++) {\n        //if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!\n        if (this.p.indexOf('border')) {\n          //older browsers used a prefix\n          props[i] = _checkPropPrefix(props[i]);\n        }\n        bs = bs2 = _getStyle(t, props[i], _cs, false, '0px');\n        if (bs.indexOf(' ') !== -1) {\n          bs2 = bs.split(' ');\n          bs = bs2[0];\n          bs2 = bs2[1];\n        }\n        es = es2 = ea1[i];\n        bn = parseFloat(bs);\n        bsfx = bs.substr((bn + '').length);\n        rel = es.charAt(1) === '=';\n        if (rel) {\n          en = parseInt(es.charAt(0) + '1', 10);\n          es = es.substr(2);\n          en *= parseFloat(es);\n          esfx = es.substr((en + '').length - (en < 0 ? 1 : 0)) || '';\n        } else {\n          en = parseFloat(es);\n          esfx = es.substr((en + '').length);\n        }\n        if (esfx === '') {\n          esfx = _suffixMap[p] || bsfx;\n        }\n        if (esfx !== bsfx) {\n          hn = _convertToPixels(t, 'borderLeft', bn, bsfx); //horizontal number (we use a bogus \"borderLeft\" property just because the _convertToPixels() method searches for the keywords \"Left\", \"Right\", \"Top\", and \"Bottom\" to determine of it's a horizontal or vertical property, and we need \"border\" in the name so that it knows it should measure relative to the element itself, not its parent.\n          vn = _convertToPixels(t, 'borderTop', bn, bsfx); //vertical number\n          if (esfx === '%') {\n            bs = hn / w * 100 + '%';\n            bs2 = vn / h * 100 + '%';\n          } else if (esfx === 'em') {\n            em = _convertToPixels(t, 'borderLeft', 1, 'em');\n            bs = hn / em + 'em';\n            bs2 = vn / em + 'em';\n          } else {\n            bs = hn + 'px';\n            bs2 = vn + 'px';\n          }\n          if (rel) {\n            es = parseFloat(bs) + en + esfx;\n            es2 = parseFloat(bs2) + en + esfx;\n          }\n        }\n        pt = _parseComplex(style, props[i], bs + ' ' + bs2, es + ' ' + es2, false, '0px', pt);\n      }\n      return pt;\n    }, prefix: true, formatter: _getFormatter('0px 0px 0px 0px', false, true) });\n  _registerComplexSpecialProp('borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius', { defaultValue: '0px', parser: function parser(t, e, p, cssp, pt, plugin) {\n      return _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, '0px 0px')), this.format(e), false, '0px', pt);\n    }, prefix: true, formatter: _getFormatter('0px 0px', false, true) });\n  _registerComplexSpecialProp('backgroundPosition', { defaultValue: '0 0', parser: function parser(t, e, p, cssp, pt, plugin) {\n      var bp = 'background-position',\n          cs = _cs || _getComputedStyle(t, null),\n          bs = this.format((cs ? _ieVers ? cs.getPropertyValue(bp + '-x') + ' ' + cs.getPropertyValue(bp + '-y') : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + ' ' + t.currentStyle.backgroundPositionY) || '0 0'),\n          //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase\n      es = this.format(e),\n          ba,\n          ea,\n          i,\n          pct,\n          overlap,\n          src;\n      if (bs.indexOf('%') !== -1 !== (es.indexOf('%') !== -1) && es.split(',').length < 2) {\n        src = _getStyle(t, 'backgroundImage').replace(_urlExp, '');\n        if (src && src !== 'none') {\n          ba = bs.split(' ');\n          ea = es.split(' ');\n          _tempImg.setAttribute('src', src); //set the temp IMG's src to the background-image so that we can measure its width/height\n          i = 2;\n          while (--i > -1) {\n            bs = ba[i];\n            pct = bs.indexOf('%') !== -1;\n            if (pct !== (ea[i].indexOf('%') !== -1)) {\n              overlap = i === 0 ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;\n              ba[i] = pct ? parseFloat(bs) / 100 * overlap + 'px' : parseFloat(bs) / overlap * 100 + '%';\n            }\n          }\n          bs = ba.join(' ');\n        }\n      }\n      return this.parseComplex(t.style, bs, es, pt, plugin);\n    }, formatter: _parsePosition });\n  _registerComplexSpecialProp('backgroundSize', { defaultValue: '0 0', formatter: function formatter(v) {\n      v += ''; //ensure it's a string\n      return v.substr(0, 2) === 'co' ? v : _parsePosition(v.indexOf(' ') === -1 ? v + ' ' + v : v); //if set to something like \"100% 100%\", Safari typically reports the computed style as just \"100%\" (no 2nd value), but we should ensure that there are two values, so copy the first one. Otherwise, it'd be interpreted as \"100% 0\" (wrong). Also remember that it could be \"cover\" or \"contain\" which we can't tween but should be able to set.\n    } });\n  _registerComplexSpecialProp('perspective', { defaultValue: '0px', prefix: true });\n  _registerComplexSpecialProp('perspectiveOrigin', { defaultValue: '50% 50%', prefix: true });\n  _registerComplexSpecialProp('transformStyle', { prefix: true });\n  _registerComplexSpecialProp('backfaceVisibility', { prefix: true });\n  _registerComplexSpecialProp('userSelect', { prefix: true });\n  _registerComplexSpecialProp('margin', { parser: _getEdgeParser('marginTop,marginRight,marginBottom,marginLeft') });\n  _registerComplexSpecialProp('padding', { parser: _getEdgeParser('paddingTop,paddingRight,paddingBottom,paddingLeft') });\n  _registerComplexSpecialProp('clip', { defaultValue: 'rect(0px,0px,0px,0px)', parser: function parser(t, e, p, cssp, pt, plugin) {\n      var b, cs, delim;\n      if (_ieVers < 9) {\n        //IE8 and earlier don't report a \"clip\" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.\n        cs = t.currentStyle;\n        delim = _ieVers < 8 ? ' ' : ',';\n        b = 'rect(' + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + ')';\n        e = this.format(e).split(',').join(delim);\n      } else {\n        b = this.format(_getStyle(t, this.p, _cs, false, this.dflt));\n        e = this.format(e);\n      }\n      return this.parseComplex(t.style, b, e, pt, plugin);\n    } });\n  _registerComplexSpecialProp('textShadow', { defaultValue: '0px 0px 0px #999', color: true, multi: true });\n  _registerComplexSpecialProp('autoRound,strictUnits', { parser: function parser(t, e, p, cssp, pt) {\n      return pt;\n    } }); //just so that we can ignore these properties (not tween them)\n  _registerComplexSpecialProp('border', { defaultValue: '0px solid #000', parser: function parser(t, e, p, cssp, pt, plugin) {\n      var bw = _getStyle(t, 'borderTopWidth', _cs, false, '0px'),\n          end = this.format(e).split(' '),\n          esfx = end[0].replace(_suffixExp, '');\n      if (esfx !== 'px') {\n        //if we're animating to a non-px value, we need to convert the beginning width to that unit.\n        bw = parseFloat(bw) / _convertToPixels(t, 'borderTopWidth', 1, esfx) + esfx;\n      }\n      return this.parseComplex(t.style, this.format(bw + ' ' + _getStyle(t, 'borderTopStyle', _cs, false, 'solid') + ' ' + _getStyle(t, 'borderTopColor', _cs, false, '#000')), end.join(' '), pt, plugin);\n    }, color: true, formatter: function formatter(v) {\n      var a = v.split(' ');\n      return a[0] + ' ' + (a[1] || 'solid') + ' ' + (v.match(_colorExp) || ['#000'])[0];\n    } });\n  _registerComplexSpecialProp('borderWidth', { parser: _getEdgeParser('borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth') }); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).\n  _registerComplexSpecialProp('float,cssFloat,styleFloat', { parser: function parser(t, e, p, cssp, pt, plugin) {\n      var s = t.style,\n          prop = 'cssFloat' in s ? 'cssFloat' : 'styleFloat';\n      return new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);\n    } });\n\n  //opacity-related\n  var _setIEOpacityRatio = function _setIEOpacityRatio(v) {\n    var t = this.t,\n        //refers to the element's style property\n    filters = t.filter || _getStyle(this.data, 'filter') || '',\n        val = this.s + this.c * v | 0,\n        skip;\n    if (val === 100) {\n      //for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.\n      if (filters.indexOf('atrix(') === -1 && filters.indexOf('radient(') === -1 && filters.indexOf('oader(') === -1) {\n        t.removeAttribute('filter');\n        skip = !_getStyle(this.data, 'filter'); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.\n      } else {\n        t.filter = filters.replace(_alphaFilterExp, '');\n        skip = true;\n      }\n    }\n    if (!skip) {\n      if (this.xn1) {\n        t.filter = filters = filters || 'alpha(opacity=' + val + ')'; //works around bug in IE7/8 that prevents changes to \"visibility\" from being applied properly if the filter is changed to a different alpha on the same frame.\n      }\n      if (filters.indexOf('pacity') === -1) {\n        //only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the \"O\" to avoid case-sensitivity issues\n        if (val !== 0 || !this.xn1) {\n          //bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as \"visibility\" changes (this.xn1 is 1 if this tween is an \"autoAlpha\" tween)\n          t.filter = filters + ' alpha(opacity=' + val + ')'; //we round the value because otherwise, bugs in IE7/8 can prevent \"visibility\" changes from being applied properly.\n        }\n      } else {\n        t.filter = filters.replace(_opacityExp, 'opacity=' + val);\n      }\n    }\n  };\n  _registerComplexSpecialProp('opacity,alpha,autoAlpha', { defaultValue: '1', parser: function parser(t, e, p, cssp, pt, plugin) {\n      var b = parseFloat(_getStyle(t, 'opacity', _cs, false, '1')),\n          style = t.style,\n          isAutoAlpha = p === 'autoAlpha';\n      if (typeof e === 'string' && e.charAt(1) === '=') {\n        e = (e.charAt(0) === '-' ? -1 : 1) * parseFloat(e.substr(2)) + b;\n      }\n      if (isAutoAlpha && b === 1 && _getStyle(t, 'visibility', _cs) === 'hidden' && e !== 0) {\n        //if visibility is initially set to \"hidden\", we should interpret that as intent to make opacity 0 (a convenience)\n        b = 0;\n      }\n      if (_supportsOpacity) {\n        pt = new CSSPropTween(style, 'opacity', b, e - b, pt);\n      } else {\n        pt = new CSSPropTween(style, 'opacity', b * 100, (e - b) * 100, pt);\n        pt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to \"visibility\" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.\n        style.zoom = 1; //helps correct an IE issue.\n        pt.type = 2;\n        pt.b = 'alpha(opacity=' + pt.s + ')';\n        pt.e = 'alpha(opacity=' + (pt.s + pt.c) + ')';\n        pt.data = t;\n        pt.plugin = plugin;\n        pt.setRatio = _setIEOpacityRatio;\n      }\n      if (isAutoAlpha) {\n        //we have to create the \"visibility\" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier\n        pt = new CSSPropTween(style, 'visibility', 0, 0, pt, -1, null, false, 0, b !== 0 ? 'inherit' : 'hidden', e === 0 ? 'hidden' : 'inherit');\n        pt.xs0 = 'inherit';\n        cssp._overwriteProps.push(pt.n);\n        cssp._overwriteProps.push(p);\n      }\n      return pt;\n    } });\n\n  var _removeProp = function _removeProp(s, p) {\n    if (p) {\n      if (s.removeProperty) {\n        if (p.substr(0, 2) === 'ms' || p.substr(0, 6) === 'webkit') {\n          //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be \"ms-transform\" instead of \"-ms-transform\" for IE9, for example)\n          p = '-' + p;\n        }\n        s.removeProperty(p.replace(_capsExp, '-$1').toLowerCase());\n      } else {\n        //note: old versions of IE use \"removeAttribute()\" instead of \"removeProperty()\"\n        s.removeAttribute(p);\n      }\n    }\n  },\n      _setClassNameRatio = function _setClassNameRatio(v) {\n    this.t._gsClassPT = this;\n    if (v === 1 || v === 0) {\n      this.t.setAttribute('class', v === 0 ? this.b : this.e);\n      var mpt = this.data,\n          //first MiniPropTween\n      s = this.t.style;\n      while (mpt) {\n        if (!mpt.v) {\n          _removeProp(s, mpt.p);\n        } else {\n          s[mpt.p] = mpt.v;\n        }\n        mpt = mpt._next;\n      }\n      if (v === 1 && this.t._gsClassPT === this) {\n        this.t._gsClassPT = null;\n      }\n    } else if (this.t.getAttribute('class') !== this.e) {\n      this.t.setAttribute('class', this.e);\n    }\n  };\n  _registerComplexSpecialProp('className', { parser: function parser(t, e, p, cssp, pt, plugin, vars) {\n      var b = t.getAttribute('class') || '',\n          //don't use t.className because it doesn't work consistently on SVG elements; getAttribute(\"class\") and setAttribute(\"class\", value\") is more reliable.\n      cssText = t.style.cssText,\n          difData,\n          bs,\n          cnpt,\n          cnptLookup,\n          mpt;\n      pt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);\n      pt.setRatio = _setClassNameRatio;\n      pt.pr = -11;\n      _hasPriority = true;\n      pt.b = b;\n      bs = _getAllStyles(t, _cs);\n      //if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)\n      cnpt = t._gsClassPT;\n      if (cnpt) {\n        cnptLookup = {};\n        mpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.\n        while (mpt) {\n          cnptLookup[mpt.p] = 1;\n          mpt = mpt._next;\n        }\n        cnpt.setRatio(1);\n      }\n      t._gsClassPT = pt;\n      pt.e = e.charAt(1) !== '=' ? e : b.replace(new RegExp('(?:\\\\s|^)' + e.substr(2) + '(?![\\\\w-])'), '') + (e.charAt(0) === '+' ? ' ' + e.substr(2) : '');\n      t.setAttribute('class', pt.e);\n      difData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);\n      t.setAttribute('class', b);\n      pt.data = difData.firstMPT;\n      t.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).\n      pt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if \"className\" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)\n      return pt;\n    } });\n\n  var _setClearPropsRatio = function _setClearPropsRatio(v) {\n    if (v === 1 || v === 0) if (this.data._totalTime === this.data._totalDuration && this.data.data !== 'isFromStart') {\n      //this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).\n      var s = this.t.style,\n          transformParse = _specialProps.transform.parse,\n          a,\n          p,\n          i,\n          clearTransform,\n          transform;\n      if (this.e === 'all') {\n        s.cssText = '';\n        clearTransform = true;\n      } else {\n        a = this.e.split(' ').join('').split(',');\n        i = a.length;\n        while (--i > -1) {\n          p = a[i];\n          if (_specialProps[p]) {\n            if (_specialProps[p].parse === transformParse) {\n              clearTransform = true;\n            } else {\n              p = p === 'transformOrigin' ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like \"scaleX\" might be \"-webkit-transform\" or \"boxShadow\" might be \"-moz-box-shadow\"\n            }\n          }\n          _removeProp(s, p);\n        }\n      }\n      if (clearTransform) {\n        _removeProp(s, _transformProp);\n        transform = this.t._gsTransform;\n        if (transform) {\n          if (transform.svg) {\n            this.t.removeAttribute('data-svg-origin');\n            this.t.removeAttribute('transform');\n          }\n          delete this.t._gsTransform;\n        }\n      }\n    }\n  };\n  _registerComplexSpecialProp('clearProps', { parser: function parser(t, e, p, cssp, pt) {\n      pt = new CSSPropTween(t, p, 0, 0, pt, 2);\n      pt.setRatio = _setClearPropsRatio;\n      pt.e = e;\n      pt.pr = -10;\n      pt.data = cssp._tween;\n      _hasPriority = true;\n      return pt;\n    } });\n\n  p = 'bezier,throwProps,physicsProps,physics2D'.split(',');\n  i = p.length;\n  while (i--) {\n    _registerPluginProp(p[i]);\n  }\n\n  p = CSSPlugin.prototype;\n  p._firstPT = p._lastParsedTransform = p._transform = null;\n\n  //gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.\n  p._onInitTween = function (target, vars, tween, index) {\n    if (!target.nodeType) {\n      //css is only for dom elements\n      return false;\n    }\n    this._target = _target = target;\n    this._tween = tween;\n    this._vars = vars;\n    _index = index;\n    _autoRound = vars.autoRound;\n    _hasPriority = false;\n    _suffixMap = vars.suffixMap || CSSPlugin.suffixMap;\n    _cs = _getComputedStyle(target, '');\n    _overwriteProps = this._overwriteProps;\n    var style = target.style,\n        v,\n        pt,\n        pt2,\n        first,\n        last,\n        next,\n        zIndex,\n        tpt,\n        threeD;\n    if (_reqSafariFix) if (style.zIndex === '') {\n      v = _getStyle(target, 'zIndex', _cs);\n      if (v === 'auto' || v === '') {\n        //corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using \"left\" or \"top\" instead of transforms like \"x\" and \"y\") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting \"WebkitPerspective\" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.\n        this._addLazySet(style, 'zIndex', 0);\n      }\n    }\n\n    if (typeof vars === 'string') {\n      first = style.cssText;\n      v = _getAllStyles(target, _cs);\n      style.cssText = first + ';' + vars;\n      v = _cssDif(target, v, _getAllStyles(target)).difs;\n      if (!_supportsOpacity && _opacityValExp.test(vars)) {\n        v.opacity = parseFloat(RegExp.$1);\n      }\n      vars = v;\n      style.cssText = first;\n    }\n\n    if (vars.className) {\n      //className tweens will combine any differences they find in the css with the vars that are passed in, so {className:\"myClass\", scale:0.5, left:20} would work.\n      this._firstPT = pt = _specialProps.className.parse(target, vars.className, 'className', this, null, null, vars);\n    } else {\n      this._firstPT = pt = this.parse(target, vars, null);\n    }\n\n    if (this._transformType) {\n      threeD = this._transformType === 3;\n      if (!_transformProp) {\n        style.zoom = 1; //helps correct an IE issue.\n      } else if (_isSafari) {\n        _reqSafariFix = true;\n        //if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).\n        if (style.zIndex === '') {\n          zIndex = _getStyle(target, 'zIndex', _cs);\n          if (zIndex === 'auto' || zIndex === '') {\n            this._addLazySet(style, 'zIndex', 0);\n          }\n        }\n        //Setting WebkitBackfaceVisibility corrects 3 bugs:\n        // 1) [non-Android] Safari skips rendering changes to \"top\" and \"left\" that are made on the same frame/render as a transform update.\n        // 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting \"WebkitPerspective\" to a non-zero value worked too except that on iOS Safari things would flicker randomly.\n        // 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.\n        //Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.\n        if (_isSafariLT6) {\n          this._addLazySet(style, 'WebkitBackfaceVisibility', this._vars.WebkitBackfaceVisibility || (threeD ? 'visible' : 'hidden'));\n        }\n      }\n      pt2 = pt;\n      while (pt2 && pt2._next) {\n        pt2 = pt2._next;\n      }\n      tpt = new CSSPropTween(target, 'transform', 0, 0, null, 2);\n      this._linkCSSP(tpt, null, pt2);\n      tpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;\n      tpt.data = this._transform || _getTransform(target, _cs, true);\n      tpt.tween = tween;\n      tpt.pr = -1; //ensures that the transforms get applied after the components are updated.\n      _overwriteProps.pop(); //we don't want to force the overwrite of all \"transform\" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.\n    }\n\n    if (_hasPriority) {\n      //reorders the linked list in order of pr (priority)\n      while (pt) {\n        next = pt._next;\n        pt2 = first;\n        while (pt2 && pt2.pr > pt.pr) {\n          pt2 = pt2._next;\n        }\n        if (pt._prev = pt2 ? pt2._prev : last) {\n          pt._prev._next = pt;\n        } else {\n          first = pt;\n        }\n        if (pt._next = pt2) {\n          pt2._prev = pt;\n        } else {\n          last = pt;\n        }\n        pt = next;\n      }\n      this._firstPT = first;\n    }\n    return true;\n  };\n\n  p.parse = function (target, vars, pt, plugin) {\n    var style = target.style,\n        p,\n        sp,\n        bn,\n        en,\n        bs,\n        es,\n        bsfx,\n        esfx,\n        isStr,\n        rel;\n    for (p in vars) {\n      es = vars[p]; //ending value string\n      if (typeof es === 'function') {\n        es = es(_index, _target);\n      }\n      sp = _specialProps[p]; //SpecialProp lookup.\n      if (sp) {\n        pt = sp.parse(target, es, p, this, pt, plugin, vars);\n      } else if (p.substr(0, 2) === '--') {\n        //for tweening CSS variables (which always start with \"--\"). To maximize performance and simplicity, we bypass CSSPlugin altogether and just add a normal property tween to the tween instance itself.\n        this._tween._propLookup[p] = this._addTween.call(this._tween, target.style, 'setProperty', _getComputedStyle(target).getPropertyValue(p) + '', es + '', p, false, p);\n        continue;\n      } else {\n        bs = _getStyle(target, p, _cs) + '';\n        isStr = typeof es === 'string';\n        if (p === 'color' || p === 'fill' || p === 'stroke' || p.indexOf('Color') !== -1 || isStr && _rgbhslExp.test(es)) {\n          //Opera uses background: to define color sometimes in addition to backgroundColor:\n          if (!isStr) {\n            es = _parseColor(es);\n            es = (es.length > 3 ? 'rgba(' : 'rgb(') + es.join(',') + ')';\n          }\n          pt = _parseComplex(style, p, bs, es, true, 'transparent', pt, 0, plugin);\n        } else if (isStr && _complexExp.test(es)) {\n          pt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);\n        } else {\n          bn = parseFloat(bs);\n          bsfx = bn || bn === 0 ? bs.substr((bn + '').length) : ''; //remember, bs could be non-numeric like \"normal\" for fontWeight, so we should default to a blank suffix in that case.\n\n          if (bs === '' || bs === 'auto') {\n            if (p === 'width' || p === 'height') {\n              bn = _getDimension(target, p, _cs);\n              bsfx = 'px';\n            } else if (p === 'left' || p === 'top') {\n              bn = _calculateOffset(target, p, _cs);\n              bsfx = 'px';\n            } else {\n              bn = p !== 'opacity' ? 0 : 1;\n              bsfx = '';\n            }\n          }\n\n          rel = isStr && es.charAt(1) === '=';\n          if (rel) {\n            en = parseInt(es.charAt(0) + '1', 10);\n            es = es.substr(2);\n            en *= parseFloat(es);\n            esfx = es.replace(_suffixExp, '');\n          } else {\n            en = parseFloat(es);\n            esfx = isStr ? es.replace(_suffixExp, '') : '';\n          }\n\n          if (esfx === '') {\n            esfx = p in _suffixMap ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.\n          }\n\n          es = en || en === 0 ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.\n          //if the beginning/ending suffixes don't match, normalize them...\n          if (bsfx !== esfx) if (esfx !== '' || p === 'lineHeight') if (en || en === 0) if (bn) {\n            //note: if the beginning value (bn) is 0, we don't need to convert units!\n            bn = _convertToPixels(target, p, bn, bsfx);\n            if (esfx === '%') {\n              bn /= _convertToPixels(target, p, 100, '%') / 100;\n              if (vars.strictUnits !== true) {\n                //some browsers report only \"px\" values instead of allowing \"%\" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.\n                bs = bn + '%';\n              }\n            } else if (esfx === 'em' || esfx === 'rem' || esfx === 'vw' || esfx === 'vh') {\n              bn /= _convertToPixels(target, p, 1, esfx);\n\n              //otherwise convert to pixels.\n            } else if (esfx !== 'px') {\n              en = _convertToPixels(target, p, en, esfx);\n              esfx = 'px'; //we don't use bsfx after this, so we don't need to set it to px too.\n            }\n            if (rel) if (en || en === 0) {\n              es = en + bn + esfx; //the changes we made affect relative calculations, so adjust the end value here.\n            }\n          }\n\n          if (rel) {\n            en += bn;\n          }\n\n          if ((bn || bn === 0) && (en || en === 0)) {\n            //faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.\n            pt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, _autoRound !== false && (esfx === 'px' || p === 'zIndex'), 0, bs, es);\n            pt.xs0 = esfx;\n            //DEBUG: _log(\"tween \"+p+\" from \"+pt.b+\" (\"+bn+esfx+\") to \"+pt.e+\" with suffix: \"+pt.xs0);\n          } else if (style[p] === undefined || !es && (es + '' === 'NaN' || es == null)) {\n            _log('invalid ' + p + ' tween value: ' + vars[p]);\n          } else {\n            pt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);\n            pt.xs0 = es === 'none' && (p === 'display' || p.indexOf('Style') !== -1) ? bs : es; //intermediate value should typically be set immediately (end value) except for \"display\" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.\n            //DEBUG: _log(\"non-tweening value \"+p+\": \"+pt.xs0);\n          }\n        }\n      }\n      if (plugin) if (pt && !pt.plugin) {\n        pt.plugin = plugin;\n      }\n    }\n    return pt;\n  };\n\n  //gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.\n  p.setRatio = function (v) {\n    var pt = this._firstPT,\n        min = 0.000001,\n        val,\n        str,\n        i;\n    //at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like \"position\" or \"float\" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).\n    if (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {\n      while (pt) {\n        if (pt.type !== 2) {\n          if (pt.r && pt.type !== -1) {\n            val = pt.r(pt.s + pt.c);\n            if (!pt.type) {\n              pt.t[pt.p] = val + pt.xs0;\n            } else if (pt.type === 1) {\n              //complex value (one that typically has multiple numbers inside a string, like \"rect(5px,10px,20px,25px)\"\n              i = pt.l;\n              str = pt.xs0 + val + pt.xs1;\n              for (i = 1; i < pt.l; i++) {\n                str += pt['xn' + i] + pt['xs' + (i + 1)];\n              }\n              pt.t[pt.p] = str;\n            }\n          } else {\n            pt.t[pt.p] = pt.e;\n          }\n        } else {\n          pt.setRatio(v);\n        }\n        pt = pt._next;\n      }\n    } else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {\n      while (pt) {\n        val = pt.c * v + pt.s;\n        if (pt.r) {\n          val = pt.r(val);\n        } else if (val < min) if (val > -min) {\n          val = 0;\n        }\n        if (!pt.type) {\n          pt.t[pt.p] = val + pt.xs0;\n        } else if (pt.type === 1) {\n          //complex value (one that typically has multiple numbers inside a string, like \"rect(5px,10px,20px,25px)\"\n          i = pt.l;\n          if (i === 2) {\n            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;\n          } else if (i === 3) {\n            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;\n          } else if (i === 4) {\n            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;\n          } else if (i === 5) {\n            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;\n          } else {\n            str = pt.xs0 + val + pt.xs1;\n            for (i = 1; i < pt.l; i++) {\n              str += pt['xn' + i] + pt['xs' + (i + 1)];\n            }\n            pt.t[pt.p] = str;\n          }\n        } else if (pt.type === -1) {\n          //non-tweening value\n          pt.t[pt.p] = pt.xs0;\n        } else if (pt.setRatio) {\n          //custom setRatio() for things like SpecialProps, external plugins, etc.\n          pt.setRatio(v);\n        }\n        pt = pt._next;\n      }\n\n      //if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).\n    } else {\n      while (pt) {\n        if (pt.type !== 2) {\n          pt.t[pt.p] = pt.b;\n        } else {\n          pt.setRatio(v);\n        }\n        pt = pt._next;\n      }\n    }\n  };\n\n  /**\r\n   * @private\r\n   * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.\r\n   * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked\r\n   * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call\r\n   * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin\r\n   * doesn't have any transform-related properties of its own. You can call this method as many times as you\r\n   * want and it won't create duplicate CSSPropTweens.\r\n   *\r\n   * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)\r\n   */\n  p._enableTransforms = function (threeD) {\n    this._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.\n    this._transformType = !(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3) ? 3 : 2;\n  };\n\n  var lazySet = function lazySet(v) {\n    this.t[this.p] = this.e;\n    this.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.\n  };\n  /** @private Gives us a way to set a value on the first render (and only the first render). **/\n  p._addLazySet = function (t, p, v) {\n    var pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);\n    pt.e = v;\n    pt.setRatio = lazySet;\n    pt.data = this;\n  };\n\n  /** @private **/\n  p._linkCSSP = function (pt, next, prev, remove) {\n    if (pt) {\n      if (next) {\n        next._prev = pt;\n      }\n      if (pt._next) {\n        pt._next._prev = pt._prev;\n      }\n      if (pt._prev) {\n        pt._prev._next = pt._next;\n      } else if (this._firstPT === pt) {\n        this._firstPT = pt._next;\n        remove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)\n      }\n      if (prev) {\n        prev._next = pt;\n      } else if (!remove && this._firstPT === null) {\n        this._firstPT = pt;\n      }\n      pt._next = next;\n      pt._prev = prev;\n    }\n    return pt;\n  };\n\n  p._mod = function (lookup) {\n    var pt = this._firstPT;\n    while (pt) {\n      if (typeof lookup[pt.p] === 'function') {\n        //only gets called by RoundPropsPlugin (ModifyPlugin manages all the rendering internally for CSSPlugin properties that need modification). Remember, we handle rounding a bit differently in this plugin for performance reasons, leveraging \"r\" as an indicator that the value should be rounded internally.\n        pt.r = lookup[pt.p];\n      }\n      pt = pt._next;\n    }\n  };\n\n  //we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the \"visibility\" property.\n  p._kill = function (lookup) {\n    var copy = lookup,\n        pt,\n        p,\n        xfirst;\n    if (lookup.autoAlpha || lookup.alpha) {\n      copy = {};\n      for (p in lookup) {\n        //copy the lookup so that we're not changing the original which may be passed elsewhere.\n        copy[p] = lookup[p];\n      }\n      copy.opacity = 1;\n      if (copy.autoAlpha) {\n        copy.visibility = 1;\n      }\n    }\n    if (lookup.className && (pt = this._classNamePT)) {\n      //for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's \"xfirst\".\n      xfirst = pt.xfirst;\n      if (xfirst && xfirst._prev) {\n        this._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev\n      } else if (xfirst === this._firstPT) {\n        this._firstPT = pt._next;\n      }\n      if (pt._next) {\n        this._linkCSSP(pt._next, pt._next._next, xfirst._prev);\n      }\n      this._classNamePT = null;\n    }\n    pt = this._firstPT;\n    while (pt) {\n      if (pt.plugin && pt.plugin !== p && pt.plugin._kill) {\n        //for plugins that are registered with CSSPlugin, we should notify them of the kill.\n        pt.plugin._kill(lookup);\n        p = pt.plugin;\n      }\n      pt = pt._next;\n    }\n    return _TweenLite.TweenPlugin.prototype._kill.call(this, copy);\n  };\n\n  //used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.\n  var _getChildStyles = function _getChildStyles(e, props, targets) {\n    var children, i, child, type;\n    if (e.slice) {\n      i = e.length;\n      while (--i > -1) {\n        _getChildStyles(e[i], props, targets);\n      }\n      return;\n    }\n    children = e.childNodes;\n    i = children.length;\n    while (--i > -1) {\n      child = children[i];\n      type = child.type;\n      if (child.style) {\n        props.push(_getAllStyles(child));\n        if (targets) {\n          targets.push(child);\n        }\n      }\n      if ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {\n        _getChildStyles(child, props, targets);\n      }\n    }\n  };\n\n  /**\r\n   * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite\r\n   * and then compares the style properties of all the target's child elements at the tween's start and end, and\r\n   * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting\r\n   * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is\r\n   * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens\r\n   * is because it creates entirely new tweens that may have completely different targets than the original tween,\r\n   * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API\r\n   * and it would create other problems. For example:\r\n   *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)\r\n   *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.\r\n   *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.\r\n   *\r\n   * @param {Object} target object to be tweened\r\n   * @param {number} Duration in seconds (or frames for frames-based tweens)\r\n   * @param {Object} Object containing the end values, like {className:\"newClass\", ease:Linear.easeNone}\r\n   * @return {Array} An array of TweenLite instances\r\n   */\n  CSSPlugin.cascadeTo = function (target, duration, vars) {\n    var tween = _TweenLite2.default.to(target, duration, vars),\n        results = [tween],\n        b = [],\n        e = [],\n        targets = [],\n        _reservedProps = _TweenLite2.default._internals.reservedProps,\n        i,\n        difs,\n        p,\n        from;\n    target = tween._targets || tween.target;\n    _getChildStyles(target, b, targets);\n    tween.render(duration, true, true);\n    _getChildStyles(target, e);\n    tween.render(0, true, true);\n    tween._enabled(true);\n    i = targets.length;\n    while (--i > -1) {\n      difs = _cssDif(targets[i], b[i], e[i]);\n      if (difs.firstMPT) {\n        difs = difs.difs;\n        for (p in vars) {\n          if (_reservedProps[p]) {\n            difs[p] = vars[p];\n          }\n        }\n        from = {};\n        for (p in difs) {\n          from[p] = b[i][p];\n        }\n        results.push(_TweenLite2.default.fromTo(targets[i], duration, from, difs));\n      }\n    }\n    return results;\n  };\n\n  _TweenLite.TweenPlugin.activate([CSSPlugin]);\n  return CSSPlugin;\n}, true);\n\nvar CSSPlugin = exports.CSSPlugin = _TweenLite.globals.CSSPlugin;\nexports.default = CSSPlugin;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.DirectionalRotationPlugin = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /*!\r\n                                                                                                                                                                                                                                                                               * VERSION: 0.3.1\r\n                                                                                                                                                                                                                                                                               * DATE: 2018-08-27\r\n                                                                                                                                                                                                                                                                               * UPDATES AND DOCS AT: http://greensock.com\r\n                                                                                                                                                                                                                                                                               *\r\n                                                                                                                                                                                                                                                                               * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\r\n                                                                                                                                                                                                                                                                               * This work is subject to the terms at http://greensock.com/standard-license or for\r\n                                                                                                                                                                                                                                                                               * Club GreenSock members, the software agreement that was issued with your membership.\r\n                                                                                                                                                                                                                                                                               * \r\n                                                                                                                                                                                                                                                                               * @author: Jack Doyle, jack@greensock.com\r\n                                                                                                                                                                                                                                                                               **/\n\nvar _TweenLite = __webpack_require__(1);\n\nvar DirectionalRotationPlugin = exports.DirectionalRotationPlugin = _TweenLite._gsScope._gsDefine.plugin({\n  propName: 'directionalRotation',\n  version: '0.3.1',\n  API: 2,\n\n  //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n  init: function init(target, value, tween, index) {\n    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {\n      value = { rotation: value };\n    }\n    this.finals = {};\n    var cap = value.useRadians === true ? Math.PI * 2 : 360,\n        min = 0.000001,\n        p,\n        v,\n        start,\n        end,\n        dif,\n        split;\n    for (p in value) {\n      if (p !== 'useRadians') {\n        end = value[p];\n        if (typeof end === 'function') {\n          end = end(index, target);\n        }\n        split = (end + '').split('_');\n        v = split[0];\n        start = parseFloat(typeof target[p] !== 'function' ? target[p] : target[p.indexOf('set') || typeof target['get' + p.substr(3)] !== 'function' ? p : 'get' + p.substr(3)]());\n        end = this.finals[p] = typeof v === 'string' && v.charAt(1) === '=' ? start + parseInt(v.charAt(0) + '1', 10) * Number(v.substr(2)) : Number(v) || 0;\n        dif = end - start;\n        if (split.length) {\n          v = split.join('_');\n          if (v.indexOf('short') !== -1) {\n            dif = dif % cap;\n            if (dif !== dif % (cap / 2)) {\n              dif = dif < 0 ? dif + cap : dif - cap;\n            }\n          }\n          if (v.indexOf('_cw') !== -1 && dif < 0) {\n            dif = (dif + cap * 9999999999) % cap - (dif / cap | 0) * cap;\n          } else if (v.indexOf('ccw') !== -1 && dif > 0) {\n            dif = (dif - cap * 9999999999) % cap - (dif / cap | 0) * cap;\n          }\n        }\n        if (dif > min || dif < -min) {\n          this._addTween(target, p, start, start + dif, p);\n          this._overwriteProps.push(p);\n        }\n      }\n    }\n    return true;\n  },\n\n  //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)\n  set: function set(ratio) {\n    var pt;\n    if (ratio !== 1) {\n      this._super.setRatio.call(this, ratio);\n    } else {\n      pt = this._firstPT;\n      while (pt) {\n        if (pt.f) {\n          pt.t[pt.p](this.finals[pt.p]);\n        } else {\n          pt.t[pt.p] = this.finals[pt.p];\n        }\n        pt = pt._next;\n      }\n    }\n  }\n\n});\n\nDirectionalRotationPlugin._autoCSS = true;\n\nexports.default = DirectionalRotationPlugin;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2xpYnMvZ3NhcC9lc20vRGlyZWN0aW9uYWxSb3RhdGlvblBsdWdpbi5qcz81NWY5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBWRVJTSU9OOiAwLjMuMVxyXG4gKiBEQVRFOiAyMDE4LTA4LTI3XHJcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly9ncmVlbnNvY2suY29tXHJcbiAqXHJcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwOC0yMDE4LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIFRoaXMgd29yayBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxyXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgc29mdHdhcmUgYWdyZWVtZW50IHRoYXQgd2FzIGlzc3VlZCB3aXRoIHlvdXIgbWVtYmVyc2hpcC5cclxuICogXHJcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxyXG4gKiovXHJcblxyXG5pbXBvcnQgeyBfZ3NTY29wZSB9IGZyb20gJy4vVHdlZW5MaXRlLmpzJztcclxuXHJcbmV4cG9ydCB2YXIgRGlyZWN0aW9uYWxSb3RhdGlvblBsdWdpbiA9IF9nc1Njb3BlLl9nc0RlZmluZS5wbHVnaW4oe1xyXG4gIHByb3BOYW1lOiAnZGlyZWN0aW9uYWxSb3RhdGlvbicsXHJcbiAgdmVyc2lvbjogJzAuMy4xJyxcclxuICBBUEk6IDIsXHJcblxyXG4gIC8vY2FsbGVkIHdoZW4gdGhlIHR3ZWVuIHJlbmRlcnMgZm9yIHRoZSBmaXJzdCB0aW1lLiBUaGlzIGlzIHdoZXJlIGluaXRpYWwgdmFsdWVzIHNob3VsZCBiZSByZWNvcmRlZCBhbmQgYW55IHNldHVwIHJvdXRpbmVzIHNob3VsZCBydW4uXHJcbiAgaW5pdDogZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSwgdHdlZW4sIGluZGV4KSB7XHJcbiAgICBpZiAodHlwZW9mKHZhbHVlKSAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgdmFsdWUgPSB7cm90YXRpb246dmFsdWV9O1xyXG4gICAgfVxyXG4gICAgdGhpcy5maW5hbHMgPSB7fTtcclxuICAgIHZhciBjYXAgPSAodmFsdWUudXNlUmFkaWFucyA9PT0gdHJ1ZSkgPyBNYXRoLlBJICogMiA6IDM2MCxcclxuICAgICAgbWluID0gMC4wMDAwMDEsXHJcbiAgICAgIHAsIHYsIHN0YXJ0LCBlbmQsIGRpZiwgc3BsaXQ7XHJcbiAgICBmb3IgKHAgaW4gdmFsdWUpIHtcclxuICAgICAgaWYgKHAgIT09ICd1c2VSYWRpYW5zJykge1xyXG4gICAgICAgIGVuZCA9IHZhbHVlW3BdO1xyXG4gICAgICAgIGlmICh0eXBlb2YoZW5kKSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgZW5kID0gZW5kKGluZGV4LCB0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzcGxpdCA9IChlbmQgKyAnJykuc3BsaXQoJ18nKTtcclxuICAgICAgICB2ID0gc3BsaXRbMF07XHJcbiAgICAgICAgc3RhcnQgPSBwYXJzZUZsb2F0KCAodHlwZW9mKHRhcmdldFtwXSkgIT09ICdmdW5jdGlvbicpID8gdGFyZ2V0W3BdIDogdGFyZ2V0WyAoKHAuaW5kZXhPZignc2V0JykgfHwgdHlwZW9mKHRhcmdldFsnZ2V0JyArIHAuc3Vic3RyKDMpXSkgIT09ICdmdW5jdGlvbicpID8gcCA6ICdnZXQnICsgcC5zdWJzdHIoMykpIF0oKSApO1xyXG4gICAgICAgIGVuZCA9IHRoaXMuZmluYWxzW3BdID0gKHR5cGVvZih2KSA9PT0gJ3N0cmluZycgJiYgdi5jaGFyQXQoMSkgPT09ICc9JykgPyBzdGFydCArIHBhcnNlSW50KHYuY2hhckF0KDApICsgJzEnLCAxMCkgKiBOdW1iZXIodi5zdWJzdHIoMikpIDogTnVtYmVyKHYpIHx8IDA7XHJcbiAgICAgICAgZGlmID0gZW5kIC0gc3RhcnQ7XHJcbiAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgdiA9IHNwbGl0LmpvaW4oJ18nKTtcclxuICAgICAgICAgIGlmICh2LmluZGV4T2YoJ3Nob3J0JykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGRpZiA9IGRpZiAlIGNhcDtcclxuICAgICAgICAgICAgaWYgKGRpZiAhPT0gZGlmICUgKGNhcCAvIDIpKSB7XHJcbiAgICAgICAgICAgICAgZGlmID0gKGRpZiA8IDApID8gZGlmICsgY2FwIDogZGlmIC0gY2FwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAodi5pbmRleE9mKCdfY3cnKSAhPT0gLTEgJiYgZGlmIDwgMCkge1xyXG4gICAgICAgICAgICBkaWYgPSAoKGRpZiArIGNhcCAqIDk5OTk5OTk5OTkpICUgY2FwKSAtICgoZGlmIC8gY2FwKSB8IDApICogY2FwO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh2LmluZGV4T2YoJ2NjdycpICE9PSAtMSAmJiBkaWYgPiAwKSB7XHJcbiAgICAgICAgICAgIGRpZiA9ICgoZGlmIC0gY2FwICogOTk5OTk5OTk5OSkgJSBjYXApIC0gKChkaWYgLyBjYXApIHwgMCkgKiBjYXA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaWYgPiBtaW4gfHwgZGlmIDwgLW1pbikge1xyXG4gICAgICAgICAgdGhpcy5fYWRkVHdlZW4odGFyZ2V0LCBwLCBzdGFydCwgc3RhcnQgKyBkaWYsIHApO1xyXG4gICAgICAgICAgdGhpcy5fb3ZlcndyaXRlUHJvcHMucHVzaChwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0sXHJcblxyXG4gIC8vY2FsbGVkIGVhY2ggdGltZSB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkLCBhbmQgdGhlIHJhdGlvIGdldHMgcGFzc2VkIGFzIHRoZSBvbmx5IHBhcmFtZXRlciAodHlwaWNhbGx5IGl0J3MgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEsIGJ1dCBpdCBjYW4gZXhjZWVkIHRob3NlIHdoZW4gdXNpbmcgYW4gZWFzZSBsaWtlIEVsYXN0aWMuZWFzZU91dCBvciBCYWNrLmVhc2VPdXQsIGV0Yy4pXHJcbiAgc2V0OiBmdW5jdGlvbihyYXRpbykge1xyXG4gICAgdmFyIHB0O1xyXG4gICAgaWYgKHJhdGlvICE9PSAxKSB7XHJcbiAgICAgIHRoaXMuX3N1cGVyLnNldFJhdGlvLmNhbGwodGhpcywgcmF0aW8pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcHQgPSB0aGlzLl9maXJzdFBUO1xyXG4gICAgICB3aGlsZSAocHQpIHtcclxuICAgICAgICBpZiAocHQuZikge1xyXG4gICAgICAgICAgcHQudFtwdC5wXSh0aGlzLmZpbmFsc1twdC5wXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHB0LnRbcHQucF0gPSB0aGlzLmZpbmFsc1twdC5wXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pO1xyXG5cclxuRGlyZWN0aW9uYWxSb3RhdGlvblBsdWdpbi5fYXV0b0NTUyA9IHRydWU7XHJcblxyXG5leHBvcnQgeyBEaXJlY3Rpb25hbFJvdGF0aW9uUGx1Z2luIGFzIGRlZmF1bHQgfTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9saWJzL2dzYXAvZXNtL0RpcmVjdGlvbmFsUm90YXRpb25QbHVnaW4uanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFqRUE7QUFDQTtBQW1FQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Power4 = exports.Power3 = exports.Power2 = exports.Power1 = exports.Power0 = exports.Linear = exports.ExpoScaleEase = exports.Sine = exports.Expo = exports.Circ = exports.SteppedEase = exports.SlowMo = exports.RoughEase = exports.Bounce = exports.Elastic = exports.Back = undefined;\n\nvar _TweenLite = __webpack_require__(1);\n\n_TweenLite._gsScope._gsDefine('easing.Back', ['easing.Ease'], function () {\n\n  var w = _TweenLite._gsScope.GreenSockGlobals || _TweenLite._gsScope,\n      gs = w.com.greensock,\n      _2PI = Math.PI * 2,\n      _HALF_PI = Math.PI / 2,\n      _class = gs._class,\n      _create = function _create(n, f) {\n    var C = _class('easing.' + n, function () {}, true),\n        p = C.prototype = new _TweenLite.Ease();\n    p.constructor = C;\n    p.getRatio = f;\n    return C;\n  },\n      _easeReg = _TweenLite.Ease.register || function () {},\n      //put an empty function in place just as a safety measure in case someone loads an OLD version of TweenLite.js where Ease.register doesn't exist.\n  _wrap = function _wrap(name, EaseOut, EaseIn, EaseInOut, aliases) {\n    var C = _class('easing.' + name, {\n      easeOut: new EaseOut(),\n      easeIn: new EaseIn(),\n      easeInOut: new EaseInOut()\n    }, true);\n    _easeReg(C, name);\n    return C;\n  },\n      EasePoint = function EasePoint(time, value, next) {\n    this.t = time;\n    this.v = value;\n    if (next) {\n      this.next = next;\n      next.prev = this;\n      this.c = next.v - value;\n      this.gap = next.t - time;\n    }\n  },\n\n\n  //Back\n  _createBack = function _createBack(n, f) {\n    var C = _class('easing.' + n, function (overshoot) {\n      this._p1 = overshoot || overshoot === 0 ? overshoot : 1.70158;\n      this._p2 = this._p1 * 1.525;\n    }, true),\n        p = C.prototype = new _TweenLite.Ease();\n    p.constructor = C;\n    p.getRatio = f;\n    p.config = function (overshoot) {\n      return new C(overshoot);\n    };\n    return C;\n  },\n      Back = _wrap('Back', _createBack('BackOut', function (p) {\n    return (p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1;\n  }), _createBack('BackIn', function (p) {\n    return p * p * ((this._p1 + 1) * p - this._p1);\n  }), _createBack('BackInOut', function (p) {\n    return (p *= 2) < 1 ? 0.5 * p * p * ((this._p2 + 1) * p - this._p2) : 0.5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2);\n  })),\n\n\n  //SlowMo\n  SlowMo = _class('easing.SlowMo', function (linearRatio, power, yoyoMode) {\n    power = power || power === 0 ? power : 0.7;\n    if (linearRatio == null) {\n      linearRatio = 0.7;\n    } else if (linearRatio > 1) {\n      linearRatio = 1;\n    }\n    this._p = linearRatio !== 1 ? power : 0;\n    this._p1 = (1 - linearRatio) / 2;\n    this._p2 = linearRatio;\n    this._p3 = this._p1 + this._p2;\n    this._calcEnd = yoyoMode === true;\n  }, true),\n      p = SlowMo.prototype = new _TweenLite.Ease(),\n      SteppedEase,\n      ExpoScaleEase,\n      RoughEase,\n      _createElastic;\n\n  p.constructor = SlowMo;\n  p.getRatio = function (p) {\n    var r = p + (0.5 - p) * this._p;\n    if (p < this._p1) {\n      return this._calcEnd ? 1 - (p = 1 - p / this._p1) * p : r - (p = 1 - p / this._p1) * p * p * p * r;\n    } else if (p > this._p3) {\n      return this._calcEnd ? p === 1 ? 0 : 1 - (p = (p - this._p3) / this._p1) * p : r + (p - r) * (p = (p - this._p3) / this._p1) * p * p * p; //added p === 1 ? 0 to avoid floating point rounding errors from affecting the final value, like 1 - 0.7 = 0.30000000000000004 instead of 0.3\n    }\n    return this._calcEnd ? 1 : r;\n  };\n  SlowMo.ease = new SlowMo(0.7, 0.7);\n\n  p.config = SlowMo.config = function (linearRatio, power, yoyoMode) {\n    return new SlowMo(linearRatio, power, yoyoMode);\n  };\n\n  //SteppedEase\n  SteppedEase = _class('easing.SteppedEase', function (steps, immediateStart) {\n    steps = steps || 1;\n    this._p1 = 1 / steps;\n    this._p2 = steps + (immediateStart ? 0 : 1);\n    this._p3 = immediateStart ? 1 : 0;\n  }, true);\n  p = SteppedEase.prototype = new _TweenLite.Ease();\n  p.constructor = SteppedEase;\n  p.getRatio = function (p) {\n    if (p < 0) {\n      p = 0;\n    } else if (p >= 1) {\n      p = 0.999999999;\n    }\n    return ((this._p2 * p | 0) + this._p3) * this._p1;\n  };\n  p.config = SteppedEase.config = function (steps, immediateStart) {\n    return new SteppedEase(steps, immediateStart);\n  };\n\n  //ExpoScaleEase\n  ExpoScaleEase = _class('easing.ExpoScaleEase', function (start, end, ease) {\n    this._p1 = Math.log(end / start);\n    this._p2 = end - start;\n    this._p3 = start;\n    this._ease = ease;\n  }, true);\n  p = ExpoScaleEase.prototype = new _TweenLite.Ease();\n  p.constructor = ExpoScaleEase;\n  p.getRatio = function (p) {\n    if (this._ease) {\n      p = this._ease.getRatio(p);\n    }\n    return (this._p3 * Math.exp(this._p1 * p) - this._p3) / this._p2;\n  };\n  p.config = ExpoScaleEase.config = function (start, end, ease) {\n    return new ExpoScaleEase(start, end, ease);\n  };\n\n  //RoughEase\n  RoughEase = _class('easing.RoughEase', function (vars) {\n    vars = vars || {};\n    var taper = vars.taper || 'none',\n        a = [],\n        cnt = 0,\n        points = (vars.points || 20) | 0,\n        i = points,\n        randomize = vars.randomize !== false,\n        clamp = vars.clamp === true,\n        template = vars.template instanceof _TweenLite.Ease ? vars.template : null,\n        strength = typeof vars.strength === 'number' ? vars.strength * 0.4 : 0.4,\n        x,\n        y,\n        bump,\n        invX,\n        obj,\n        pnt;\n    while (--i > -1) {\n      x = randomize ? Math.random() : 1 / points * i;\n      y = template ? template.getRatio(x) : x;\n      if (taper === 'none') {\n        bump = strength;\n      } else if (taper === 'out') {\n        invX = 1 - x;\n        bump = invX * invX * strength;\n      } else if (taper === 'in') {\n        bump = x * x * strength;\n      } else if (x < 0.5) {\n        //\"both\" (start)\n        invX = x * 2;\n        bump = invX * invX * 0.5 * strength;\n      } else {\n        //\"both\" (end)\n        invX = (1 - x) * 2;\n        bump = invX * invX * 0.5 * strength;\n      }\n      if (randomize) {\n        y += Math.random() * bump - bump * 0.5;\n      } else if (i % 2) {\n        y += bump * 0.5;\n      } else {\n        y -= bump * 0.5;\n      }\n      if (clamp) {\n        if (y > 1) {\n          y = 1;\n        } else if (y < 0) {\n          y = 0;\n        }\n      }\n      a[cnt++] = { x: x, y: y };\n    }\n    a.sort(function (a, b) {\n      return a.x - b.x;\n    });\n\n    pnt = new EasePoint(1, 1, null);\n    i = points;\n    while (--i > -1) {\n      obj = a[i];\n      pnt = new EasePoint(obj.x, obj.y, pnt);\n    }\n\n    this._prev = new EasePoint(0, 0, pnt.t !== 0 ? pnt : pnt.next);\n  }, true);\n  p = RoughEase.prototype = new _TweenLite.Ease();\n  p.constructor = RoughEase;\n  p.getRatio = function (p) {\n    var pnt = this._prev;\n    if (p > pnt.t) {\n      while (pnt.next && p >= pnt.t) {\n        pnt = pnt.next;\n      }\n      pnt = pnt.prev;\n    } else {\n      while (pnt.prev && p <= pnt.t) {\n        pnt = pnt.prev;\n      }\n    }\n    this._prev = pnt;\n    return pnt.v + (p - pnt.t) / pnt.gap * pnt.c;\n  };\n  p.config = function (vars) {\n    return new RoughEase(vars);\n  };\n  RoughEase.ease = new RoughEase();\n\n  //Bounce\n  _wrap('Bounce', _create('BounceOut', function (p) {\n    if (p < 1 / 2.75) {\n      return 7.5625 * p * p;\n    } else if (p < 2 / 2.75) {\n      return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\n    } else if (p < 2.5 / 2.75) {\n      return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\n    }\n    return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\n  }), _create('BounceIn', function (p) {\n    if ((p = 1 - p) < 1 / 2.75) {\n      return 1 - 7.5625 * p * p;\n    } else if (p < 2 / 2.75) {\n      return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);\n    } else if (p < 2.5 / 2.75) {\n      return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);\n    }\n    return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);\n  }), _create('BounceInOut', function (p) {\n    var invert = p < 0.5;\n    if (invert) {\n      p = 1 - p * 2;\n    } else {\n      p = p * 2 - 1;\n    }\n    if (p < 1 / 2.75) {\n      p = 7.5625 * p * p;\n    } else if (p < 2 / 2.75) {\n      p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\n    } else if (p < 2.5 / 2.75) {\n      p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\n    } else {\n      p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\n    }\n    return invert ? (1 - p) * 0.5 : p * 0.5 + 0.5;\n  }));\n\n  //CIRC\n  _wrap('Circ', _create('CircOut', function (p) {\n    return Math.sqrt(1 - (p = p - 1) * p);\n  }), _create('CircIn', function (p) {\n    return -(Math.sqrt(1 - p * p) - 1);\n  }), _create('CircInOut', function (p) {\n    return (p *= 2) < 1 ? -0.5 * (Math.sqrt(1 - p * p) - 1) : 0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);\n  }));\n\n  //Elastic\n  _createElastic = function _createElastic(n, f, def) {\n    var C = _class('easing.' + n, function (amplitude, period) {\n      this._p1 = amplitude >= 1 ? amplitude : 1; //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.\n      this._p2 = (period || def) / (amplitude < 1 ? amplitude : 1);\n      this._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);\n      this._p2 = _2PI / this._p2; //precalculate to optimize\n    }, true),\n        p = C.prototype = new _TweenLite.Ease();\n    p.constructor = C;\n    p.getRatio = f;\n    p.config = function (amplitude, period) {\n      return new C(amplitude, period);\n    };\n    return C;\n  };\n  _wrap('Elastic', _createElastic('ElasticOut', function (p) {\n    return this._p1 * Math.pow(2, -10 * p) * Math.sin((p - this._p3) * this._p2) + 1;\n  }, 0.3), _createElastic('ElasticIn', function (p) {\n    return -(this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2));\n  }, 0.3), _createElastic('ElasticInOut', function (p) {\n    return (p *= 2) < 1 ? -0.5 * (this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2)) : this._p1 * Math.pow(2, -10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2) * 0.5 + 1;\n  }, 0.45));\n\n  //Expo\n  _wrap('Expo', _create('ExpoOut', function (p) {\n    return 1 - Math.pow(2, -10 * p);\n  }), _create('ExpoIn', function (p) {\n    return Math.pow(2, 10 * (p - 1)) - 0.001;\n  }), _create('ExpoInOut', function (p) {\n    return (p *= 2) < 1 ? 0.5 * Math.pow(2, 10 * (p - 1)) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n  }));\n\n  //Sine\n  _wrap('Sine', _create('SineOut', function (p) {\n    return Math.sin(p * _HALF_PI);\n  }), _create('SineIn', function (p) {\n    return -Math.cos(p * _HALF_PI) + 1;\n  }), _create('SineInOut', function (p) {\n    return -0.5 * (Math.cos(Math.PI * p) - 1);\n  }));\n\n  _class('easing.EaseLookup', {\n    find: function find(s) {\n      return _TweenLite.Ease.map[s];\n    }\n  }, true);\n\n  //register the non-standard eases\n  _easeReg(w.SlowMo, 'SlowMo', 'ease,');\n  _easeReg(RoughEase, 'RoughEase', 'ease,');\n  _easeReg(SteppedEase, 'SteppedEase', 'ease,');\n\n  return Back;\n}, true); /*!\r\n           * VERSION: 1.16.1\r\n           * DATE: 2018-08-27\r\n           * UPDATES AND DOCS AT: http://greensock.com\r\n           *\r\n           * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\r\n           * This work is subject to the terms at http://greensock.com/standard-license or for\r\n           * Club GreenSock members, the software agreement that was issued with your membership.\r\n           * \r\n           * @author: Jack Doyle, jack@greensock.com\r\n           **/\n\nvar Back = exports.Back = _TweenLite.globals.Back;\nvar Elastic = exports.Elastic = _TweenLite.globals.Elastic;\nvar Bounce = exports.Bounce = _TweenLite.globals.Bounce;\nvar RoughEase = exports.RoughEase = _TweenLite.globals.RoughEase;\nvar SlowMo = exports.SlowMo = _TweenLite.globals.SlowMo;\nvar SteppedEase = exports.SteppedEase = _TweenLite.globals.SteppedEase;\nvar Circ = exports.Circ = _TweenLite.globals.Circ;\nvar Expo = exports.Expo = _TweenLite.globals.Expo;\nvar Sine = exports.Sine = _TweenLite.globals.Sine;\nvar ExpoScaleEase = exports.ExpoScaleEase = _TweenLite.globals.ExpoScaleEase;\nexports.Linear = _TweenLite.Linear;\nexports.Power0 = _TweenLite.Power0;\nexports.Power1 = _TweenLite.Power1;\nexports.Power2 = _TweenLite.Power2;\nexports.Power3 = _TweenLite.Power3;\nexports.Power4 = _TweenLite.Power4;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.p = exports._roundLinkedList = exports._getRoundFunc = exports.RoundPropsPlugin = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /*!\r\n                                                                                                                                                                                                                                                                               * VERSION: 1.6.0\r\n                                                                                                                                                                                                                                                                               * DATE: 2018-08-27\r\n                                                                                                                                                                                                                                                                               * UPDATES AND DOCS AT: http://greensock.com\r\n                                                                                                                                                                                                                                                                               *\r\n                                                                                                                                                                                                                                                                               * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\r\n                                                                                                                                                                                                                                                                               * This work is subject to the terms at http://greensock.com/standard-license or for\r\n                                                                                                                                                                                                                                                                               * Club GreenSock members, the software agreement that was issued with your membership.\r\n                                                                                                                                                                                                                                                                               * \r\n                                                                                                                                                                                                                                                                               * @author: Jack Doyle, jack@greensock.com\r\n                                                                                                                                                                                                                                                                               **/\n\n\nvar _TweenLite = __webpack_require__(1);\n\nvar RoundPropsPlugin = exports.RoundPropsPlugin = _TweenLite._gsScope._gsDefine.plugin({\n  propName: 'roundProps',\n  version: '1.7.0',\n  priority: -1,\n  API: 2,\n\n  //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n  init: function init(target, value, tween) {\n    this._tween = tween;\n    return true;\n  }\n\n}),\n    _getRoundFunc = exports._getRoundFunc = function _getRoundFunc(v) {\n  //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.\n  var p = v < 1 ? Math.pow(10, (v + '').length - 2) : 1; //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed()\n  return function (n) {\n    return (Math.round(n / v) * v * p | 0) / p;\n  };\n},\n    _roundLinkedList = exports._roundLinkedList = function _roundLinkedList(node, mod) {\n  while (node) {\n    if (!node.f && !node.blob) {\n      node.m = mod || Math.round;\n    }\n    node = node._next;\n  }\n},\n    p = exports.p = RoundPropsPlugin.prototype;\n\np._onInitAllProps = function () {\n  var tween = this._tween,\n      rp = tween.vars.roundProps,\n      lookup = {},\n      rpt = tween._propLookup.roundProps,\n      pt,\n      next,\n      i,\n      p;\n  if ((typeof rp === 'undefined' ? 'undefined' : _typeof(rp)) === 'object' && !rp.push) {\n    for (p in rp) {\n      lookup[p] = _getRoundFunc(rp[p]);\n    }\n  } else {\n    if (typeof rp === 'string') {\n      rp = rp.split(',');\n    }\n    i = rp.length;\n    while (--i > -1) {\n      lookup[rp[i]] = Math.round;\n    }\n  }\n\n  for (p in lookup) {\n    pt = tween._firstPT;\n    while (pt) {\n      next = pt._next; //record here, because it may get removed\n      if (pt.pg) {\n        pt.t._mod(lookup);\n      } else if (pt.n === p) {\n        if (pt.f === 2 && pt.t) {\n          //a blob (text containing multiple numeric values)\n          _roundLinkedList(pt.t._firstPT, lookup[p]);\n        } else {\n          this._add(pt.t, p, pt.s, pt.c, lookup[p]);\n          //remove from linked list\n          if (next) {\n            next._prev = pt._prev;\n          }\n          if (pt._prev) {\n            pt._prev._next = next;\n          } else if (tween._firstPT === pt) {\n            tween._firstPT = next;\n          }\n          pt._next = pt._prev = null;\n          tween._propLookup[p] = rpt;\n        }\n      }\n      pt = next;\n    }\n  }\n  return false;\n};\n\np._add = function (target, p, s, c, mod) {\n  this._addTween(target, p, s, s + c, p, mod || Math.round);\n  this._overwriteProps.push(p);\n};\n\nexports.default = RoundPropsPlugin;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2xpYnMvZ3NhcC9lc20vUm91bmRQcm9wc1BsdWdpbi5qcz83YTE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxyXG4gKiBWRVJTSU9OOiAxLjYuMFxyXG4gKiBEQVRFOiAyMDE4LTA4LTI3XHJcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly9ncmVlbnNvY2suY29tXHJcbiAqXHJcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwOC0yMDE4LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIFRoaXMgd29yayBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxyXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgc29mdHdhcmUgYWdyZWVtZW50IHRoYXQgd2FzIGlzc3VlZCB3aXRoIHlvdXIgbWVtYmVyc2hpcC5cclxuICogXHJcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxyXG4gKiovXHJcbmltcG9ydCB7IF9nc1Njb3BlIH0gZnJvbSAnLi9Ud2VlbkxpdGUuanMnO1xyXG5cclxuZXhwb3J0IHZhciBSb3VuZFByb3BzUGx1Z2luID0gX2dzU2NvcGUuX2dzRGVmaW5lLnBsdWdpbih7XHJcbiAgICBwcm9wTmFtZTogJ3JvdW5kUHJvcHMnLFxyXG4gICAgdmVyc2lvbjogJzEuNy4wJyxcclxuICAgIHByaW9yaXR5OiAtMSxcclxuICAgIEFQSTogMixcclxuXHJcbiAgICAvL2NhbGxlZCB3aGVuIHRoZSB0d2VlbiByZW5kZXJzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpcyBpcyB3aGVyZSBpbml0aWFsIHZhbHVlcyBzaG91bGQgYmUgcmVjb3JkZWQgYW5kIGFueSBzZXR1cCByb3V0aW5lcyBzaG91bGQgcnVuLlxyXG4gICAgaW5pdDogZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSwgdHdlZW4pIHtcclxuICAgICAgdGhpcy5fdHdlZW4gPSB0d2VlbjtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gIH0pLFxyXG4gIF9nZXRSb3VuZEZ1bmMgPSBmdW5jdGlvbih2KSB7IC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cclxuICAgIHZhciBwID0gdiA8IDEgPyBNYXRoLnBvdygxMCwgKHYgKyAnJykubGVuZ3RoIC0gMikgOiAxOyAvL3RvIGF2b2lkIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChsaWtlIDI0ICogMC4xID09IDIuNDAwMDAwMDAwMDAwMDAwNCksIHdlIGNob3Agb2ZmIGF0IGEgc3BlY2lmaWMgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIChtdWNoIGZhc3RlciB0aGFuIHRvRml4ZWQoKVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG4pIHtcclxuICAgICAgcmV0dXJuICgoTWF0aC5yb3VuZChuIC8gdikgKiB2ICogcCkgfCAwKSAvIHA7XHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgX3JvdW5kTGlua2VkTGlzdCA9IGZ1bmN0aW9uKG5vZGUsIG1vZCkge1xyXG4gICAgd2hpbGUgKG5vZGUpIHtcclxuICAgICAgaWYgKCFub2RlLmYgJiYgIW5vZGUuYmxvYikge1xyXG4gICAgICAgIG5vZGUubSA9IG1vZCB8fCBNYXRoLnJvdW5kO1xyXG4gICAgICB9XHJcbiAgICAgIG5vZGUgPSBub2RlLl9uZXh0O1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgcCA9IFJvdW5kUHJvcHNQbHVnaW4ucHJvdG90eXBlO1xyXG5cclxucC5fb25Jbml0QWxsUHJvcHMgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgdHdlZW4gPSB0aGlzLl90d2VlbixcclxuICAgIHJwID0gdHdlZW4udmFycy5yb3VuZFByb3BzLFxyXG4gICAgbG9va3VwID0ge30sXHJcbiAgICBycHQgPSB0d2Vlbi5fcHJvcExvb2t1cC5yb3VuZFByb3BzLFxyXG4gICAgcHQsIG5leHQsIGksIHA7XHJcbiAgaWYgKHR5cGVvZihycCkgPT09ICdvYmplY3QnICYmICFycC5wdXNoKSB7XHJcbiAgICBmb3IgKHAgaW4gcnApIHtcclxuICAgICAgbG9va3VwW3BdID0gX2dldFJvdW5kRnVuYyhycFtwXSk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmICh0eXBlb2YocnApID09PSAnc3RyaW5nJykge1xyXG4gICAgICBycCA9IHJwLnNwbGl0KCcsJyk7XHJcbiAgICB9XHJcbiAgICBpID0gcnAubGVuZ3RoO1xyXG4gICAgd2hpbGUgKC0taSA+IC0xKSB7XHJcbiAgICAgIGxvb2t1cFtycFtpXV0gPSBNYXRoLnJvdW5kO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZm9yIChwIGluIGxvb2t1cCkge1xyXG4gICAgcHQgPSB0d2Vlbi5fZmlyc3RQVDtcclxuICAgIHdoaWxlIChwdCkge1xyXG4gICAgICBuZXh0ID0gcHQuX25leHQ7IC8vcmVjb3JkIGhlcmUsIGJlY2F1c2UgaXQgbWF5IGdldCByZW1vdmVkXHJcbiAgICAgIGlmIChwdC5wZykge1xyXG4gICAgICAgIHB0LnQuX21vZChsb29rdXApO1xyXG4gICAgICB9IGVsc2UgaWYgKHB0Lm4gPT09IHApIHtcclxuICAgICAgICBpZiAocHQuZiA9PT0gMiAmJiBwdC50KSB7IC8vYSBibG9iICh0ZXh0IGNvbnRhaW5pbmcgbXVsdGlwbGUgbnVtZXJpYyB2YWx1ZXMpXHJcbiAgICAgICAgICBfcm91bmRMaW5rZWRMaXN0KHB0LnQuX2ZpcnN0UFQsIGxvb2t1cFtwXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuX2FkZChwdC50LCBwLCBwdC5zLCBwdC5jLCBsb29rdXBbcF0pO1xyXG4gICAgICAgICAgLy9yZW1vdmUgZnJvbSBsaW5rZWQgbGlzdFxyXG4gICAgICAgICAgaWYgKG5leHQpIHtcclxuICAgICAgICAgICAgbmV4dC5fcHJldiA9IHB0Ll9wcmV2O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHB0Ll9wcmV2KSB7XHJcbiAgICAgICAgICAgIHB0Ll9wcmV2Ll9uZXh0ID0gbmV4dDtcclxuICAgICAgICAgIH0gZWxzZSBpZiAodHdlZW4uX2ZpcnN0UFQgPT09IHB0KSB7XHJcbiAgICAgICAgICAgIHR3ZWVuLl9maXJzdFBUID0gbmV4dDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHB0Ll9uZXh0ID0gcHQuX3ByZXYgPSBudWxsO1xyXG4gICAgICAgICAgdHdlZW4uX3Byb3BMb29rdXBbcF0gPSBycHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHB0ID0gbmV4dDtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxucC5fYWRkID0gZnVuY3Rpb24odGFyZ2V0LCBwLCBzLCBjLCBtb2QpIHtcclxuICB0aGlzLl9hZGRUd2Vlbih0YXJnZXQsIHAsIHMsIHMgKyBjLCBwLCBtb2QgfHwgTWF0aC5yb3VuZCk7XHJcbiAgdGhpcy5fb3ZlcndyaXRlUHJvcHMucHVzaChwKTtcclxufTtcclxuXHJcbmV4cG9ydCB7IFJvdW5kUHJvcHNQbHVnaW4gYXMgZGVmYXVsdCB9O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL2xpYnMvZ3NhcC9lc20vUm91bmRQcm9wc1BsdWdpbi5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7O0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVhBO0FBQUE7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFsQkE7QUFvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUExQkE7QUFDQTtBQTRCQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.TimelineLite = exports.TimelineMax = undefined;\n\nvar _TweenLite = __webpack_require__(1);\n\nvar _TweenLite2 = _interopRequireDefault(_TweenLite);\n\nvar _TimelineLite = __webpack_require__(6);\n\nvar _TimelineLite2 = _interopRequireDefault(_TimelineLite);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*!\r\n * VERSION: 2.0.2\r\n * DATE: 2018-08-27\r\n * UPDATES AND DOCS AT: http://greensock.com\r\n *\r\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\r\n * This work is subject to the terms at http://greensock.com/standard-license or for\r\n * Club GreenSock members, the software agreement that was issued with your membership.\r\n * \r\n * @author: Jack Doyle, jack@greensock.com\r\n */\n/* eslint-disable */\n_TweenLite._gsScope._gsDefine('TimelineMax', ['TimelineLite', 'TweenLite', 'easing.Ease'], function () {\n\n  var TimelineMax = function TimelineMax(vars) {\n    _TimelineLite2.default.call(this, vars);\n    this._repeat = this.vars.repeat || 0;\n    this._repeatDelay = this.vars.repeatDelay || 0;\n    this._cycle = 0;\n    this._yoyo = this.vars.yoyo === true;\n    this._dirty = true;\n  },\n      _tinyNum = 0.0000000001,\n      TweenLiteInternals = _TweenLite2.default._internals,\n      _lazyTweens = TweenLiteInternals.lazyTweens,\n      _lazyRender = TweenLiteInternals.lazyRender,\n      _globals = _TweenLite._gsScope._gsDefine.globals,\n      _easeNone = new _TweenLite.Ease(null, null, 1, 0),\n      p = TimelineMax.prototype = new _TimelineLite2.default();\n\n  p.constructor = TimelineMax;\n  p.kill()._gc = false;\n  TimelineMax.version = '2.0.2';\n\n  p.invalidate = function () {\n    this._yoyo = this.vars.yoyo === true;\n    this._repeat = this.vars.repeat || 0;\n    this._repeatDelay = this.vars.repeatDelay || 0;\n    this._uncache(true);\n    return _TimelineLite2.default.prototype.invalidate.call(this);\n  };\n\n  p.addCallback = function (callback, position, params, scope) {\n    return this.add(_TweenLite2.default.delayedCall(0, callback, params, scope), position);\n  };\n\n  p.removeCallback = function (callback, position) {\n    if (callback) {\n      if (position == null) {\n        this._kill(null, callback);\n      } else {\n        var a = this.getTweensOf(callback, false),\n            i = a.length,\n            time = this._parseTimeOrLabel(position);\n        while (--i > -1) {\n          if (a[i]._startTime === time) {\n            a[i]._enabled(false, false);\n          }\n        }\n      }\n    }\n    return this;\n  };\n\n  p.removePause = function (position) {\n    return this.removeCallback(_TimelineLite2.default._internals.pauseCallback, position);\n  };\n\n  p.tweenTo = function (position, vars) {\n    vars = vars || {};\n    var copy = { ease: _easeNone, useFrames: this.usesFrames(), immediateRender: false, lazy: false },\n        Engine = vars.repeat && _globals.TweenMax || _TweenLite2.default,\n        duration,\n        p,\n        t;\n    for (p in vars) {\n      copy[p] = vars[p];\n    }\n    copy.time = this._parseTimeOrLabel(position);\n    duration = Math.abs(Number(copy.time) - this._time) / this._timeScale || 0.001;\n    t = new Engine(this, duration, copy);\n    copy.onStart = function () {\n      t.target.paused(true);\n      if (t.vars.time !== t.target.time() && duration === t.duration() && !t.isFromTo) {\n        //don't make the duration zero - if it's supposed to be zero, don't worry because it's already initting the tween and will complete immediately, effectively making the duration zero anyway. If we make duration zero, the tween won't run at all.\n        t.duration(Math.abs(t.vars.time - t.target.time()) / t.target._timeScale).render(t.time(), true, true); //render() right away to ensure that things look right, especially in the case of .tweenTo(0).\n      }\n      if (vars.onStart) {\n        //in case the user had an onStart in the vars - we don't want to overwrite it.\n        vars.onStart.apply(vars.onStartScope || vars.callbackScope || t, vars.onStartParams || []); //don't use t._callback(\"onStart\") or it'll point to the copy.onStart and we'll get a recursion error.\n      }\n    };\n    return t;\n  };\n\n  p.tweenFromTo = function (fromPosition, toPosition, vars) {\n    vars = vars || {};\n    fromPosition = this._parseTimeOrLabel(fromPosition);\n    vars.startAt = { onComplete: this.seek, onCompleteParams: [fromPosition], callbackScope: this };\n    vars.immediateRender = vars.immediateRender !== false;\n    var t = this.tweenTo(toPosition, vars);\n    t.isFromTo = 1; //to ensure we don't mess with the duration in the onStart (we've got the start and end values here, so lock it in)\n    return t.duration(Math.abs(t.vars.time - fromPosition) / this._timeScale || 0.001);\n  };\n\n  p.render = function (time, suppressEvents, force) {\n    if (this._gc) {\n      this._enabled(true, false);\n    }\n    var prevTime = this._time,\n        totalDur = !this._dirty ? this._totalDuration : this.totalDuration(),\n        dur = this._duration,\n        prevTotalTime = this._totalTime,\n        prevStart = this._startTime,\n        prevTimeScale = this._timeScale,\n        prevRawPrevTime = this._rawPrevTime,\n        prevPaused = this._paused,\n        prevCycle = this._cycle,\n        tween,\n        isComplete,\n        next,\n        callback,\n        internalForce,\n        cycleDuration,\n        pauseTween,\n        curTime;\n    if (prevTime !== this._time) {\n      //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).\n      time += this._time - prevTime;\n    }\n    if (time >= totalDur - 0.0000001 && time >= 0) {\n      //to work around occasional floating point math artifacts.\n      if (!this._locked) {\n        this._totalTime = totalDur;\n        this._cycle = this._repeat;\n      }\n      if (!this._reversed) if (!this._hasPausedChild()) {\n        isComplete = true;\n        callback = 'onComplete';\n        internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n        if (this._duration === 0) if (time <= 0 && time >= -0.0000001 || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum) if (prevRawPrevTime !== time && this._first) {\n          internalForce = true;\n          if (prevRawPrevTime > _tinyNum) {\n            callback = 'onReverseComplete';\n          }\n        }\n      }\n      this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n      if (this._yoyo && (this._cycle & 1) !== 0) {\n        this._time = time = 0;\n      } else {\n        this._time = dur;\n        time = dur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7. We cannot do less then 0.0001 because the same issue can occur when the duration is extremely large like 999999999999 in which case adding 0.00000001, for example, causes it to act like nothing was added.\n      }\n    } else if (time < 0.0000001) {\n      //to work around occasional floating point math artifacts, round super small values to 0.\n      if (!this._locked) {\n        this._totalTime = this._cycle = 0;\n      }\n      this._time = 0;\n      if (prevTime !== 0 || dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || time < 0 && prevRawPrevTime >= 0) && !this._locked) {\n        //edge case for checking time < 0 && prevRawPrevTime >= 0: a zero-duration fromTo() tween inside a zero-duration timeline (yeah, very rare)\n        callback = 'onReverseComplete';\n        isComplete = this._reversed;\n      }\n      if (time < 0) {\n        this._active = false;\n        if (this._timeline.autoRemoveChildren && this._reversed) {\n          internalForce = isComplete = true;\n          callback = 'onReverseComplete';\n        } else if (prevRawPrevTime >= 0 && this._first) {\n          //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.\n          internalForce = true;\n        }\n        this._rawPrevTime = time;\n      } else {\n        this._rawPrevTime = dur || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n        if (time === 0 && isComplete) {\n          //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).\n          tween = this._first;\n          while (tween && tween._startTime === 0) {\n            if (!tween._duration) {\n              isComplete = false;\n            }\n            tween = tween._next;\n          }\n        }\n        time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)\n        if (!this._initted) {\n          internalForce = true;\n        }\n      }\n    } else {\n      if (dur === 0 && prevRawPrevTime < 0) {\n        //without this, zero-duration repeating timelines (like with a simple callback nested at the very beginning and a repeatDelay) wouldn't render the first time through.\n        internalForce = true;\n      }\n      this._time = this._rawPrevTime = time;\n      if (!this._locked) {\n        this._totalTime = time;\n        if (this._repeat !== 0) {\n          cycleDuration = dur + this._repeatDelay;\n          this._cycle = this._totalTime / cycleDuration >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but it gets reported as 0.79999999!)\n          if (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {\n            this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)\n          }\n          this._time = this._totalTime - this._cycle * cycleDuration;\n          if (this._yoyo) if ((this._cycle & 1) !== 0) {\n            this._time = dur - this._time;\n          }\n          if (this._time > dur) {\n            this._time = dur;\n            time = dur + 0.0001; //to avoid occasional floating point rounding error\n          } else if (this._time < 0) {\n            this._time = time = 0;\n          } else {\n            time = this._time;\n          }\n        }\n      }\n\n      if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {\n        time = this._time;\n        if (time >= prevTime || this._repeat && prevCycle !== this._cycle) {\n          tween = this._first;\n          while (tween && tween._startTime <= time && !pauseTween) {\n            if (!tween._duration) if (tween.data === 'isPause' && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {\n              pauseTween = tween;\n            }\n            tween = tween._next;\n          }\n        } else {\n          tween = this._last;\n          while (tween && tween._startTime >= time && !pauseTween) {\n            if (!tween._duration) if (tween.data === 'isPause' && tween._rawPrevTime > 0) {\n              pauseTween = tween;\n            }\n            tween = tween._prev;\n          }\n        }\n        if (pauseTween && pauseTween._startTime < dur) {\n          this._time = time = pauseTween._startTime;\n          this._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay);\n        }\n      }\n    }\n\n    if (this._cycle !== prevCycle) if (!this._locked) {\n      /*\r\n      make sure children at the end/beginning of the timeline are rendered properly. If, for example, \r\n      a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which\r\n      would get transated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there\r\n      could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So \r\n      we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must\r\n      ensure that zero-duration tweens at the very beginning or end of the TimelineMax work. \r\n      */\n      var backwards = this._yoyo && (prevCycle & 1) !== 0,\n          wrap = backwards === (this._yoyo && (this._cycle & 1) !== 0),\n          recTotalTime = this._totalTime,\n          recCycle = this._cycle,\n          recRawPrevTime = this._rawPrevTime,\n          recTime = this._time;\n\n      this._totalTime = prevCycle * dur;\n      if (this._cycle < prevCycle) {\n        backwards = !backwards;\n      } else {\n        this._totalTime += dur;\n      }\n      this._time = prevTime; //temporarily revert _time so that render() renders the children in the correct order. Without this, tweens won't rewind correctly. We could arhictect things in a \"cleaner\" way by splitting out the rendering queue into a separate method but for performance reasons, we kept it all inside this method.\n\n      this._rawPrevTime = dur === 0 ? prevRawPrevTime - 0.0001 : prevRawPrevTime;\n      this._cycle = prevCycle;\n      this._locked = true; //prevents changes to totalTime and skips repeat/yoyo behavior when we recursively call render()\n      prevTime = backwards ? 0 : dur;\n      this.render(prevTime, suppressEvents, dur === 0);\n      if (!suppressEvents) if (!this._gc) {\n        if (this.vars.onRepeat) {\n          this._cycle = recCycle; //in case the onRepeat alters the playhead or invalidates(), we shouldn't stay locked or use the previous cycle.\n          this._locked = false;\n          this._callback('onRepeat');\n        }\n      }\n      if (prevTime !== this._time) {\n        //in case there's a callback like onComplete in a nested tween/timeline that changes the playhead position, like via seek(), we should just abort.\n        return;\n      }\n      if (wrap) {\n        this._cycle = prevCycle; //if there's an onRepeat, we reverted this above, so make sure it's set properly again. We also unlocked in that scenario, so reset that too.\n        this._locked = true;\n        prevTime = backwards ? dur + 0.0001 : -0.0001;\n        this.render(prevTime, true, false);\n      }\n      this._locked = false;\n      if (this._paused && !prevPaused) {\n        //if the render() triggered callback that paused this timeline, we should abort (very rare, but possible)\n        return;\n      }\n      this._time = recTime;\n      this._totalTime = recTotalTime;\n      this._cycle = recCycle;\n      this._rawPrevTime = recRawPrevTime;\n    }\n\n    if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {\n      if (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) {\n        //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.\n        this._callback('onUpdate');\n      }\n      return;\n    } else if (!this._initted) {\n      this._initted = true;\n    }\n\n    if (!this._active) if (!this._paused && this._totalTime !== prevTotalTime && time > 0) {\n      this._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.\n    }\n\n    if (prevTotalTime === 0) if (this.vars.onStart) if (this._totalTime !== 0 || !this._totalDuration) if (!suppressEvents) {\n      this._callback('onStart');\n    }\n\n    curTime = this._time;\n    if (curTime >= prevTime) {\n      tween = this._first;\n      while (tween) {\n        next = tween._next; //record it here because the value could change after rendering...\n        if (curTime !== this._time || this._paused && !prevPaused) {\n          //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n          break;\n        } else if (tween._active || tween._startTime <= this._time && !tween._paused && !tween._gc) {\n          if (pauseTween === tween) {\n            this.pause();\n          }\n          if (!tween._reversed) {\n            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n          } else {\n            tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);\n          }\n        }\n        tween = next;\n      }\n    } else {\n      tween = this._last;\n      while (tween) {\n        next = tween._prev; //record it here because the value could change after rendering...\n        if (curTime !== this._time || this._paused && !prevPaused) {\n          //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n          break;\n        } else if (tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc) {\n          if (pauseTween === tween) {\n            pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.\n            while (pauseTween && pauseTween.endTime() > this._time) {\n              pauseTween.render(pauseTween._reversed ? pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale : (time - pauseTween._startTime) * pauseTween._timeScale, suppressEvents, force);\n              pauseTween = pauseTween._prev;\n            }\n            pauseTween = null;\n            this.pause();\n          }\n          if (!tween._reversed) {\n            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n          } else {\n            tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);\n          }\n        }\n        tween = next;\n      }\n    }\n\n    if (this._onUpdate) if (!suppressEvents) {\n      if (_lazyTweens.length) {\n        //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n        _lazyRender();\n      }\n      this._callback('onUpdate');\n    }\n    if (callback) if (!this._locked) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) {\n      //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate\n      if (isComplete) {\n        if (_lazyTweens.length) {\n          //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.\n          _lazyRender();\n        }\n        if (this._timeline.autoRemoveChildren) {\n          this._enabled(false, false);\n        }\n        this._active = false;\n      }\n      if (!suppressEvents && this.vars[callback]) {\n        this._callback(callback);\n      }\n    }\n  };\n\n  p.getActive = function (nested, tweens, timelines) {\n    if (nested == null) {\n      nested = true;\n    }\n    if (tweens == null) {\n      tweens = true;\n    }\n    if (timelines == null) {\n      timelines = false;\n    }\n    var a = [],\n        all = this.getChildren(nested, tweens, timelines),\n        cnt = 0,\n        l = all.length,\n        i,\n        tween;\n    for (i = 0; i < l; i++) {\n      tween = all[i];\n      if (tween.isActive()) {\n        a[cnt++] = tween;\n      }\n    }\n    return a;\n  };\n\n  p.getLabelAfter = function (time) {\n    if (!time) if (time !== 0) {\n      //faster than isNan()\n      time = this._time;\n    }\n    var labels = this.getLabelsArray(),\n        l = labels.length,\n        i;\n    for (i = 0; i < l; i++) {\n      if (labels[i].time > time) {\n        return labels[i].name;\n      }\n    }\n    return null;\n  };\n\n  p.getLabelBefore = function (time) {\n    if (time == null) {\n      time = this._time;\n    }\n    var labels = this.getLabelsArray(),\n        i = labels.length;\n    while (--i > -1) {\n      if (labels[i].time < time) {\n        return labels[i].name;\n      }\n    }\n    return null;\n  };\n\n  p.getLabelsArray = function () {\n    var a = [],\n        cnt = 0,\n        p;\n    for (p in this._labels) {\n      a[cnt++] = { time: this._labels[p], name: p };\n    }\n    a.sort(function (a, b) {\n      return a.time - b.time;\n    });\n    return a;\n  };\n\n  p.invalidate = function () {\n    this._locked = false; //unlock and set cycle in case invalidate() is called from inside an onRepeat\n    return _TimelineLite2.default.prototype.invalidate.call(this);\n  };\n\n  //---- GETTERS / SETTERS -------------------------------------------------------------------------------------------------------\n\n  p.progress = function (value, suppressEvents) {\n    return !arguments.length ? this._time / this.duration() || 0 : this.totalTime(this.duration() * (this._yoyo && (this._cycle & 1) !== 0 ? 1 - value : value) + this._cycle * (this._duration + this._repeatDelay), suppressEvents);\n  };\n\n  p.totalProgress = function (value, suppressEvents) {\n    return !arguments.length ? this._totalTime / this.totalDuration() || 0 : this.totalTime(this.totalDuration() * value, suppressEvents);\n  };\n\n  p.totalDuration = function (value) {\n    if (!arguments.length) {\n      if (this._dirty) {\n        _TimelineLite2.default.prototype.totalDuration.call(this); //just forces refresh\n        //Instead of Infinity, we use 999999999999 so that we can accommodate reverses.\n        this._totalDuration = this._repeat === -1 ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat;\n      }\n      return this._totalDuration;\n    }\n    return this._repeat === -1 || !value ? this : this.timeScale(this.totalDuration() / value);\n  };\n\n  p.time = function (value, suppressEvents) {\n    if (!arguments.length) {\n      return this._time;\n    }\n    if (this._dirty) {\n      this.totalDuration();\n    }\n    if (value > this._duration) {\n      value = this._duration;\n    }\n    if (this._yoyo && (this._cycle & 1) !== 0) {\n      value = this._duration - value + this._cycle * (this._duration + this._repeatDelay);\n    } else if (this._repeat !== 0) {\n      value += this._cycle * (this._duration + this._repeatDelay);\n    }\n    return this.totalTime(value, suppressEvents);\n  };\n\n  p.repeat = function (value) {\n    if (!arguments.length) {\n      return this._repeat;\n    }\n    this._repeat = value;\n    return this._uncache(true);\n  };\n\n  p.repeatDelay = function (value) {\n    if (!arguments.length) {\n      return this._repeatDelay;\n    }\n    this._repeatDelay = value;\n    return this._uncache(true);\n  };\n\n  p.yoyo = function (value) {\n    if (!arguments.length) {\n      return this._yoyo;\n    }\n    this._yoyo = value;\n    return this;\n  };\n\n  p.currentLabel = function (value) {\n    if (!arguments.length) {\n      return this.getLabelBefore(this._time + 0.00000001);\n    }\n    return this.seek(value, true);\n  };\n\n  return TimelineMax;\n}, true);\n\nvar TimelineMax = exports.TimelineMax = _TweenLite.globals.TimelineMax;\nexports.TimelineLite = _TimelineLite2.default;\nexports.default = TimelineMax;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * matchesSelector v2.0.2\n * matchesSelector( element, '.selector' )\n * MIT license\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n\n( function( window, factory ) {\n  /*global define: false, module: false */\n  'use strict';\n  // universal module definition\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.matchesSelector = factory();\n  }\n\n}( window, function factory() {\n  'use strict';\n\n  var matchesMethod = ( function() {\n    var ElemProto = window.Element.prototype;\n    // check for the standard method name first\n    if ( ElemProto.matches ) {\n      return 'matches';\n    }\n    // check un-prefixed\n    if ( ElemProto.matchesSelector ) {\n      return 'matchesSelector';\n    }\n    // check vendor prefixes\n    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];\n\n    for ( var i=0; i < prefixes.length; i++ ) {\n      var prefix = prefixes[i];\n      var method = prefix + 'MatchesSelector';\n      if ( ElemProto[ method ] ) {\n        return method;\n      }\n    }\n  })();\n\n  return function matchesSelector( elem, selector ) {\n    return elem[ matchesMethod ]( selector );\n  };\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRDovdml0YWxpay9rbGltb3Yvfi9kZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3IuanM/Zjg3YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIG1hdGNoZXNTZWxlY3RvciB2Mi4wLjJcbiAqIG1hdGNoZXNTZWxlY3RvciggZWxlbWVudCwgJy5zZWxlY3RvcicgKVxuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3IgPSBmYWN0b3J5KCk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIG1hdGNoZXNNZXRob2QgPSAoIGZ1bmN0aW9uKCkge1xuICAgIHZhciBFbGVtUHJvdG8gPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGU7XG4gICAgLy8gY2hlY2sgZm9yIHRoZSBzdGFuZGFyZCBtZXRob2QgbmFtZSBmaXJzdFxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXMgKSB7XG4gICAgICByZXR1cm4gJ21hdGNoZXMnO1xuICAgIH1cbiAgICAvLyBjaGVjayB1bi1wcmVmaXhlZFxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXNTZWxlY3RvciApIHtcbiAgICAgIHJldHVybiAnbWF0Y2hlc1NlbGVjdG9yJztcbiAgICB9XG4gICAgLy8gY2hlY2sgdmVuZG9yIHByZWZpeGVzXG4gICAgdmFyIHByZWZpeGVzID0gWyAnd2Via2l0JywgJ21veicsICdtcycsICdvJyBdO1xuXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrICkge1xuICAgICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgICAgdmFyIG1ldGhvZCA9IHByZWZpeCArICdNYXRjaGVzU2VsZWN0b3InO1xuICAgICAgaWYgKCBFbGVtUHJvdG9bIG1ldGhvZCBdICkge1xuICAgICAgICByZXR1cm4gbWV0aG9kO1xuICAgICAgfVxuICAgIH1cbiAgfSkoKTtcblxuICByZXR1cm4gZnVuY3Rpb24gbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgICByZXR1cm4gZWxlbVsgbWF0Y2hlc01ldGhvZCBdKCBzZWxlY3RvciApO1xuICB9O1xuXG59KSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBEOi92aXRhbGlrL2tsaW1vdi9+L2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3Rvci5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * EvEmitter v1.1.0\n * Lil' event emitter\n * MIT License\n */\n\n/* jshint unused: true, undef: true, strict: true */\n\n( function( global, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, window */\n  if ( true ) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory();\n  } else {\n    // Browser globals\n    global.EvEmitter = factory();\n  }\n\n}( typeof window != 'undefined' ? window : this, function() {\n\n\"use strict\";\n\nfunction EvEmitter() {}\n\nvar proto = EvEmitter.prototype;\n\nproto.on = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // set events hash\n  var events = this._events = this._events || {};\n  // set listeners array\n  var listeners = events[ eventName ] = events[ eventName ] || [];\n  // only add once\n  if ( listeners.indexOf( listener ) == -1 ) {\n    listeners.push( listener );\n  }\n\n  return this;\n};\n\nproto.once = function( eventName, listener ) {\n  if ( !eventName || !listener ) {\n    return;\n  }\n  // add event\n  this.on( eventName, listener );\n  // set once flag\n  // set onceEvents hash\n  var onceEvents = this._onceEvents = this._onceEvents || {};\n  // set onceListeners object\n  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};\n  // set flag\n  onceListeners[ listener ] = true;\n\n  return this;\n};\n\nproto.off = function( eventName, listener ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  var index = listeners.indexOf( listener );\n  if ( index != -1 ) {\n    listeners.splice( index, 1 );\n  }\n\n  return this;\n};\n\nproto.emitEvent = function( eventName, args ) {\n  var listeners = this._events && this._events[ eventName ];\n  if ( !listeners || !listeners.length ) {\n    return;\n  }\n  // copy over to avoid interference if .off() in listener\n  listeners = listeners.slice(0);\n  args = args || [];\n  // once stuff\n  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];\n\n  for ( var i=0; i < listeners.length; i++ ) {\n    var listener = listeners[i]\n    var isOnce = onceListeners && onceListeners[ listener ];\n    if ( isOnce ) {\n      // remove listener\n      // remove before trigger to prevent recursion\n      this.off( eventName, listener );\n      // unset once flag\n      delete onceListeners[ listener ];\n    }\n    // trigger listener\n    listener.apply( this, args );\n  }\n\n  return this;\n};\n\nproto.allOff = function() {\n  delete this._events;\n  delete this._onceEvents;\n};\n\nreturn EvEmitter;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRDovdml0YWxpay9rbGltb3Yvfi9ldi1lbWl0dGVyL2V2LWVtaXR0ZXIuanM/NGFhMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV2RW1pdHRlciB2MS4xLjBcbiAqIExpbCcgZXZlbnQgZW1pdHRlclxuICogTUlUIExpY2Vuc2VcbiAqL1xuXG4vKiBqc2hpbnQgdW51c2VkOiB0cnVlLCB1bmRlZjogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXG5cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHdpbmRvdyAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRCAtIFJlcXVpcmVKU1xuICAgIGRlZmluZSggZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGdsb2JhbC5FdkVtaXR0ZXIgPSBmYWN0b3J5KCk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gRXZFbWl0dGVyKCkge31cblxudmFyIHByb3RvID0gRXZFbWl0dGVyLnByb3RvdHlwZTtcblxucHJvdG8ub24gPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2V0IGV2ZW50cyBoYXNoXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIC8vIHNldCBsaXN0ZW5lcnMgYXJyYXlcbiAgdmFyIGxpc3RlbmVycyA9IGV2ZW50c1sgZXZlbnROYW1lIF0gPSBldmVudHNbIGV2ZW50TmFtZSBdIHx8IFtdO1xuICAvLyBvbmx5IGFkZCBvbmNlXG4gIGlmICggbGlzdGVuZXJzLmluZGV4T2YoIGxpc3RlbmVyICkgPT0gLTEgKSB7XG4gICAgbGlzdGVuZXJzLnB1c2goIGxpc3RlbmVyICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9uY2UgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gYWRkIGV2ZW50XG4gIHRoaXMub24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKTtcbiAgLy8gc2V0IG9uY2UgZmxhZ1xuICAvLyBzZXQgb25jZUV2ZW50cyBoYXNoXG4gIHZhciBvbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgfHwge307XG4gIC8vIHNldCBvbmNlTGlzdGVuZXJzIG9iamVjdFxuICB2YXIgb25jZUxpc3RlbmVycyA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gfHwge307XG4gIC8vIHNldCBmbGFnXG4gIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF0gPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8ub2ZmID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gY29weSBvdmVyIHRvIGF2b2lkIGludGVyZmVyZW5jZSBpZiAub2ZmKCkgaW4gbGlzdGVuZXJcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKDApO1xuICBhcmdzID0gYXJncyB8fCBbXTtcbiAgLy8gb25jZSBzdHVmZlxuICB2YXIgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XG5cbiAgZm9yICggdmFyIGk9MDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV1cbiAgICB2YXIgaXNPbmNlID0gb25jZUxpc3RlbmVycyAmJiBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIGlmICggaXNPbmNlICkge1xuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgICAvLyByZW1vdmUgYmVmb3JlIHRyaWdnZXIgdG8gcHJldmVudCByZWN1cnNpb25cbiAgICAgIHRoaXMub2ZmKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcbiAgICAgIGRlbGV0ZSBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIH1cbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXG4gICAgbGlzdGVuZXIuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uYWxsT2ZmID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gIGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzO1xufTtcblxucmV0dXJuIEV2RW1pdHRlcjtcblxufSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gRDovdml0YWxpay9rbGltb3Yvfi9ldi1lbWl0dGVyL2V2LWVtaXR0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Fizzy UI utils v2.0.7\n * MIT license\n */\n\n/*jshint browser: true, undef: true, unused: true, strict: true */\n\n( function( window, factory ) {\n  // universal module definition\n  /*jshint strict: false */ /*globals define, module, require */\n\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __webpack_require__(16)\n    ], __WEBPACK_AMD_DEFINE_RESULT__ = function( matchesSelector ) {\n      return factory( window, matchesSelector );\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('desandro-matches-selector')\n    );\n  } else {\n    // browser global\n    window.fizzyUIUtils = factory(\n      window,\n      window.matchesSelector\n    );\n  }\n\n}( window, function factory( window, matchesSelector ) {\n\n'use strict';\n\nvar utils = {};\n\n// ----- extend ----- //\n\n// extends objects\nutils.extend = function( a, b ) {\n  for ( var prop in b ) {\n    a[ prop ] = b[ prop ];\n  }\n  return a;\n};\n\n// ----- modulo ----- //\n\nutils.modulo = function( num, div ) {\n  return ( ( num % div ) + div ) % div;\n};\n\n// ----- makeArray ----- //\n\nvar arraySlice = Array.prototype.slice;\n\n// turn element or nodeList into an array\nutils.makeArray = function( obj ) {\n  if ( Array.isArray( obj ) ) {\n    // use object if already an array\n    return obj;\n  }\n  // return empty array if undefined or null. #6\n  if ( obj === null || obj === undefined ) {\n    return [];\n  }\n\n  var isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';\n  if ( isArrayLike ) {\n    // convert nodeList to array\n    return arraySlice.call( obj );\n  }\n\n  // array of single index\n  return [ obj ];\n};\n\n// ----- removeFrom ----- //\n\nutils.removeFrom = function( ary, obj ) {\n  var index = ary.indexOf( obj );\n  if ( index != -1 ) {\n    ary.splice( index, 1 );\n  }\n};\n\n// ----- getParent ----- //\n\nutils.getParent = function( elem, selector ) {\n  while ( elem.parentNode && elem != document.body ) {\n    elem = elem.parentNode;\n    if ( matchesSelector( elem, selector ) ) {\n      return elem;\n    }\n  }\n};\n\n// ----- getQueryElement ----- //\n\n// use element as selector string\nutils.getQueryElement = function( elem ) {\n  if ( typeof elem == 'string' ) {\n    return document.querySelector( elem );\n  }\n  return elem;\n};\n\n// ----- handleEvent ----- //\n\n// enable .ontype to trigger from .addEventListener( elem, 'type' )\nutils.handleEvent = function( event ) {\n  var method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\n// ----- filterFindElements ----- //\n\nutils.filterFindElements = function( elems, selector ) {\n  // make array of elems\n  elems = utils.makeArray( elems );\n  var ffElems = [];\n\n  elems.forEach( function( elem ) {\n    // check that elem is an actual element\n    if ( !( elem instanceof HTMLElement ) ) {\n      return;\n    }\n    // add elem if no selector\n    if ( !selector ) {\n      ffElems.push( elem );\n      return;\n    }\n    // filter & find items if we have a selector\n    // filter\n    if ( matchesSelector( elem, selector ) ) {\n      ffElems.push( elem );\n    }\n    // find children\n    var childElems = elem.querySelectorAll( selector );\n    // concat childElems to filterFound array\n    for ( var i=0; i < childElems.length; i++ ) {\n      ffElems.push( childElems[i] );\n    }\n  });\n\n  return ffElems;\n};\n\n// ----- debounceMethod ----- //\n\nutils.debounceMethod = function( _class, methodName, threshold ) {\n  threshold = threshold || 100;\n  // original method\n  var method = _class.prototype[ methodName ];\n  var timeoutName = methodName + 'Timeout';\n\n  _class.prototype[ methodName ] = function() {\n    var timeout = this[ timeoutName ];\n    clearTimeout( timeout );\n\n    var args = arguments;\n    var _this = this;\n    this[ timeoutName ] = setTimeout( function() {\n      method.apply( _this, args );\n      delete _this[ timeoutName ];\n    }, threshold );\n  };\n};\n\n// ----- docReady ----- //\n\nutils.docReady = function( callback ) {\n  var readyState = document.readyState;\n  if ( readyState == 'complete' || readyState == 'interactive' ) {\n    // do async to allow for other scripts to run. metafizzy/flickity#441\n    setTimeout( callback );\n  } else {\n    document.addEventListener( 'DOMContentLoaded', callback );\n  }\n};\n\n// ----- htmlInit ----- //\n\n// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/\nutils.toDashed = function( str ) {\n  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {\n    return $1 + '-' + $2;\n  }).toLowerCase();\n};\n\nvar console = window.console;\n/**\n * allow user to initialize classes via [data-namespace] or .js-namespace class\n * htmlInit( Widget, 'widgetName' )\n * options are parsed from data-namespace-options\n */\nutils.htmlInit = function( WidgetClass, namespace ) {\n  utils.docReady( function() {\n    var dashedNamespace = utils.toDashed( namespace );\n    var dataAttr = 'data-' + dashedNamespace;\n    var dataAttrElems = document.querySelectorAll( '[' + dataAttr + ']' );\n    var jsDashElems = document.querySelectorAll( '.js-' + dashedNamespace );\n    var elems = utils.makeArray( dataAttrElems )\n      .concat( utils.makeArray( jsDashElems ) );\n    var dataOptionsAttr = dataAttr + '-options';\n    var jQuery = window.jQuery;\n\n    elems.forEach( function( elem ) {\n      var attr = elem.getAttribute( dataAttr ) ||\n        elem.getAttribute( dataOptionsAttr );\n      var options;\n      try {\n        options = attr && JSON.parse( attr );\n      } catch ( error ) {\n        // log error, do not initialize\n        if ( console ) {\n          console.error( 'Error parsing ' + dataAttr + ' on ' + elem.className +\n          ': ' + error );\n        }\n        return;\n      }\n      // initialize\n      var instance = new WidgetClass( elem, options );\n      // make available via $().data('namespace')\n      if ( jQuery ) {\n        jQuery.data( elem, namespace, instance );\n      }\n    });\n\n  });\n};\n\n// -----  ----- //\n\nreturn utils;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _utils = __webpack_require__(7);\n\nvar _constants = __webpack_require__(5);\n\nvar _svg4everybody = __webpack_require__(48);\n\nvar _svg4everybody2 = _interopRequireDefault(_svg4everybody);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _svg4everybody2.default)();\nif (!(0, _utils.TOUCH)()) _constants.BODY.addClass('no-touch');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL19jb21tb24uanM/MGRmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUT1VDSCB9IGZyb20gJy4vX3V0aWxzJztcclxuaW1wb3J0IHsgQk9EWSB9IGZyb20gJy4vX2NvbnN0YW50cyc7XHJcbmltcG9ydCBzdmc0ZXZlcnlib2R5IGZyb20gJ3N2ZzRldmVyeWJvZHknO1xyXG5cclxuc3ZnNGV2ZXJ5Ym9keSgpO1xyXG5pZiAoIVRPVUNIKCkpIEJPRFkuYWRkQ2xhc3MoJ25vLXRvdWNoJyk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvX2NvbW1vbi5qcyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7Ozs7O0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(24);\n\n__webpack_require__(28);\n\n__webpack_require__(27);\n\n__webpack_require__(26);\n\n__webpack_require__(8);\n\n__webpack_require__(23);\n\n__webpack_require__(30);\n\n__webpack_require__(25);\n\n__webpack_require__(29);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2NvbXBvbmVudHMvX2NvbXBvbmVudC5qcz9jNzZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9fYm9keS1vbmxvYWQuanMnO1xyXG5pbXBvcnQgJy4vX21lbnUtdG9nZ2xlLmpzJztcclxuaW1wb3J0ICcuL19tZW51LWhvdmVyLmpzJztcclxuaW1wb3J0ICcuL19mdWxscGFnZS5qcyc7XHJcbmltcG9ydCAnLi9fYW5pbWF0aW9uLWZ1bGxwYWdlLmpzJztcclxuaW1wb3J0ICcuL19hbmltYXRpb24tc2Nyb2xsLmpzJztcclxuaW1wb3J0ICcuL190b3AuanMnO1xyXG5pbXBvcnQgJy4vX2ZpbHRlci5qcyc7XHJcbmltcG9ydCAnLi9fc2xpZGVyLmpzJztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9jb21wb25lbnRzL19jb21wb25lbnQuanMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

eval("var indexOf = __webpack_require__(36);\n\nvar Object_keys = function (obj) {\n    if (Object.keys) return Object.keys(obj)\n    else {\n        var res = [];\n        for (var key in obj) res.push(key)\n        return res;\n    }\n};\n\nvar forEach = function (xs, fn) {\n    if (xs.forEach) return xs.forEach(fn)\n    else for (var i = 0; i < xs.length; i++) {\n        fn(xs[i], i, xs);\n    }\n};\n\nvar defineProp = (function() {\n    try {\n        Object.defineProperty({}, '_', {});\n        return function(obj, name, value) {\n            Object.defineProperty(obj, name, {\n                writable: true,\n                enumerable: false,\n                configurable: true,\n                value: value\n            })\n        };\n    } catch(e) {\n        return function(obj, name, value) {\n            obj[name] = value;\n        };\n    }\n}());\n\nvar globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',\n'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',\n'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',\n'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',\n'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];\n\nfunction Context() {}\nContext.prototype = {};\n\nvar Script = exports.Script = function NodeScript (code) {\n    if (!(this instanceof Script)) return new Script(code);\n    this.code = code;\n};\n\nScript.prototype.runInContext = function (context) {\n    if (!(context instanceof Context)) {\n        throw new TypeError(\"needs a 'context' argument.\");\n    }\n    \n    var iframe = document.createElement('iframe');\n    if (!iframe.style) iframe.style = {};\n    iframe.style.display = 'none';\n    \n    document.body.appendChild(iframe);\n    \n    var win = iframe.contentWindow;\n    var wEval = win.eval, wExecScript = win.execScript;\n\n    if (!wEval && wExecScript) {\n        // win.eval() magically appears when this is called in IE:\n        wExecScript.call(win, 'null');\n        wEval = win.eval;\n    }\n    \n    forEach(Object_keys(context), function (key) {\n        win[key] = context[key];\n    });\n    forEach(globals, function (key) {\n        if (context[key]) {\n            win[key] = context[key];\n        }\n    });\n    \n    var winKeys = Object_keys(win);\n\n    var res = wEval.call(win, this.code);\n    \n    forEach(Object_keys(win), function (key) {\n        // Avoid copying circular objects like `top` and `window` by only\n        // updating existing context properties or new properties in the `win`\n        // that was only introduced after the eval.\n        if (key in context || indexOf(winKeys, key) === -1) {\n            context[key] = win[key];\n        }\n    });\n\n    forEach(globals, function (key) {\n        if (!(key in context)) {\n            defineProp(context, key, win[key]);\n        }\n    });\n    \n    document.body.removeChild(iframe);\n    \n    return res;\n};\n\nScript.prototype.runInThisContext = function () {\n    return eval(this.code); // maybe...\n};\n\nScript.prototype.runInNewContext = function (context) {\n    var ctx = Script.createContext(context);\n    var res = this.runInContext(ctx);\n\n    forEach(Object_keys(ctx), function (key) {\n        context[key] = ctx[key];\n    });\n\n    return res;\n};\n\nforEach(Object_keys(Script.prototype), function (name) {\n    exports[name] = Script[name] = function (code) {\n        var s = Script(code);\n        return s[name].apply(s, [].slice.call(arguments, 1));\n    };\n});\n\nexports.createScript = function (code) {\n    return exports.Script(code);\n};\n\nexports.createContext = Script.createContext = function (context) {\n    var copy = new Context();\n    if(typeof context === 'object') {\n        forEach(Object_keys(context), function (key) {\n            copy[key] = context[key];\n        });\n    }\n    return copy;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRDovdml0YWxpay9rbGltb3Yvfi92bS1icm93c2VyaWZ5L2luZGV4LmpzPzc3ZmEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGluZGV4T2YgPSByZXF1aXJlKCdpbmRleG9mJyk7XG5cbnZhciBPYmplY3Rfa2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoT2JqZWN0LmtleXMpIHJldHVybiBPYmplY3Qua2V5cyhvYmopXG4gICAgZWxzZSB7XG4gICAgICAgIHZhciByZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgcmVzLnB1c2goa2V5KVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoID0gZnVuY3Rpb24gKHhzLCBmbikge1xuICAgIGlmICh4cy5mb3JFYWNoKSByZXR1cm4geHMuZm9yRWFjaChmbilcbiAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm4oeHNbaV0sIGksIHhzKTtcbiAgICB9XG59O1xuXG52YXIgZGVmaW5lUHJvcCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdfJywge30pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBvYmpbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG59KCkpO1xuXG52YXIgZ2xvYmFscyA9IFsnQXJyYXknLCAnQm9vbGVhbicsICdEYXRlJywgJ0Vycm9yJywgJ0V2YWxFcnJvcicsICdGdW5jdGlvbicsXG4nSW5maW5pdHknLCAnSlNPTicsICdNYXRoJywgJ05hTicsICdOdW1iZXInLCAnT2JqZWN0JywgJ1JhbmdlRXJyb3InLFxuJ1JlZmVyZW5jZUVycm9yJywgJ1JlZ0V4cCcsICdTdHJpbmcnLCAnU3ludGF4RXJyb3InLCAnVHlwZUVycm9yJywgJ1VSSUVycm9yJyxcbidkZWNvZGVVUkknLCAnZGVjb2RlVVJJQ29tcG9uZW50JywgJ2VuY29kZVVSSScsICdlbmNvZGVVUklDb21wb25lbnQnLCAnZXNjYXBlJyxcbidldmFsJywgJ2lzRmluaXRlJywgJ2lzTmFOJywgJ3BhcnNlRmxvYXQnLCAncGFyc2VJbnQnLCAndW5kZWZpbmVkJywgJ3VuZXNjYXBlJ107XG5cbmZ1bmN0aW9uIENvbnRleHQoKSB7fVxuQ29udGV4dC5wcm90b3R5cGUgPSB7fTtcblxudmFyIFNjcmlwdCA9IGV4cG9ydHMuU2NyaXB0ID0gZnVuY3Rpb24gTm9kZVNjcmlwdCAoY29kZSkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTY3JpcHQpKSByZXR1cm4gbmV3IFNjcmlwdChjb2RlKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xufTtcblxuU2NyaXB0LnByb3RvdHlwZS5ydW5JbkNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIGlmICghKGNvbnRleHQgaW5zdGFuY2VvZiBDb250ZXh0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwibmVlZHMgYSAnY29udGV4dCcgYXJndW1lbnQuXCIpO1xuICAgIH1cbiAgICBcbiAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgaWYgKCFpZnJhbWUuc3R5bGUpIGlmcmFtZS5zdHlsZSA9IHt9O1xuICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIFxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBcbiAgICB2YXIgd2luID0gaWZyYW1lLmNvbnRlbnRXaW5kb3c7XG4gICAgdmFyIHdFdmFsID0gd2luLmV2YWwsIHdFeGVjU2NyaXB0ID0gd2luLmV4ZWNTY3JpcHQ7XG5cbiAgICBpZiAoIXdFdmFsICYmIHdFeGVjU2NyaXB0KSB7XG4gICAgICAgIC8vIHdpbi5ldmFsKCkgbWFnaWNhbGx5IGFwcGVhcnMgd2hlbiB0aGlzIGlzIGNhbGxlZCBpbiBJRTpcbiAgICAgICAgd0V4ZWNTY3JpcHQuY2FsbCh3aW4sICdudWxsJyk7XG4gICAgICAgIHdFdmFsID0gd2luLmV2YWw7XG4gICAgfVxuICAgIFxuICAgIGZvckVhY2goT2JqZWN0X2tleXMoY29udGV4dCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgd2luW2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgfSk7XG4gICAgZm9yRWFjaChnbG9iYWxzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChjb250ZXh0W2tleV0pIHtcbiAgICAgICAgICAgIHdpbltrZXldID0gY29udGV4dFtrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgdmFyIHdpbktleXMgPSBPYmplY3Rfa2V5cyh3aW4pO1xuXG4gICAgdmFyIHJlcyA9IHdFdmFsLmNhbGwod2luLCB0aGlzLmNvZGUpO1xuICAgIFxuICAgIGZvckVhY2goT2JqZWN0X2tleXMod2luKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAvLyBBdm9pZCBjb3B5aW5nIGNpcmN1bGFyIG9iamVjdHMgbGlrZSBgdG9wYCBhbmQgYHdpbmRvd2AgYnkgb25seVxuICAgICAgICAvLyB1cGRhdGluZyBleGlzdGluZyBjb250ZXh0IHByb3BlcnRpZXMgb3IgbmV3IHByb3BlcnRpZXMgaW4gdGhlIGB3aW5gXG4gICAgICAgIC8vIHRoYXQgd2FzIG9ubHkgaW50cm9kdWNlZCBhZnRlciB0aGUgZXZhbC5cbiAgICAgICAgaWYgKGtleSBpbiBjb250ZXh0IHx8IGluZGV4T2Yod2luS2V5cywga2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnRleHRba2V5XSA9IHdpbltrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmb3JFYWNoKGdsb2JhbHMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIGNvbnRleHQpKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wKGNvbnRleHQsIGtleSwgd2luW2tleV0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgIFxuICAgIHJldHVybiByZXM7XG59O1xuXG5TY3JpcHQucHJvdG90eXBlLnJ1bkluVGhpc0NvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGV2YWwodGhpcy5jb2RlKTsgLy8gbWF5YmUuLi5cbn07XG5cblNjcmlwdC5wcm90b3R5cGUucnVuSW5OZXdDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgY3R4ID0gU2NyaXB0LmNyZWF0ZUNvbnRleHQoY29udGV4dCk7XG4gICAgdmFyIHJlcyA9IHRoaXMucnVuSW5Db250ZXh0KGN0eCk7XG5cbiAgICBmb3JFYWNoKE9iamVjdF9rZXlzKGN0eCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgY29udGV4dFtrZXldID0gY3R4W2tleV07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzO1xufTtcblxuZm9yRWFjaChPYmplY3Rfa2V5cyhTY3JpcHQucHJvdG90eXBlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBleHBvcnRzW25hbWVdID0gU2NyaXB0W25hbWVdID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgdmFyIHMgPSBTY3JpcHQoY29kZSk7XG4gICAgICAgIHJldHVybiBzW25hbWVdLmFwcGx5KHMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgfTtcbn0pO1xuXG5leHBvcnRzLmNyZWF0ZVNjcmlwdCA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuU2NyaXB0KGNvZGUpO1xufTtcblxuZXhwb3J0cy5jcmVhdGVDb250ZXh0ID0gU2NyaXB0LmNyZWF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBjb3B5ID0gbmV3IENvbnRleHQoKTtcbiAgICBpZih0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjb250ZXh0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgY29weVtrZXldID0gY29udGV4dFtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gRDovdml0YWxpay9rbGltb3Yvfi92bS1icm93c2VyaWZ5L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(19);\n\n__webpack_require__(20);\n\nvar _vm = __webpack_require__(21);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2FwcC5qcz83MTZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9fY29tbW9uJztcclxuaW1wb3J0ICcuL2NvbXBvbmVudHMvX2NvbXBvbmVudCc7XHJcbmltcG9ydCB7IHJ1bkluTmV3Q29udGV4dCB9IGZyb20gJ3ZtJztcclxuXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvYXBwLmpzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _scrollreveal = __webpack_require__(47);\n\nvar _scrollreveal2 = _interopRequireDefault(_scrollreveal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.sr = (0, _scrollreveal2.default)();\n\nvar scrollOptions = {\n  scale: 1,\n  duration: 1500,\n  distance: '10vh',\n  easing: 'ease',\n  viewFactor: -0.1,\n  opacity: 0\n};\n\n/*\r\n*About page\r\n*/\nsr.reveal('.about .sr-up', scrollOptions);\n\n/*\r\n*Project page\r\n*/\n\nsr.reveal('.project .sr-up', {\n  scale: 1,\n  duration: 1500,\n  distance: '10vh',\n  easing: 'ease',\n  viewFactor: -0.1,\n  opacity: 0\n});\n\n/*\r\n*Filter page\r\n*/\nsr.reveal('.filter__item', {\n  scale: 1,\n  duration: 1500,\n  distance: '10vh',\n  easing: 'ease',\n  viewFactor: -0.1,\n  opacity: 0\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2NvbXBvbmVudHMvX2FuaW1hdGlvbi1zY3JvbGwuanM/MDY5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2Nyb2xsUmV2ZWFsIGZyb20gJ3Njcm9sbHJldmVhbCc7XHJcblxyXG53aW5kb3cuc3IgPSBTY3JvbGxSZXZlYWwoKTtcclxuXHJcbnZhciBzY3JvbGxPcHRpb25zID0ge1xyXG4gIHNjYWxlOiAxLFxyXG4gIGR1cmF0aW9uOiAxNTAwLFxyXG4gIGRpc3RhbmNlOiAnMTB2aCcsXHJcbiAgZWFzaW5nOiAnZWFzZScsXHJcbiAgdmlld0ZhY3RvcjogLTAuMSxcclxuICBvcGFjaXR5OiAwXHJcbn07XHJcblxyXG4vKlxyXG4qQWJvdXQgcGFnZVxyXG4qL1xyXG5zci5yZXZlYWwoJy5hYm91dCAuc3ItdXAnLCBzY3JvbGxPcHRpb25zKTtcclxuXHJcbi8qXHJcbipQcm9qZWN0IHBhZ2VcclxuKi9cclxuXHJcbnNyLnJldmVhbCgnLnByb2plY3QgLnNyLXVwJywge1xyXG4gIHNjYWxlOiAxLFxyXG4gIGR1cmF0aW9uOiAxNTAwLFxyXG4gIGRpc3RhbmNlOiAnMTB2aCcsXHJcbiAgZWFzaW5nOiAnZWFzZScsXHJcbiAgdmlld0ZhY3RvcjogLTAuMSxcclxuICBvcGFjaXR5OiAwXHJcbn0pO1xyXG5cclxuLypcclxuKkZpbHRlciBwYWdlXHJcbiovXHJcbnNyLnJldmVhbCgnLmZpbHRlcl9faXRlbScsIHtcclxuICBzY2FsZTogMSxcclxuICBkdXJhdGlvbjogMTUwMCxcclxuICBkaXN0YW5jZTogJzEwdmgnLFxyXG4gIGVhc2luZzogJ2Vhc2UnLFxyXG4gIHZpZXdGYWN0b3I6IC0wLjEsXHJcbiAgb3BhY2l0eTogMFxyXG59KTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9jb21wb25lbnRzL19hbmltYXRpb24tc2Nyb2xsLmpzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFDQTtBQVFBOzs7QUFHQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBQ0E7QUFRQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\n$(function () {\n  setTimeout(function () {\n    $('body').removeClass('loading');\n  }, 500);\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2NvbXBvbmVudHMvX2JvZHktb25sb2FkLmpzPzZmNWQiXSwic291cmNlc0NvbnRlbnQiOlsiJChmdW5jdGlvbigpIHtcclxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdsb2FkaW5nJyk7XHJcbiAgfSwgNTAwKTtcclxufSk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvY29tcG9uZW50cy9fYm9keS1vbmxvYWQuanMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\n/* eslint-disable */\nvar Isotope = __webpack_require__(38);\n\nvar filter = document.getElementById('filter');\n\nif (filter !== null) {\n\n  /*\r\n  CALLING POPUP\r\n   */\n  $('.filter__buttons--main').click(function () {\n    $('.filter__filter').addClass('is-active');\n  });\n\n  /*\r\n  INITIALIZING FILTER\r\n   */\n  var iso = new Isotope('.filter__layout', {\n    itemSelector: '.filter__item',\n    layoutMode: 'fitRows',\n    transitionDuration: '0'\n  });\n\n  $('[data-filter]').click(function () {\n\n    /*\r\n    FILTERING\r\n    */\n    var filterValue = $(this).attr('data-filter');\n    iso.arrange({ filter: filterValue });\n\n    /*\r\n    CHANGING FILTER BUTTON CLASS\r\n    */\n    $('.filter__buttons').find('.is-active').removeClass('is-active');\n    $(this).addClass('is-active');\n\n    /*\r\n    CHANGING TEXT IN FILTER BUTTON ON MAIN PAGE \r\n    */\n    $('.js-filter-category-selected').text($(this).text());\n\n    /* \r\n    FADING POPUP \r\n    */\n    $('.filter__filter').removeClass('is-active');\n  });\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2NvbXBvbmVudHMvX2ZpbHRlci5qcz82YTEzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXHJcbnZhciBJc290b3BlID0gcmVxdWlyZSgnaXNvdG9wZS1sYXlvdXQnKTtcclxuXHJcbnZhciBmaWx0ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsdGVyJyk7XHJcblxyXG5pZiAoZmlsdGVyICE9PSBudWxsKSB7XHJcblxyXG4gIC8qXHJcbiAgQ0FMTElORyBQT1BVUFxyXG4gICAqL1xyXG4gICQoJy5maWx0ZXJfX2J1dHRvbnMtLW1haW4nKS5jbGljaygoKSA9PiB7XHJcbiAgICAkKCcuZmlsdGVyX19maWx0ZXInKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgfSk7XHJcblxyXG4gIC8qXHJcbiAgSU5JVElBTElaSU5HIEZJTFRFUlxyXG4gICAqL1xyXG4gIHZhciBpc28gPSBuZXcgSXNvdG9wZSgnLmZpbHRlcl9fbGF5b3V0Jywge1xyXG4gICAgaXRlbVNlbGVjdG9yOiAnLmZpbHRlcl9faXRlbScsXHJcbiAgICBsYXlvdXRNb2RlOiAnZml0Um93cycsXHJcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246ICcwJ1xyXG4gIH0pO1xyXG5cclxuICAkKCdbZGF0YS1maWx0ZXJdJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgLypcclxuICAgIEZJTFRFUklOR1xyXG4gICAgKi9cclxuICAgIHZhciBmaWx0ZXJWYWx1ZSA9ICQodGhpcykuYXR0cignZGF0YS1maWx0ZXInKTtcclxuICAgIGlzby5hcnJhbmdlKHsgZmlsdGVyOiBmaWx0ZXJWYWx1ZSB9KTtcclxuICAgIFxyXG4gICAgLypcclxuICAgIENIQU5HSU5HIEZJTFRFUiBCVVRUT04gQ0xBU1NcclxuICAgICovXHJcbiAgICAkKCcuZmlsdGVyX19idXR0b25zJykuZmluZCgnLmlzLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuICAgICQodGhpcykuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG5cclxuICAgIC8qXHJcbiAgICBDSEFOR0lORyBURVhUIElOIEZJTFRFUiBCVVRUT04gT04gTUFJTiBQQUdFIFxyXG4gICAgKi9cclxuICAgICQoJy5qcy1maWx0ZXItY2F0ZWdvcnktc2VsZWN0ZWQnKS50ZXh0KCQodGhpcykudGV4dCgpKTtcclxuXHJcbiAgICAvKiBcclxuICAgIEZBRElORyBQT1BVUCBcclxuICAgICovXHJcbiAgICAkKCcuZmlsdGVyX19maWx0ZXInKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XHJcblxyXG4gIH0pO1xyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvY29tcG9uZW50cy9fZmlsdGVyLmpzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUtBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUdBO0FBRUE7QUFDQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nvar _iscroll = __webpack_require__(37);\n\nvar _iscroll2 = _interopRequireDefault(_iscroll);\n\nvar _animationFullpage = __webpack_require__(8);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.IScroll = _iscroll2.default; /* eslint-disable */\n\nvar fullpage = __webpack_require__(35);\n\n\nvar fp = document.getElementById('fullpage');\n\n$(document).ready(function () {\n  if (fp !== null) {\n    // ===== PAGINATI0N =====\n    var pg = $('.pagination');\n    pg.text('Scroll');\n\n    var slides = $('.section');\n    /* \r\n    * Init splitting text\r\n    */\n    (0, _animationFullpage.init)();\n\n    new _iscroll2.default('.section');\n    $('#fullpage').fullpage({\n      responsiveWidth: 10,\n      responsiveHeight: 10,\n      scrollingSpeed: 1000,\n      sectionSelector: '.section',\n      scrollOverflow: true,\n      responsive: 768,\n      resize: false,\n\n      afterRender: function afterRender() {\n        $.fn.fullpage.setAllowScrolling(false);\n        $.fn.fullpage.setKeyboardScrolling(false);\n\n        if ($(window).width() < 767) {\n          (0, _animationFullpage.fpAnimation)($('.section:nth-child(2)'));\n        }\n      },\n\n      onLeave: function onLeave(origin, destination, direction) {\n        var loadedSection = this;\n\n        if ($(window).width() > 767) {\n          setTimeout(function () {\n            if (direction === 'down') {\n              var prevSlide = slides[destination - 2];\n              (0, _animationFullpage.fpReset)(prevSlide);\n            }\n            if (direction === 'up') {\n              var nextSlide = slides[destination];\n              (0, _animationFullpage.fpReset)(nextSlide);\n            }\n          }, 500);\n        }\n\n        /*\r\n        * Changing pagination text and email/Russia in footer\r\n        */\n        if (destination === 1) {\n          pg.text('Scroll');\n          $('.js-footer-hidden').addClass('is-hidden');\n          $('.js-footer-visible').removeClass('is-hidden');\n        } else if (destination === $('.section').length) {\n          $('.js-footer-hidden').removeClass('is-hidden');\n          $('.js-footer-visible').addClass('is-hidden');\n          pg.html('<button class=\"up\" id=\"up\">Up↑</button>');\n        } else {\n          $('.js-footer-hidden').addClass('is-hidden');\n          $('.js-footer-visible').removeClass('is-hidden');\n          if (destination < 9) {\n            pg.text('0' + (destination - 1) + '/');\n          } else {\n            pg.text(destination - 1 + '/');\n          }\n        }\n      },\n\n      afterLoad: function afterLoad(index, destination, direction) {\n        $.fn.fullpage.setAllowScrolling(false);\n        $.fn.fullpage.setKeyboardScrolling(false);\n\n        var up = document.getElementById('up');\n        if (up) {\n          up.addEventListener('click', function (e) {\n            $.fn.fullpage.moveTo(1);\n          });\n        }\n\n        var loadedSection = this;\n        (0, _animationFullpage.fpAnimation)(loadedSection);\n      }\n    });\n  }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2NvbXBvbmVudHMvX2Z1bGxwYWdlLmpzPzllY2YiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cclxuaW1wb3J0IElTY3JvbGwgZnJvbSAnaXNjcm9sbCc7XHJcbndpbmRvdy5JU2Nyb2xsID0gSVNjcm9sbDtcclxudmFyIGZ1bGxwYWdlID0gcmVxdWlyZSgnLi4vbGlicy9qcXVlcnkuZnVsbHBhZ2UubWluLmpzJyk7XHJcbmltcG9ydCB7IGluaXQsIGZwQW5pbWF0aW9uLCBmcFJlc2V0IH0gZnJvbSAnLi9fYW5pbWF0aW9uLWZ1bGxwYWdlJztcclxuXHJcbnZhciBmcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmdWxscGFnZScpO1xyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgaWYgKGZwICE9PSBudWxsKSB7XHJcbiAgICAvLyA9PT09PSBQQUdJTkFUSTBOID09PT09XHJcbiAgICB2YXIgcGcgPSAkKCcucGFnaW5hdGlvbicpO1xyXG4gICAgcGcudGV4dCgnU2Nyb2xsJyk7XHJcblxyXG4gICAgdmFyIHNsaWRlcyA9ICQoJy5zZWN0aW9uJyk7XHJcbiAgICAvKiBcclxuICAgICogSW5pdCBzcGxpdHRpbmcgdGV4dFxyXG4gICAgKi9cclxuICAgIGluaXQoKTtcclxuXHJcbiAgICBuZXcgSVNjcm9sbCgnLnNlY3Rpb24nKTtcclxuICAgICQoJyNmdWxscGFnZScpLmZ1bGxwYWdlKHtcclxuICAgICAgcmVzcG9uc2l2ZVdpZHRoOiAxMCxcclxuICAgICAgcmVzcG9uc2l2ZUhlaWdodDogMTAsXHJcbiAgICAgIHNjcm9sbGluZ1NwZWVkOiAxMDAwLFxyXG4gICAgICBzZWN0aW9uU2VsZWN0b3I6ICcuc2VjdGlvbicsXHJcbiAgICAgIHNjcm9sbE92ZXJmbG93OiB0cnVlLFxyXG4gICAgICByZXNwb25zaXZlOiA3NjgsXHJcbiAgICAgIHJlc2l6ZTogZmFsc2UsXHJcblxyXG4gICAgICBhZnRlclJlbmRlcjogKCkgPT4ge1xyXG4gICAgICAgICQuZm4uZnVsbHBhZ2Uuc2V0QWxsb3dTY3JvbGxpbmcoZmFsc2UpO1xyXG4gICAgICAgICQuZm4uZnVsbHBhZ2Uuc2V0S2V5Ym9hcmRTY3JvbGxpbmcoZmFsc2UpO1xyXG5cclxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCA3NjcpIHtcclxuICAgICAgICAgIGZwQW5pbWF0aW9uKCQoJy5zZWN0aW9uOm50aC1jaGlsZCgyKScpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBvbkxlYXZlOiBmdW5jdGlvbihvcmlnaW4sIGRlc3RpbmF0aW9uLCBkaXJlY3Rpb24pIHtcclxuICAgICAgICB2YXIgbG9hZGVkU2VjdGlvbiA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA+IDc2Nykge1xyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdkb3duJykge1xyXG4gICAgICAgICAgICAgIHZhciBwcmV2U2xpZGUgPSBzbGlkZXNbZGVzdGluYXRpb24gLSAyXTtcclxuICAgICAgICAgICAgICBmcFJlc2V0KHByZXZTbGlkZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge1xyXG4gICAgICAgICAgICAgIHZhciBuZXh0U2xpZGUgPSBzbGlkZXNbZGVzdGluYXRpb25dO1xyXG4gICAgICAgICAgICAgIGZwUmVzZXQobmV4dFNsaWRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgKiBDaGFuZ2luZyBwYWdpbmF0aW9uIHRleHQgYW5kIGVtYWlsL1J1c3NpYSBpbiBmb290ZXJcclxuICAgICAgICAqL1xyXG4gICAgICAgIGlmIChkZXN0aW5hdGlvbiA9PT0gMSkge1xyXG4gICAgICAgICAgcGcudGV4dCgnU2Nyb2xsJyk7XHJcbiAgICAgICAgICAkKCcuanMtZm9vdGVyLWhpZGRlbicpLmFkZENsYXNzKCdpcy1oaWRkZW4nKTtcclxuICAgICAgICAgICQoJy5qcy1mb290ZXItdmlzaWJsZScpLnJlbW92ZUNsYXNzKCdpcy1oaWRkZW4nKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRlc3RpbmF0aW9uID09PSAkKCcuc2VjdGlvbicpLmxlbmd0aCkge1xyXG4gICAgICAgICAgJCgnLmpzLWZvb3Rlci1oaWRkZW4nKS5yZW1vdmVDbGFzcygnaXMtaGlkZGVuJyk7XHJcbiAgICAgICAgICAkKCcuanMtZm9vdGVyLXZpc2libGUnKS5hZGRDbGFzcygnaXMtaGlkZGVuJyk7XHJcbiAgICAgICAgICBwZy5odG1sKCc8YnV0dG9uIGNsYXNzPVwidXBcIiBpZD1cInVwXCI+VXDihpE8L2J1dHRvbj4nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgJCgnLmpzLWZvb3Rlci1oaWRkZW4nKS5hZGRDbGFzcygnaXMtaGlkZGVuJyk7XHJcbiAgICAgICAgICAkKCcuanMtZm9vdGVyLXZpc2libGUnKS5yZW1vdmVDbGFzcygnaXMtaGlkZGVuJyk7XHJcbiAgICAgICAgICBpZiAoZGVzdGluYXRpb24gPCA5KSB7XHJcbiAgICAgICAgICAgIHBnLnRleHQoJzAnICsgKGRlc3RpbmF0aW9uIC0gMSkgKyAnLycpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGcudGV4dCgoZGVzdGluYXRpb24gLSAxKSArICcvJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgYWZ0ZXJMb2FkOiBmdW5jdGlvbihpbmRleCwgZGVzdGluYXRpb24sIGRpcmVjdGlvbikge1xyXG4gICAgICAgICQuZm4uZnVsbHBhZ2Uuc2V0QWxsb3dTY3JvbGxpbmcoZmFsc2UpO1xyXG4gICAgICAgICQuZm4uZnVsbHBhZ2Uuc2V0S2V5Ym9hcmRTY3JvbGxpbmcoZmFsc2UpO1xyXG5cclxuICAgICAgICB2YXIgdXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXAnKTtcclxuICAgICAgICBpZiAodXApIHtcclxuICAgICAgICAgIHVwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5tb3ZlVG8oMSk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGxvYWRlZFNlY3Rpb24gPSB0aGlzO1xyXG4gICAgICAgIGZwQW5pbWF0aW9uKGxvYWRlZFNlY3Rpb24pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn0pO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL2NvbXBvbmVudHMvX2Z1bGxwYWdlLmpzIl0sIm1hcHBpbmdzIjoiOztBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7OztBQUhBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBckVBO0FBdUVBO0FBQ0E7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\n$('.js-menu-hoverable').hover(function (e) {\n  $('.menu__main').addClass('hovered');\n  $(this).addClass('light');\n}, function (e) {\n  $('.menu__main').removeClass('hovered');\n  $(this).removeClass('light');\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2NvbXBvbmVudHMvX21lbnUtaG92ZXIuanM/M2UzZCJdLCJzb3VyY2VzQ29udGVudCI6WyIkKCcuanMtbWVudS1ob3ZlcmFibGUnKS5ob3ZlcihcclxuICBmdW5jdGlvbihlKSB7XHJcbiAgICAkKCcubWVudV9fbWFpbicpLmFkZENsYXNzKCdob3ZlcmVkJyk7XHJcbiAgICAkKHRoaXMpLmFkZENsYXNzKCdsaWdodCcpO1xyXG4gIH0sXHJcbiAgZnVuY3Rpb24oZSkge1xyXG4gICAgJCgnLm1lbnVfX21haW4nKS5yZW1vdmVDbGFzcygnaG92ZXJlZCcpO1xyXG4gICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnbGlnaHQnKTtcclxuICB9XHJcbik7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvY29tcG9uZW50cy9fbWVudS1ob3Zlci5qcyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nvar open = false;\n\n$('.menu-trigger').click(function () {\n  if (open) {\n    $('.menu-trigger').removeClass('menu-is-open');\n    $('.menu').fadeOut(500);\n    $('.menu-top .col-31').fadeIn();\n    $('.menu-top .col-45').fadeIn();\n    $('.logo').removeClass('logo-grey');\n    $('.header').removeClass('fixed');\n    open = false;\n  } else {\n    $('.menu-trigger').addClass('menu-is-open');\n    $('.menu').removeClass('is-closed').fadeIn(500);\n    $('.menu-top .col-31').fadeOut();\n    $('.menu-top .col-45').fadeOut();\n    $('.logo').toggleClass('logo-grey');\n    $('.header').addClass('fixed');\n    open = true;\n  }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2NvbXBvbmVudHMvX21lbnUtdG9nZ2xlLmpzPzUwN2UiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG9wZW4gPSBmYWxzZTtcclxuXHJcbiQoJy5tZW51LXRyaWdnZXInKS5jbGljayhmdW5jdGlvbigpIHtcclxuICBpZiAob3Blbikge1xyXG4gICAgJCgnLm1lbnUtdHJpZ2dlcicpLnJlbW92ZUNsYXNzKCdtZW51LWlzLW9wZW4nKTtcclxuICAgICQoJy5tZW51JykuZmFkZU91dCg1MDApO1xyXG4gICAgJCgnLm1lbnUtdG9wIC5jb2wtMzEnKS5mYWRlSW4oKTtcclxuICAgICQoJy5tZW51LXRvcCAuY29sLTQ1JykuZmFkZUluKCk7XHJcbiAgICAkKCcubG9nbycpLnJlbW92ZUNsYXNzKCdsb2dvLWdyZXknKTtcclxuICAgICQoJy5oZWFkZXInKS5yZW1vdmVDbGFzcygnZml4ZWQnKTtcclxuICAgIG9wZW4gPSBmYWxzZTtcclxuICB9IGVsc2Uge1xyXG4gICAgJCgnLm1lbnUtdHJpZ2dlcicpLmFkZENsYXNzKCdtZW51LWlzLW9wZW4nKTtcclxuICAgICQoJy5tZW51JylcclxuICAgICAgLnJlbW92ZUNsYXNzKCdpcy1jbG9zZWQnKVxyXG4gICAgICAuZmFkZUluKDUwMCk7XHJcbiAgICAkKCcubWVudS10b3AgLmNvbC0zMScpLmZhZGVPdXQoKTtcclxuICAgICQoJy5tZW51LXRvcCAuY29sLTQ1JykuZmFkZU91dCgpO1xyXG4gICAgJCgnLmxvZ28nKS50b2dnbGVDbGFzcygnbG9nby1ncmV5Jyk7XHJcbiAgICAkKCcuaGVhZGVyJykuYWRkQ2xhc3MoJ2ZpeGVkJyk7XHJcbiAgICBvcGVuID0gdHJ1ZTtcclxuICB9XHJcbn0pO1xyXG5cclxuXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvY29tcG9uZW50cy9fbWVudS10b2dnbGUuanMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nvar _owl = __webpack_require__(46);\n\nvar _owl2 = _interopRequireDefault(_owl);\n\nvar _constants = __webpack_require__(5);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n$(document).ready(function () {\n  var sliderTrigger = document.getElementById('slider');\n\n  if (sliderTrigger !== null) {\n    var sliderVisible = function sliderVisible() {\n      $('.slider').css({ opacity: '1', visibility: 'visible' });\n    };\n\n    var slider = $('.slider');\n\n    slider.owlCarousel({\n      onInitialized: sliderVisible,\n      loop: true,\n      dots: false,\n      smartSpeed: 1000,\n      responsive: {\n        0: {\n          center: false,\n          items: 1,\n          autoWidth: true,\n          margin: 16,\n          smartSpeed: 500\n        },\n        678: {\n          center: false,\n          items: 2,\n          // autoWidth: true,\n          margin: 16\n        },\n        840: {\n          // autoWidth: true,\n          center: true,\n          items: 3,\n          margin: 40\n        },\n        1024: {\n          center: true,\n          items: 3,\n          margin: 70\n        },\n        1429: {\n          center: true,\n          items: 3,\n          margin: 130\n        }\n      }\n    });\n\n    var timeout = void 0;\n    var timeoutFlug = true;\n    var _sliderTrigger = function _sliderTrigger(e) {\n      if (!timeoutFlug) return;\n      if (e.originalEvent.deltaY > 0) {\n        slider.trigger('next.owl');\n      } else {\n        slider.trigger('prev.owl');\n      }\n    };\n    _constants.HTMLBODY.on('mousewheel', function (e) {\n      if (!_sliderTrigger) return;\n      _sliderTrigger(e);\n      timeoutFlug = false;\n      clearTimeout(timeout);\n      timeout = setTimeout(function () {\n        timeoutFlug = true;\n      }, 100);\n      e.preventDefault();\n    });\n  }\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2NvbXBvbmVudHMvX3NsaWRlci5qcz8zMzNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvd2xDYXJvdXNlbCBmcm9tICdvd2wuY2Fyb3VzZWwnO1xyXG5pbXBvcnQgeyBIVE1MQk9EWSB9IGZyb20gJy4uL19jb25zdGFudHMnO1xyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHNsaWRlclRyaWdnZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2xpZGVyJyk7XHJcblxyXG4gIGlmIChzbGlkZXJUcmlnZ2VyICE9PSBudWxsKSB7XHJcbiAgICB2YXIgc2xpZGVyID0gJCgnLnNsaWRlcicpO1xyXG5cclxuICAgIHNsaWRlci5vd2xDYXJvdXNlbCh7XHJcbiAgICAgIG9uSW5pdGlhbGl6ZWQ6IHNsaWRlclZpc2libGUsXHJcbiAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgIGRvdHM6IGZhbHNlLFxyXG4gICAgICBzbWFydFNwZWVkOiAxMDAwLFxyXG4gICAgICByZXNwb25zaXZlOiB7XHJcbiAgICAgICAgMDoge1xyXG4gICAgICAgICAgY2VudGVyOiBmYWxzZSxcclxuICAgICAgICAgIGl0ZW1zOiAxLFxyXG4gICAgICAgICAgYXV0b1dpZHRoOiB0cnVlLFxyXG4gICAgICAgICAgbWFyZ2luOiAxNixcclxuICAgICAgICAgIHNtYXJ0U3BlZWQ6IDUwMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgNjc4OiB7XHJcbiAgICAgICAgICBjZW50ZXI6IGZhbHNlLFxyXG4gICAgICAgICAgaXRlbXM6IDIsXHJcbiAgICAgICAgICAvLyBhdXRvV2lkdGg6IHRydWUsXHJcbiAgICAgICAgICBtYXJnaW46IDE2XHJcbiAgICAgICAgfSxcclxuICAgICAgICA4NDA6IHtcclxuICAgICAgICAgIC8vIGF1dG9XaWR0aDogdHJ1ZSxcclxuICAgICAgICAgIGNlbnRlcjogdHJ1ZSxcclxuICAgICAgICAgIGl0ZW1zOiAzLFxyXG4gICAgICAgICAgbWFyZ2luOiA0MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgMTAyNDoge1xyXG4gICAgICAgICAgY2VudGVyOiB0cnVlLFxyXG4gICAgICAgICAgaXRlbXM6IDMsXHJcbiAgICAgICAgICBtYXJnaW46IDcwXHJcbiAgICAgICAgfSxcclxuICAgICAgICAxNDI5OiB7XHJcbiAgICAgICAgICBjZW50ZXI6IHRydWUsXHJcbiAgICAgICAgICBpdGVtczogMyxcclxuICAgICAgICAgIG1hcmdpbjogMTMwXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBzbGlkZXJWaXNpYmxlKCkge1xyXG4gICAgICAkKCcuc2xpZGVyJykuY3NzKHsgb3BhY2l0eTogJzEnLCB2aXNpYmlsaXR5OiAndmlzaWJsZScgfSk7XHJcbiAgICB9XHJcbiAgICBsZXQgdGltZW91dDtcclxuICAgIGxldCB0aW1lb3V0Rmx1ZyA9IHRydWU7XHJcbiAgICBjb25zdCBzbGlkZXJUcmlnZ2VyID0gKGUpID0+IHtcclxuICAgICAgaWYgKCF0aW1lb3V0Rmx1ZykgcmV0dXJuO1xyXG4gICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50LmRlbHRhWSA+IDApIHtcclxuICAgICAgICBzbGlkZXIudHJpZ2dlcignbmV4dC5vd2wnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzbGlkZXIudHJpZ2dlcigncHJldi5vd2wnKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIEhUTUxCT0RZLm9uKCdtb3VzZXdoZWVsJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICBpZiAoIXNsaWRlclRyaWdnZXIpIHJldHVybjtcclxuICAgICAgc2xpZGVyVHJpZ2dlcihlKTtcclxuICAgICAgdGltZW91dEZsdWcgPSBmYWxzZTtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7IHRpbWVvdXRGbHVnID0gdHJ1ZTsgfSwgMTAwKTtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59KTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9jb21wb25lbnRzL19zbGlkZXIuanMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQTBDQTtBQUNBO0FBQ0E7QUEzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUF6QkE7QUFMQTtBQUNBO0FBd0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nvar _utils = __webpack_require__(7);\n\nvar up = document.getElementById('up');\n\nif (up !== null) {\n  $('#up').click(function () {\n    (0, _utils.SCROLL_TO)(0);\n  });\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2NvbXBvbmVudHMvX3RvcC5qcz85MDdiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U0NST0xMX1RPfSBmcm9tICcuLi9fdXRpbHMnO1xyXG52YXIgdXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXAnKTtcclxuXHJcbmlmICh1cCAhPT0gbnVsbCkge1xyXG4gICQoJyN1cCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgU0NST0xMX1RPKDApO1xyXG4gIH0pO1xyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvY29tcG9uZW50cy9fdG9wLmpzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable */\nvar SplitIntoRows = function () {\n  function SplitIntoRows(props) {\n    _classCallCheck(this, SplitIntoRows);\n\n    this._container = props.container;\n    this._text = props.container.textContent;\n    this._init();\n  }\n\n  _createClass(SplitIntoRows, [{\n    key: '_init',\n    value: function _init() {\n      var container = this._container;\n      var words = this._text.split(' ');\n      var wordsLength = words.length;\n      container.innerHTML = '<span></span>';\n      var row = container.querySelector('span');\n      var parentWidth = container.offsetWidth;\n      row.style.whiteSpace = 'nowrap';\n\n      for (var i = 0; i < wordsLength; i++) {\n        //get current word with space\n        var word = words[i];\n        var editedWord = word + ' ';\n        //caching old text value for new line\n        var oldTextValue = row.textContent;\n        //set new text value (add new word)\n        row.textContent += editedWord;\n\n        //if row width with new word bigger then parent width\n        //create line with text value minus current word\n        if (row.offsetWidth > parentWidth) {\n          var newLine = document.createElement('span');\n          newLine.className = 'text-row';\n          newLine.textContent = oldTextValue;\n          container.insertBefore(newLine, row);\n          //reset row text value to current words with space\n          row.textContent = editedWord;\n\n          //remove if line is empty\n          if (!newLine.textContent.length) newLine.parentNode.removeChild(newLine);\n        }\n        //if it's last word - remove white space and use this span for last line\n        if (i === wordsLength - 1) {\n          row.removeAttribute('style');\n          row.className = 'text-row';\n        }\n      }\n    }\n  }, {\n    key: 'reinit',\n    value: function reinit() {\n      this._init();\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._container.textContent = this._text;\n    }\n  }, {\n    key: 'update',\n    value: function update() {\n      this._text = this._container.textContent;\n      this._init();\n    }\n  }]);\n\n  return SplitIntoRows;\n}();\n\nexports.default = SplitIntoRows;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2xpYnMvU3BsaXRJbnRvUm93cy5qcz81OGI5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwbGl0SW50b1Jvd3Mge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBwcm9wcy5jb250YWluZXI7XHJcbiAgICB0aGlzLl90ZXh0ID0gcHJvcHMuY29udGFpbmVyLnRleHRDb250ZW50O1xyXG4gICAgdGhpcy5faW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgX2luaXQoKSB7XHJcbiAgICBsZXQgY29udGFpbmVyID0gdGhpcy5fY29udGFpbmVyO1xyXG4gICAgbGV0IHdvcmRzID0gdGhpcy5fdGV4dC5zcGxpdCgnICcpO1xyXG4gICAgbGV0IHdvcmRzTGVuZ3RoID0gd29yZHMubGVuZ3RoO1xyXG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9ICc8c3Bhbj48L3NwYW4+JztcclxuICAgIGxldCByb3cgPSBjb250YWluZXIucXVlcnlTZWxlY3Rvcignc3BhbicpO1xyXG4gICAgbGV0IHBhcmVudFdpZHRoID0gY29udGFpbmVyLm9mZnNldFdpZHRoO1xyXG4gICAgcm93LnN0eWxlLndoaXRlU3BhY2UgPSAnbm93cmFwJztcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmRzTGVuZ3RoOyBpKyspIHtcclxuICAgICAgLy9nZXQgY3VycmVudCB3b3JkIHdpdGggc3BhY2VcclxuICAgICAgbGV0IHdvcmQgPSB3b3Jkc1tpXTtcclxuICAgICAgbGV0IGVkaXRlZFdvcmQgPSB3b3JkICsgJyAnO1xyXG4gICAgICAvL2NhY2hpbmcgb2xkIHRleHQgdmFsdWUgZm9yIG5ldyBsaW5lXHJcbiAgICAgIGxldCBvbGRUZXh0VmFsdWUgPSByb3cudGV4dENvbnRlbnQ7XHJcbiAgICAgIC8vc2V0IG5ldyB0ZXh0IHZhbHVlIChhZGQgbmV3IHdvcmQpXHJcbiAgICAgIHJvdy50ZXh0Q29udGVudCArPSBlZGl0ZWRXb3JkO1xyXG5cclxuICAgICAgLy9pZiByb3cgd2lkdGggd2l0aCBuZXcgd29yZCBiaWdnZXIgdGhlbiBwYXJlbnQgd2lkdGhcclxuICAgICAgLy9jcmVhdGUgbGluZSB3aXRoIHRleHQgdmFsdWUgbWludXMgY3VycmVudCB3b3JkXHJcbiAgICAgIGlmIChyb3cub2Zmc2V0V2lkdGggPiBwYXJlbnRXaWR0aCkge1xyXG4gICAgICAgIGxldCBuZXdMaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgIG5ld0xpbmUuY2xhc3NOYW1lID0gJ3RleHQtcm93JztcclxuICAgICAgICBuZXdMaW5lLnRleHRDb250ZW50ID0gb2xkVGV4dFZhbHVlO1xyXG4gICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUobmV3TGluZSwgcm93KTtcclxuICAgICAgICAvL3Jlc2V0IHJvdyB0ZXh0IHZhbHVlIHRvIGN1cnJlbnQgd29yZHMgd2l0aCBzcGFjZVxyXG4gICAgICAgIHJvdy50ZXh0Q29udGVudCA9IGVkaXRlZFdvcmQ7XHJcblxyXG4gICAgICAgIC8vcmVtb3ZlIGlmIGxpbmUgaXMgZW1wdHlcclxuICAgICAgICBpZiAoIW5ld0xpbmUudGV4dENvbnRlbnQubGVuZ3RoKVxyXG4gICAgICAgICAgbmV3TGluZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5ld0xpbmUpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vaWYgaXQncyBsYXN0IHdvcmQgLSByZW1vdmUgd2hpdGUgc3BhY2UgYW5kIHVzZSB0aGlzIHNwYW4gZm9yIGxhc3QgbGluZVxyXG4gICAgICBpZiAoaSA9PT0gd29yZHNMZW5ndGggLSAxKSB7XHJcbiAgICAgICAgcm93LnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcclxuICAgICAgICByb3cuY2xhc3NOYW1lID0gJ3RleHQtcm93JztcclxuICAgICAgfSBcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlaW5pdCgpIHtcclxuICAgIHRoaXMuX2luaXQoKTtcclxuICB9XHJcblxyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIudGV4dENvbnRlbnQgPSB0aGlzLl90ZXh0O1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgdGhpcy5fdGV4dCA9IHRoaXMuX2NvbnRhaW5lci50ZXh0Q29udGVudDtcclxuICAgIHRoaXMuX2luaXQoKTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9saWJzL1NwbGl0SW50b1Jvd3MuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUExREEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExpoScaleEase = exports.Sine = exports.Expo = exports.Circ = exports.SteppedEase = exports.SlowMo = exports.RoughEase = exports.Bounce = exports.Elastic = exports.Back = exports.Linear = exports.Power4 = exports.Power3 = exports.Power2 = exports.Power1 = exports.Power0 = exports.Ease = exports.TweenPlugin = exports.RoundPropsPlugin = exports.DirectionalRotationPlugin = exports.BezierPlugin = exports.AttrPlugin = exports.CSSPlugin = exports.TimelineMax = exports.TimelineLite = exports.TweenLite = exports.default = exports.TweenMax = undefined;\n\nvar _TweenLite = __webpack_require__(1);\n\nvar _TweenLite2 = _interopRequireDefault(_TweenLite);\n\nvar _TweenMaxBase = __webpack_require__(33);\n\nvar _TweenMaxBase2 = _interopRequireDefault(_TweenMaxBase);\n\nvar _CSSPlugin = __webpack_require__(11);\n\nvar _CSSPlugin2 = _interopRequireDefault(_CSSPlugin);\n\nvar _AttrPlugin = __webpack_require__(9);\n\nvar _AttrPlugin2 = _interopRequireDefault(_AttrPlugin);\n\nvar _RoundPropsPlugin = __webpack_require__(14);\n\nvar _RoundPropsPlugin2 = _interopRequireDefault(_RoundPropsPlugin);\n\nvar _DirectionalRotationPlugin = __webpack_require__(12);\n\nvar _DirectionalRotationPlugin2 = _interopRequireDefault(_DirectionalRotationPlugin);\n\nvar _TimelineLite = __webpack_require__(6);\n\nvar _TimelineLite2 = _interopRequireDefault(_TimelineLite);\n\nvar _TimelineMax = __webpack_require__(15);\n\nvar _TimelineMax2 = _interopRequireDefault(_TimelineMax);\n\nvar _BezierPlugin = __webpack_require__(10);\n\nvar _BezierPlugin2 = _interopRequireDefault(_BezierPlugin);\n\nvar _EasePack = __webpack_require__(13);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//the following two lines are designed to prevent tree shaking of the classes that were historically included with TweenMax (otherwise, folks would have to reference CSSPlugin, for example, to ensure their CSS-related animations worked)\n/*!\r\n * VERSION: 2.0.2\r\n * DATE: 2018-08-27\r\n * UPDATES AND DOCS AT: http://greensock.com\r\n *\r\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\r\n * This work is subject to the terms at http://greensock.com/standard-license or for\r\n * Club GreenSock members, the software agreement that was issued with your membership.\r\n * \r\n * @author: Jack Doyle, jack@greensock.com\r\n **/\n\nvar TweenMax = exports.TweenMax = _TweenMaxBase2.default;\nTweenMax._autoActivated = [_TimelineLite2.default, _TimelineMax2.default, _CSSPlugin2.default, _AttrPlugin2.default, _BezierPlugin2.default, _RoundPropsPlugin2.default, _DirectionalRotationPlugin2.default, _EasePack.Back, _EasePack.Elastic, _EasePack.Bounce, _EasePack.RoughEase, _EasePack.SlowMo, _EasePack.SteppedEase, _EasePack.Circ, _EasePack.Expo, _EasePack.Sine, _EasePack.ExpoScaleEase];\n\nexports.default = TweenMax;\nexports.TweenLite = _TweenLite2.default;\nexports.TimelineLite = _TimelineLite2.default;\nexports.TimelineMax = _TimelineMax2.default;\nexports.CSSPlugin = _CSSPlugin2.default;\nexports.AttrPlugin = _AttrPlugin2.default;\nexports.BezierPlugin = _BezierPlugin2.default;\nexports.DirectionalRotationPlugin = _DirectionalRotationPlugin2.default;\nexports.RoundPropsPlugin = _RoundPropsPlugin2.default;\nexports.TweenPlugin = _TweenLite.TweenPlugin;\nexports.Ease = _TweenLite.Ease;\nexports.Power0 = _TweenLite.Power0;\nexports.Power1 = _TweenLite.Power1;\nexports.Power2 = _TweenLite.Power2;\nexports.Power3 = _TweenLite.Power3;\nexports.Power4 = _TweenLite.Power4;\nexports.Linear = _TweenLite.Linear;\nexports.Back = _EasePack.Back;\nexports.Elastic = _EasePack.Elastic;\nexports.Bounce = _EasePack.Bounce;\nexports.RoughEase = _EasePack.RoughEase;\nexports.SlowMo = _EasePack.SlowMo;\nexports.SteppedEase = _EasePack.SteppedEase;\nexports.Circ = _EasePack.Circ;\nexports.Expo = _EasePack.Expo;\nexports.Sine = _EasePack.Sine;\nexports.ExpoScaleEase = _EasePack.ExpoScaleEase;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2xpYnMvZ3NhcC9lc20vVHdlZW5NYXguanM/ZDFjNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogVkVSU0lPTjogMi4wLjJcclxuICogREFURTogMjAxOC0wOC0yN1xyXG4gKiBVUERBVEVTIEFORCBET0NTIEFUOiBodHRwOi8vZ3JlZW5zb2NrLmNvbVxyXG4gKlxyXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxOCwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBUaGlzIHdvcmsgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cDovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIHNvZnR3YXJlIGFncmVlbWVudCB0aGF0IHdhcyBpc3N1ZWQgd2l0aCB5b3VyIG1lbWJlcnNoaXAuXHJcbiAqIFxyXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cclxuICoqL1xyXG5cclxuaW1wb3J0IFR3ZWVuTGl0ZSwgeyBUd2VlblBsdWdpbiwgRWFzZSwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciB9IGZyb20gJy4vVHdlZW5MaXRlLmpzJztcclxuaW1wb3J0IFR3ZWVuTWF4QmFzZSBmcm9tICcuL1R3ZWVuTWF4QmFzZS5qcyc7XHJcbmltcG9ydCBDU1NQbHVnaW4gZnJvbSAnLi9DU1NQbHVnaW4uanMnO1xyXG5pbXBvcnQgQXR0clBsdWdpbiBmcm9tICcuL0F0dHJQbHVnaW4uanMnO1xyXG5pbXBvcnQgUm91bmRQcm9wc1BsdWdpbiBmcm9tICcuL1JvdW5kUHJvcHNQbHVnaW4uanMnO1xyXG5pbXBvcnQgRGlyZWN0aW9uYWxSb3RhdGlvblBsdWdpbiBmcm9tICcuL0RpcmVjdGlvbmFsUm90YXRpb25QbHVnaW4uanMnO1xyXG5pbXBvcnQgVGltZWxpbmVMaXRlIGZyb20gJy4vVGltZWxpbmVMaXRlLmpzJztcclxuaW1wb3J0IFRpbWVsaW5lTWF4IGZyb20gJy4vVGltZWxpbmVNYXguanMnO1xyXG5pbXBvcnQgQmV6aWVyUGx1Z2luIGZyb20gJy4vQmV6aWVyUGx1Z2luLmpzJztcclxuaW1wb3J0IHsgQmFjaywgRWxhc3RpYywgQm91bmNlLCBSb3VnaEVhc2UsIFNsb3dNbywgU3RlcHBlZEVhc2UsIENpcmMsIEV4cG8sIFNpbmUsIEV4cG9TY2FsZUVhc2UgfSBmcm9tICcuL0Vhc2VQYWNrLmpzJztcclxuXHJcbi8vdGhlIGZvbGxvd2luZyB0d28gbGluZXMgYXJlIGRlc2lnbmVkIHRvIHByZXZlbnQgdHJlZSBzaGFraW5nIG9mIHRoZSBjbGFzc2VzIHRoYXQgd2VyZSBoaXN0b3JpY2FsbHkgaW5jbHVkZWQgd2l0aCBUd2Vlbk1heCAob3RoZXJ3aXNlLCBmb2xrcyB3b3VsZCBoYXZlIHRvIHJlZmVyZW5jZSBDU1NQbHVnaW4sIGZvciBleGFtcGxlLCB0byBlbnN1cmUgdGhlaXIgQ1NTLXJlbGF0ZWQgYW5pbWF0aW9ucyB3b3JrZWQpXHJcbmV4cG9ydCB2YXIgVHdlZW5NYXggPSBUd2Vlbk1heEJhc2U7XHJcblR3ZWVuTWF4Ll9hdXRvQWN0aXZhdGVkID0gW1RpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXgsIENTU1BsdWdpbiwgQXR0clBsdWdpbiwgQmV6aWVyUGx1Z2luLCBSb3VuZFByb3BzUGx1Z2luLCBEaXJlY3Rpb25hbFJvdGF0aW9uUGx1Z2luLCBCYWNrLCBFbGFzdGljLCBCb3VuY2UsIFJvdWdoRWFzZSwgU2xvd01vLCBTdGVwcGVkRWFzZSwgQ2lyYywgRXhwbywgU2luZSwgRXhwb1NjYWxlRWFzZV07XHJcblxyXG5leHBvcnQgeyBUd2Vlbk1heCBhcyBkZWZhdWx0IH07XHJcbmV4cG9ydCB7IFR3ZWVuTGl0ZSwgVGltZWxpbmVMaXRlLCBUaW1lbGluZU1heCwgQ1NTUGx1Z2luLCBBdHRyUGx1Z2luLCBCZXppZXJQbHVnaW4sIERpcmVjdGlvbmFsUm90YXRpb25QbHVnaW4sIFJvdW5kUHJvcHNQbHVnaW4sIFR3ZWVuUGx1Z2luLCBFYXNlLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBCYWNrLCBFbGFzdGljLCBCb3VuY2UsIFJvdWdoRWFzZSwgU2xvd01vLCBTdGVwcGVkRWFzZSwgQ2lyYywgRXhwbywgU2luZSwgRXhwb1NjYWxlRWFzZSB9O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL2xpYnMvZ3NhcC9lc20vVHdlZW5NYXguanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFZQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFDQTtBQXZCQTs7Ozs7Ozs7Ozs7O0FBd0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Linear = exports.Power4 = exports.Power3 = exports.Power2 = exports.Power1 = exports.Power0 = exports.Ease = exports.TweenLite = exports.default = exports.TweenMaxBase = exports.TweenMax = undefined;\n\nvar _TweenLite = __webpack_require__(1);\n\nvar _TweenLite2 = _interopRequireDefault(_TweenLite);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TweenLite._gsScope._gsDefine('TweenMax', ['core.Animation', 'core.SimpleTimeline', 'TweenLite'], function () {\n\n  var _slice = function _slice(a) {\n    //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n    var b = [],\n        l = a.length,\n        i;\n    for (i = 0; i !== l; b.push(a[i++])) {}\n    return b;\n  },\n      _applyCycle = function _applyCycle(vars, targets, i) {\n    var alt = vars.cycle,\n        p,\n        val;\n    for (p in alt) {\n      val = alt[p];\n      vars[p] = typeof val === 'function' ? val(i, targets[i]) : val[i % val.length];\n    }\n    delete vars.cycle;\n  },\n      TweenMax = function TweenMax(target, duration, vars) {\n    _TweenLite2.default.call(this, target, duration, vars);\n    this._cycle = 0;\n    this._yoyo = this.vars.yoyo === true || !!this.vars.yoyoEase;\n    this._repeat = this.vars.repeat || 0;\n    this._repeatDelay = this.vars.repeatDelay || 0;\n    if (this._repeat) {\n      this._uncache(true); //ensures that if there is any repeat, the totalDuration will get recalculated to accurately report it.\n    }\n    this.render = TweenMax.prototype.render; //speed optimization (avoid prototype lookup on this \"hot\" method)\n  },\n      _tinyNum = 0.0000000001,\n      TweenLiteInternals = _TweenLite2.default._internals,\n      _isSelector = TweenLiteInternals.isSelector,\n      _isArray = TweenLiteInternals.isArray,\n      p = TweenMax.prototype = _TweenLite2.default.to({}, 0.1, {}),\n      _blankArray = [];\n\n  TweenMax.version = '2.0.2';\n  p.constructor = TweenMax;\n  p.kill()._gc = false;\n  TweenMax.killTweensOf = TweenMax.killDelayedCallsTo = _TweenLite2.default.killTweensOf;\n  TweenMax.getTweensOf = _TweenLite2.default.getTweensOf;\n  TweenMax.lagSmoothing = _TweenLite2.default.lagSmoothing;\n  TweenMax.ticker = _TweenLite2.default.ticker;\n  TweenMax.render = _TweenLite2.default.render;\n\n  p.invalidate = function () {\n    this._yoyo = this.vars.yoyo === true || !!this.vars.yoyoEase;\n    this._repeat = this.vars.repeat || 0;\n    this._repeatDelay = this.vars.repeatDelay || 0;\n    this._yoyoEase = null;\n    this._uncache(true);\n    return _TweenLite2.default.prototype.invalidate.call(this);\n  };\n\n  p.updateTo = function (vars, resetDuration) {\n    var curRatio = this.ratio,\n        immediate = this.vars.immediateRender || vars.immediateRender,\n        p;\n    if (resetDuration && this._startTime < this._timeline._time) {\n      this._startTime = this._timeline._time;\n      this._uncache(false);\n      if (this._gc) {\n        this._enabled(true, false);\n      } else {\n        this._timeline.insert(this, this._startTime - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.\n      }\n    }\n    for (p in vars) {\n      this.vars[p] = vars[p];\n    }\n    if (this._initted || immediate) {\n      if (resetDuration) {\n        this._initted = false;\n        if (immediate) {\n          this.render(0, true, true);\n        }\n      } else {\n        if (this._gc) {\n          this._enabled(true, false);\n        }\n        if (this._notifyPluginsOfEnabled && this._firstPT) {\n          _TweenLite2.default._onPluginEvent('_onDisable', this); //in case a plugin like MotionBlur must perform some cleanup tasks\n        }\n        if (this._time / this._duration > 0.998) {\n          //if the tween has finished (or come extremely close to finishing), we just need to rewind it to 0 and then render it again at the end which forces it to re-initialize (parsing the new vars). We allow tweens that are close to finishing (but haven't quite finished) to work this way too because otherwise, the values are so small when determining where to project the starting values that binary math issues creep in and can make the tween appear to render incorrectly when run backwards.\n          var prevTime = this._totalTime;\n          this.render(0, true, false);\n          this._initted = false;\n          this.render(prevTime, true, false);\n        } else {\n          this._initted = false;\n          this._init();\n          if (this._time > 0 || immediate) {\n            var inv = 1 / (1 - curRatio),\n                pt = this._firstPT,\n                endValue;\n            while (pt) {\n              endValue = pt.s + pt.c;\n              pt.c *= inv;\n              pt.s = endValue - pt.c;\n              pt = pt._next;\n            }\n          }\n        }\n      }\n    }\n    return this;\n  };\n\n  p.render = function (time, suppressEvents, force) {\n    if (!this._initted) if (this._duration === 0 && this.vars.repeat) {\n      //zero duration tweens that render immediately have render() called from TweenLite's constructor, before TweenMax's constructor has finished setting _repeat, _repeatDelay, and _yoyo which are critical in determining totalDuration() so we need to call invalidate() which is a low-kb way to get those set properly.\n      this.invalidate();\n    }\n    var totalDur = !this._dirty ? this._totalDuration : this.totalDuration(),\n        prevTime = this._time,\n        prevTotalTime = this._totalTime,\n        prevCycle = this._cycle,\n        duration = this._duration,\n        prevRawPrevTime = this._rawPrevTime,\n        isComplete,\n        callback,\n        pt,\n        cycleDuration,\n        r,\n        type,\n        pow,\n        rawPrevTime,\n        yoyoEase;\n    if (time >= totalDur - 0.0000001 && time >= 0) {\n      //to work around occasional floating point math artifacts.\n      this._totalTime = totalDur;\n      this._cycle = this._repeat;\n      if (this._yoyo && (this._cycle & 1) !== 0) {\n        this._time = 0;\n        this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;\n      } else {\n        this._time = duration;\n        this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;\n      }\n      if (!this._reversed) {\n        isComplete = true;\n        callback = 'onComplete';\n        force = force || this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n      }\n      if (duration === 0) if (this._initted || !this.vars.lazy || force) {\n        //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n        if (this._startTime === this._timeline._duration) {\n          //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.\n          time = 0;\n        }\n        if (prevRawPrevTime < 0 || time <= 0 && time >= -0.0000001 || prevRawPrevTime === _tinyNum && this.data !== 'isPause') if (prevRawPrevTime !== time) {\n          //note: when this.data is \"isPause\", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.\n          force = true;\n          if (prevRawPrevTime > _tinyNum) {\n            callback = 'onReverseComplete';\n          }\n        }\n        this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n      }\n    } else if (time < 0.0000001) {\n      //to work around occasional floating point math artifacts, round super small values to 0.\n      this._totalTime = this._time = this._cycle = 0;\n      this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;\n      if (prevTotalTime !== 0 || duration === 0 && prevRawPrevTime > 0) {\n        callback = 'onReverseComplete';\n        isComplete = this._reversed;\n      }\n      if (time < 0) {\n        this._active = false;\n        if (duration === 0) if (this._initted || !this.vars.lazy || force) {\n          //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n          if (prevRawPrevTime >= 0) {\n            force = true;\n          }\n          this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n        }\n      }\n      if (!this._initted) {\n        //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.\n        force = true;\n      }\n    } else {\n      this._totalTime = this._time = time;\n      if (this._repeat !== 0) {\n        cycleDuration = duration + this._repeatDelay;\n        this._cycle = this._totalTime / cycleDuration >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)\n        if (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {\n          this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)\n        }\n        this._time = this._totalTime - this._cycle * cycleDuration;\n        if (this._yoyo) if ((this._cycle & 1) !== 0) {\n          this._time = duration - this._time;\n          yoyoEase = this._yoyoEase || this.vars.yoyoEase; //note: we don't set this._yoyoEase in _init() like we do other properties because it's TweenMax-specific and doing it here allows us to optimize performance (most tweens don't have a yoyoEase). Note that we also must skip the this.ratio calculation further down right after we _init() in this function, because we're doing it here.\n          if (yoyoEase) {\n            if (!this._yoyoEase) {\n              if (yoyoEase === true && !this._initted) {\n                //if it's not initted and yoyoEase is true, this._ease won't have been populated yet so we must discern it here.\n                yoyoEase = this.vars.ease;\n                this._yoyoEase = yoyoEase = !yoyoEase ? _TweenLite2.default.defaultEase : yoyoEase instanceof _TweenLite.Ease ? yoyoEase : typeof yoyoEase === 'function' ? new _TweenLite.Ease(yoyoEase, this.vars.easeParams) : _TweenLite.Ease.map[yoyoEase] || _TweenLite2.default.defaultEase;\n              } else {\n                this._yoyoEase = yoyoEase = yoyoEase === true ? this._ease : yoyoEase instanceof _TweenLite.Ease ? yoyoEase : _TweenLite.Ease.map[yoyoEase];\n              }\n            }\n            this.ratio = yoyoEase ? 1 - yoyoEase.getRatio((duration - this._time) / duration) : 0;\n          }\n        }\n        if (this._time > duration) {\n          this._time = duration;\n        } else if (this._time < 0) {\n          this._time = 0;\n        }\n      }\n      if (this._easeType && !yoyoEase) {\n        r = this._time / duration;\n        type = this._easeType;\n        pow = this._easePower;\n        if (type === 1 || type === 3 && r >= 0.5) {\n          r = 1 - r;\n        }\n        if (type === 3) {\n          r *= 2;\n        }\n        if (pow === 1) {\n          r *= r;\n        } else if (pow === 2) {\n          r *= r * r;\n        } else if (pow === 3) {\n          r *= r * r * r;\n        } else if (pow === 4) {\n          r *= r * r * r * r;\n        }\n\n        if (type === 1) {\n          this.ratio = 1 - r;\n        } else if (type === 2) {\n          this.ratio = r;\n        } else if (this._time / duration < 0.5) {\n          this.ratio = r / 2;\n        } else {\n          this.ratio = 1 - r / 2;\n        }\n      } else if (!yoyoEase) {\n        this.ratio = this._ease.getRatio(this._time / duration);\n      }\n    }\n\n    if (prevTime === this._time && !force && prevCycle === this._cycle) {\n      if (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) {\n        //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.\n        this._callback('onUpdate');\n      }\n      return;\n    } else if (!this._initted) {\n      this._init();\n      if (!this._initted || this._gc) {\n        //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.\n        return;\n      } else if (!force && this._firstPT && (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration)) {\n        //we stick it in the queue for rendering at the very end of the tick - this is a performance optimization because browsers invalidate styles and force a recalculation if you read, write, and then read style data (so it's better to read/read/read/write/write/write than read/write/read/write/read/write). The down side, of course, is that usually you WANT things to render immediately because you may have code running right after that which depends on the change. Like imagine running TweenLite.set(...) and then immediately after that, creating a nother tween that animates the same property to another value; the starting values of that 2nd tween wouldn't be accurate if lazy is true.\n        this._time = prevTime;\n        this._totalTime = prevTotalTime;\n        this._rawPrevTime = prevRawPrevTime;\n        this._cycle = prevCycle;\n        TweenLiteInternals.lazyTweens.push(this);\n        this._lazy = [time, suppressEvents];\n        return;\n      }\n      //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.\n      if (this._time && !isComplete && !yoyoEase) {\n        this.ratio = this._ease.getRatio(this._time / duration);\n      } else if (isComplete && this._ease._calcEnd && !yoyoEase) {\n        this.ratio = this._ease.getRatio(this._time === 0 ? 0 : 1);\n      }\n    }\n    if (this._lazy !== false) {\n      this._lazy = false;\n    }\n\n    if (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {\n      this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.\n    }\n    if (prevTotalTime === 0) {\n      if (this._initted === 2 && time > 0) {\n        //this.invalidate();\n        this._init(); //will just apply overwriting since _initted of (2) means it was a from() tween that had immediateRender:true\n      }\n      if (this._startAt) {\n        if (time >= 0) {\n          this._startAt.render(time, true, force);\n        } else if (!callback) {\n          callback = '_dummyGS'; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.\n        }\n      }\n      if (this.vars.onStart) if (this._totalTime !== 0 || duration === 0) if (!suppressEvents) {\n        this._callback('onStart');\n      }\n    }\n\n    pt = this._firstPT;\n    while (pt) {\n      if (pt.f) {\n        pt.t[pt.p](pt.c * this.ratio + pt.s);\n      } else {\n        pt.t[pt.p] = pt.c * this.ratio + pt.s;\n      }\n      pt = pt._next;\n    }\n\n    if (this._onUpdate) {\n      if (time < 0) if (this._startAt && this._startTime) {\n        //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n        this._startAt.render(time, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n      }\n      if (!suppressEvents) if (this._totalTime !== prevTotalTime || callback) {\n        this._callback('onUpdate');\n      }\n    }\n    if (this._cycle !== prevCycle) if (!suppressEvents) if (!this._gc) if (this.vars.onRepeat) {\n      this._callback('onRepeat');\n    }\n    if (callback) if (!this._gc || force) {\n      //check gc because there's a chance that kill() could be called in an onUpdate\n      if (time < 0 && this._startAt && !this._onUpdate && this._startTime) {\n        //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n        this._startAt.render(time, true, force);\n      }\n      if (isComplete) {\n        if (this._timeline.autoRemoveChildren) {\n          this._enabled(false, false);\n        }\n        this._active = false;\n      }\n      if (!suppressEvents && this.vars[callback]) {\n        this._callback(callback);\n      }\n      if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) {\n        //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the \"time\" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.\n        this._rawPrevTime = 0;\n      }\n    }\n  };\n\n  //---- STATIC FUNCTIONS -----------------------------------------------------------------------------------------------------------\n\n  TweenMax.to = function (target, duration, vars) {\n    return new TweenMax(target, duration, vars);\n  };\n\n  TweenMax.from = function (target, duration, vars) {\n    vars.runBackwards = true;\n    vars.immediateRender = vars.immediateRender != false;\n    return new TweenMax(target, duration, vars);\n  };\n\n  TweenMax.fromTo = function (target, duration, fromVars, toVars) {\n    toVars.startAt = fromVars;\n    toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;\n    return new TweenMax(target, duration, toVars);\n  };\n\n  TweenMax.staggerTo = TweenMax.allTo = function (targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n    stagger = stagger || 0;\n    var delay = 0,\n        a = [],\n        finalComplete = function finalComplete() {\n      if (vars.onComplete) {\n        vars.onComplete.apply(vars.onCompleteScope || this, arguments);\n      }\n      onCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this, onCompleteAllParams || _blankArray);\n    },\n        cycle = vars.cycle,\n        fromCycle = vars.startAt && vars.startAt.cycle,\n        l,\n        copy,\n        i,\n        p;\n    if (!_isArray(targets)) {\n      if (typeof targets === 'string') {\n        targets = _TweenLite2.default.selector(targets) || targets;\n      }\n      if (_isSelector(targets)) {\n        targets = _slice(targets);\n      }\n    }\n    targets = targets || [];\n    if (stagger < 0) {\n      targets = _slice(targets);\n      targets.reverse();\n      stagger *= -1;\n    }\n    l = targets.length - 1;\n    for (i = 0; i <= l; i++) {\n      copy = {};\n      for (p in vars) {\n        copy[p] = vars[p];\n      }\n      if (cycle) {\n        _applyCycle(copy, targets, i);\n        if (copy.duration != null) {\n          duration = copy.duration;\n          delete copy.duration;\n        }\n      }\n      if (fromCycle) {\n        fromCycle = copy.startAt = {};\n        for (p in vars.startAt) {\n          fromCycle[p] = vars.startAt[p];\n        }\n        _applyCycle(copy.startAt, targets, i);\n      }\n      copy.delay = delay + (copy.delay || 0);\n      if (i === l && onCompleteAll) {\n        copy.onComplete = finalComplete;\n      }\n      a[i] = new TweenMax(targets[i], duration, copy);\n      delay += stagger;\n    }\n    return a;\n  };\n\n  TweenMax.staggerFrom = TweenMax.allFrom = function (targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n    vars.runBackwards = true;\n    vars.immediateRender = vars.immediateRender != false;\n    return TweenMax.staggerTo(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n  };\n\n  TweenMax.staggerFromTo = TweenMax.allFromTo = function (targets, duration, fromVars, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n    toVars.startAt = fromVars;\n    toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;\n    return TweenMax.staggerTo(targets, duration, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n  };\n\n  TweenMax.delayedCall = function (delay, callback, params, scope, useFrames) {\n    return new TweenMax(callback, 0, { delay: delay, onComplete: callback, onCompleteParams: params, callbackScope: scope, onReverseComplete: callback, onReverseCompleteParams: params, immediateRender: false, useFrames: useFrames, overwrite: 0 });\n  };\n\n  TweenMax.set = function (target, vars) {\n    return new TweenMax(target, 0, vars);\n  };\n\n  TweenMax.isTweening = function (target) {\n    return _TweenLite2.default.getTweensOf(target, true).length > 0;\n  };\n\n  var _getChildrenOf = function _getChildrenOf(timeline, includeTimelines) {\n    var a = [],\n        cnt = 0,\n        tween = timeline._first;\n    while (tween) {\n      if (tween instanceof _TweenLite2.default) {\n        a[cnt++] = tween;\n      } else {\n        if (includeTimelines) {\n          a[cnt++] = tween;\n        }\n        a = a.concat(_getChildrenOf(tween, includeTimelines));\n        cnt = a.length;\n      }\n      tween = tween._next;\n    }\n    return a;\n  },\n      getAllTweens = TweenMax.getAllTweens = function (includeTimelines) {\n    return _getChildrenOf(_TweenLite.Animation._rootTimeline, includeTimelines).concat(_getChildrenOf(_TweenLite.Animation._rootFramesTimeline, includeTimelines));\n  };\n\n  TweenMax.killAll = function (complete, tweens, delayedCalls, timelines) {\n    if (tweens == null) {\n      tweens = true;\n    }\n    if (delayedCalls == null) {\n      delayedCalls = true;\n    }\n    var a = getAllTweens(timelines != false),\n        l = a.length,\n        allTrue = tweens && delayedCalls && timelines,\n        isDC,\n        tween,\n        i;\n    for (i = 0; i < l; i++) {\n      tween = a[i];\n      if (allTrue || tween instanceof _TweenLite.SimpleTimeline || (isDC = tween.target === tween.vars.onComplete) && delayedCalls || tweens && !isDC) {\n        if (complete) {\n          tween.totalTime(tween._reversed ? 0 : tween.totalDuration());\n        } else {\n          tween._enabled(false, false);\n        }\n      }\n    }\n  };\n\n  TweenMax.killChildTweensOf = function (parent, complete) {\n    if (parent == null) {\n      return;\n    }\n    var tl = TweenLiteInternals.tweenLookup,\n        a,\n        curParent,\n        p,\n        i,\n        l;\n    if (typeof parent === 'string') {\n      parent = _TweenLite2.default.selector(parent) || parent;\n    }\n    if (_isSelector(parent)) {\n      parent = _slice(parent);\n    }\n    if (_isArray(parent)) {\n      i = parent.length;\n      while (--i > -1) {\n        TweenMax.killChildTweensOf(parent[i], complete);\n      }\n      return;\n    }\n    a = [];\n    for (p in tl) {\n      curParent = tl[p].target.parentNode;\n      while (curParent) {\n        if (curParent === parent) {\n          a = a.concat(tl[p].tweens);\n        }\n        curParent = curParent.parentNode;\n      }\n    }\n    l = a.length;\n    for (i = 0; i < l; i++) {\n      if (complete) {\n        a[i].totalTime(a[i].totalDuration());\n      }\n      a[i]._enabled(false, false);\n    }\n  };\n\n  var _changePause = function _changePause(pause, tweens, delayedCalls, timelines) {\n    tweens = tweens !== false;\n    delayedCalls = delayedCalls !== false;\n    timelines = timelines !== false;\n    var a = getAllTweens(timelines),\n        allTrue = tweens && delayedCalls && timelines,\n        i = a.length,\n        isDC,\n        tween;\n    while (--i > -1) {\n      tween = a[i];\n      if (allTrue || tween instanceof _TweenLite.SimpleTimeline || (isDC = tween.target === tween.vars.onComplete) && delayedCalls || tweens && !isDC) {\n        tween.paused(pause);\n      }\n    }\n  };\n\n  TweenMax.pauseAll = function (tweens, delayedCalls, timelines) {\n    _changePause(true, tweens, delayedCalls, timelines);\n  };\n\n  TweenMax.resumeAll = function (tweens, delayedCalls, timelines) {\n    _changePause(false, tweens, delayedCalls, timelines);\n  };\n\n  TweenMax.globalTimeScale = function (value) {\n    var tl = _TweenLite.Animation._rootTimeline,\n        t = _TweenLite2.default.ticker.time;\n    if (!arguments.length) {\n      return tl._timeScale;\n    }\n    value = value || _tinyNum; //can't allow zero because it'll throw the math off\n    tl._startTime = t - (t - tl._startTime) * tl._timeScale / value;\n    tl = _TweenLite.Animation._rootFramesTimeline;\n    t = _TweenLite2.default.ticker.frame;\n    tl._startTime = t - (t - tl._startTime) * tl._timeScale / value;\n    tl._timeScale = _TweenLite.Animation._rootTimeline._timeScale = value;\n    return value;\n  };\n\n  //---- GETTERS / SETTERS ----------------------------------------------------------------------------------------------------------\n\n  p.progress = function (value, suppressEvents) {\n    return !arguments.length ? this._time / this.duration() : this.totalTime(this.duration() * (this._yoyo && (this._cycle & 1) !== 0 ? 1 - value : value) + this._cycle * (this._duration + this._repeatDelay), suppressEvents);\n  };\n\n  p.totalProgress = function (value, suppressEvents) {\n    return !arguments.length ? this._totalTime / this.totalDuration() : this.totalTime(this.totalDuration() * value, suppressEvents);\n  };\n\n  p.time = function (value, suppressEvents) {\n    if (!arguments.length) {\n      return this._time;\n    }\n    if (this._dirty) {\n      this.totalDuration();\n    }\n    if (value > this._duration) {\n      value = this._duration;\n    }\n    if (this._yoyo && (this._cycle & 1) !== 0) {\n      value = this._duration - value + this._cycle * (this._duration + this._repeatDelay);\n    } else if (this._repeat !== 0) {\n      value += this._cycle * (this._duration + this._repeatDelay);\n    }\n    return this.totalTime(value, suppressEvents);\n  };\n\n  p.duration = function (value) {\n    if (!arguments.length) {\n      return this._duration; //don't set _dirty = false because there could be repeats that haven't been factored into the _totalDuration yet. Otherwise, if you create a repeated TweenMax and then immediately check its duration(), it would cache the value and the totalDuration would not be correct, thus repeats wouldn't take effect.\n    }\n    return _TweenLite.Animation.prototype.duration.call(this, value);\n  };\n\n  p.totalDuration = function (value) {\n    if (!arguments.length) {\n      if (this._dirty) {\n        //instead of Infinity, we use 999999999999 so that we can accommodate reverses\n        this._totalDuration = this._repeat === -1 ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat;\n        this._dirty = false;\n      }\n      return this._totalDuration;\n    }\n    return this._repeat === -1 ? this : this.duration((value - this._repeat * this._repeatDelay) / (this._repeat + 1));\n  };\n\n  p.repeat = function (value) {\n    if (!arguments.length) {\n      return this._repeat;\n    }\n    this._repeat = value;\n    return this._uncache(true);\n  };\n\n  p.repeatDelay = function (value) {\n    if (!arguments.length) {\n      return this._repeatDelay;\n    }\n    this._repeatDelay = value;\n    return this._uncache(true);\n  };\n\n  p.yoyo = function (value) {\n    if (!arguments.length) {\n      return this._yoyo;\n    }\n    this._yoyo = value;\n    return this;\n  };\n\n  return TweenMax;\n}, true); /* eslint-disable */\n/*!\r\n * VERSION: 2.0.2\r\n * DATE: 2018-08-27\r\n * UPDATES AND DOCS AT: http://greensock.com\r\n *\r\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\r\n * This work is subject to the terms at http://greensock.com/standard-license or for\r\n * Club GreenSock members, the software agreement that was issued with your membership.\r\n * \r\n * @author: Jack Doyle, jack@greensock.com\r\n **/\n\nvar TweenMax = exports.TweenMax = _TweenLite.globals.TweenMax;\nvar TweenMaxBase = exports.TweenMaxBase = TweenMax;\nexports.default = TweenMax;\nexports.TweenLite = _TweenLite2.default;\nexports.Ease = _TweenLite.Ease;\nexports.Power0 = _TweenLite.Power0;\nexports.Power1 = _TweenLite.Power1;\nexports.Power2 = _TweenLite.Power2;\nexports.Power3 = _TweenLite.Power3;\nexports.Power4 = _TweenLite.Power4;\nexports.Linear = _TweenLite.Linear;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._gsScope = exports.ExpoScaleEase = exports.Sine = exports.Expo = exports.Circ = exports.SteppedEase = exports.SlowMo = exports.RoughEase = exports.Bounce = exports.Elastic = exports.Back = exports.Linear = exports.Power4 = exports.Power3 = exports.Power2 = exports.Power1 = exports.Power0 = exports.Ease = exports.TweenPlugin = exports.DirectionalRotationPlugin = exports.RoundPropsPlugin = exports.BezierPlugin = exports.AttrPlugin = exports.CSSPlugin = exports.TimelineMax = exports.TimelineLite = exports.TweenMax = exports.TweenLite = exports.default = undefined;\n\nvar _TweenLite = __webpack_require__(1);\n\nvar _TweenLite2 = _interopRequireDefault(_TweenLite);\n\nvar _TimelineLite = __webpack_require__(6);\n\nvar _TimelineLite2 = _interopRequireDefault(_TimelineLite);\n\nvar _TimelineMax = __webpack_require__(15);\n\nvar _TimelineMax2 = _interopRequireDefault(_TimelineMax);\n\nvar _TweenMax = __webpack_require__(32);\n\nvar _TweenMax2 = _interopRequireDefault(_TweenMax);\n\nvar _CSSPlugin = __webpack_require__(11);\n\nvar _CSSPlugin2 = _interopRequireDefault(_CSSPlugin);\n\nvar _AttrPlugin = __webpack_require__(9);\n\nvar _AttrPlugin2 = _interopRequireDefault(_AttrPlugin);\n\nvar _RoundPropsPlugin = __webpack_require__(14);\n\nvar _RoundPropsPlugin2 = _interopRequireDefault(_RoundPropsPlugin);\n\nvar _DirectionalRotationPlugin = __webpack_require__(12);\n\nvar _DirectionalRotationPlugin2 = _interopRequireDefault(_DirectionalRotationPlugin);\n\nvar _BezierPlugin = __webpack_require__(10);\n\nvar _BezierPlugin2 = _interopRequireDefault(_BezierPlugin);\n\nvar _EasePack = __webpack_require__(13);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*!\r\n * VERSION: 2.0.2\r\n * DATE: 2018-08-27\r\n * UPDATES AND DOCS AT: http://greensock.com\r\n *\r\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\r\n * This work is subject to the terms at http://greensock.com/standard-license or for\r\n * Club GreenSock members, the software agreement that was issued with your membership.\r\n *\r\n * @author: Jack Doyle, jack@greensock.com\r\n **/\nexports.default = _TweenMax2.default;\nexports.TweenLite = _TweenLite2.default;\nexports.TweenMax = _TweenMax2.default;\nexports.TimelineLite = _TimelineLite2.default;\nexports.TimelineMax = _TimelineMax2.default;\nexports.CSSPlugin = _CSSPlugin2.default;\nexports.AttrPlugin = _AttrPlugin2.default;\nexports.BezierPlugin = _BezierPlugin2.default;\nexports.RoundPropsPlugin = _RoundPropsPlugin2.default;\nexports.DirectionalRotationPlugin = _DirectionalRotationPlugin2.default;\nexports.TweenPlugin = _TweenLite.TweenPlugin;\nexports.Ease = _TweenLite.Ease;\nexports.Power0 = _TweenLite.Power0;\nexports.Power1 = _TweenLite.Power1;\nexports.Power2 = _TweenLite.Power2;\nexports.Power3 = _TweenLite.Power3;\nexports.Power4 = _TweenLite.Power4;\nexports.Linear = _TweenLite.Linear;\nexports.Back = _EasePack.Back;\nexports.Elastic = _EasePack.Elastic;\nexports.Bounce = _EasePack.Bounce;\nexports.RoughEase = _EasePack.RoughEase;\nexports.SlowMo = _EasePack.SlowMo;\nexports.SteppedEase = _EasePack.SteppedEase;\nexports.Circ = _EasePack.Circ;\nexports.Expo = _EasePack.Expo;\nexports.Sine = _EasePack.Sine;\nexports.ExpoScaleEase = _EasePack.ExpoScaleEase;\nexports._gsScope = _TweenLite._gsScope;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2xpYnMvZ3NhcC9lc20vaW5kZXguanM/YWY4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogVkVSU0lPTjogMi4wLjJcclxuICogREFURTogMjAxOC0wOC0yN1xyXG4gKiBVUERBVEVTIEFORCBET0NTIEFUOiBodHRwOi8vZ3JlZW5zb2NrLmNvbVxyXG4gKlxyXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxOCwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBUaGlzIHdvcmsgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cDovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIHNvZnR3YXJlIGFncmVlbWVudCB0aGF0IHdhcyBpc3N1ZWQgd2l0aCB5b3VyIG1lbWJlcnNoaXAuXHJcbiAqXHJcbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxyXG4gKiovXHJcbmltcG9ydCBUd2VlbkxpdGUsIHsgX2dzU2NvcGUsIFR3ZWVuUGx1Z2luLCBFYXNlLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyIH0gZnJvbSAnLi9Ud2VlbkxpdGUuanMnO1xyXG5pbXBvcnQgVGltZWxpbmVMaXRlIGZyb20gJy4vVGltZWxpbmVMaXRlLmpzJztcclxuaW1wb3J0IFRpbWVsaW5lTWF4IGZyb20gJy4vVGltZWxpbmVNYXguanMnO1xyXG5pbXBvcnQgVHdlZW5NYXggZnJvbSAnLi9Ud2Vlbk1heC5qcyc7XHJcbmltcG9ydCBDU1NQbHVnaW4gZnJvbSAnLi9DU1NQbHVnaW4uanMnO1xyXG5pbXBvcnQgQXR0clBsdWdpbiBmcm9tICcuL0F0dHJQbHVnaW4uanMnO1xyXG5pbXBvcnQgUm91bmRQcm9wc1BsdWdpbiBmcm9tICcuL1JvdW5kUHJvcHNQbHVnaW4uanMnO1xyXG5pbXBvcnQgRGlyZWN0aW9uYWxSb3RhdGlvblBsdWdpbiBmcm9tICcuL0RpcmVjdGlvbmFsUm90YXRpb25QbHVnaW4uanMnO1xyXG5pbXBvcnQgQmV6aWVyUGx1Z2luIGZyb20gJy4vQmV6aWVyUGx1Z2luLmpzJztcclxuaW1wb3J0IHsgQmFjaywgRWxhc3RpYywgQm91bmNlLCBSb3VnaEVhc2UsIFNsb3dNbywgU3RlcHBlZEVhc2UsIENpcmMsIEV4cG8sIFNpbmUsIEV4cG9TY2FsZUVhc2UgfSBmcm9tICcuL0Vhc2VQYWNrLmpzJztcclxuXHJcblxyXG5leHBvcnQgeyBUd2Vlbk1heCBhcyBkZWZhdWx0IH07XHJcbmV4cG9ydCB7IFR3ZWVuTGl0ZSwgVHdlZW5NYXgsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXgsIENTU1BsdWdpbiwgQXR0clBsdWdpbiwgQmV6aWVyUGx1Z2luLCBSb3VuZFByb3BzUGx1Z2luLCBEaXJlY3Rpb25hbFJvdGF0aW9uUGx1Z2luLCBUd2VlblBsdWdpbiwgRWFzZSwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgQmFjaywgRWxhc3RpYywgQm91bmNlLCBSb3VnaEVhc2UsIFNsb3dNbywgU3RlcHBlZEVhc2UsIENpcmMsIEV4cG8sIFNpbmUsIEV4cG9TY2FsZUVhc2UsIF9nc1Njb3BlIH07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvbGlicy9nc2FwL2VzbS9pbmRleC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVdBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQXJCQTs7Ozs7Ozs7Ozs7QUF1QkE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* eslint-disable */\n/*!\r\n * fullPage 2.8.9\r\n * https://github.com/alvarotrigo/fullPage.js\r\n * @license MIT licensed\r\n *\r\n * Copyright (C) 2015 alvarotrigo.com - A project by Alvaro Trigo\r\n */\n!function (e, n) {\n  'use strict';\n   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (t) {\n    return n(t, e, e.document, e.Math);\n  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 'object' == (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) && exports ? module.exports = n(require('jquery'), e, e.document, e.Math) : n(jQuery, e, e.document, e.Math);\n}('undefined' != typeof window ? window : undefined, function (e, n, t, o, i) {\n  'use strict';\n  var a = 'fullpage-wrapper',\n      r = '.' + a,\n      l = 'fp-scrollable',\n      s = '.' + l,\n      c = 'fp-responsive',\n      d = 'fp-notransition',\n      f = 'fp-destroyed',\n      u = 'fp-enabled',\n      h = 'fp-viewing',\n      p = 'active',\n      v = '.' + p,\n      g = 'fp-completely',\n      m = '.' + g,\n      w = '.section',\n      S = 'fp-section',\n      y = '.' + S,\n      b = y + v,\n      x = y + ':first',\n      C = y + ':last',\n      T = 'fp-tableCell',\n      k = '.' + T,\n      I = 'fp-auto-height',\n      L = 'fp-normal-scroll',\n      E = 'fp-nav',\n      A = '#' + E,\n      M = 'fp-tooltip',\n      O = '.' + M,\n      H = 'fp-show-active',\n      B = '.slide',\n      R = 'fp-slide',\n      z = '.' + R,\n      D = z + v,\n      P = 'fp-slides',\n      q = '.' + P,\n      F = 'fp-slidesContainer',\n      V = '.' + F,\n      W = 'fp-table',\n      Y = 'fp-slidesNav',\n      j = '.' + Y,\n      N = j + ' a',\n      U = 'fp-controlArrow',\n      X = '.' + U,\n      K = 'fp-prev',\n      Q = '.' + K,\n      G = U + ' ' + K,\n      J = X + Q,\n      Z = 'fp-next',\n      $ = '.' + Z,\n      _ = U + ' ' + Z,\n      ee = X + $,\n      ne = e(n),\n      te = e(t),\n      oe = { scrollbars: !0, mouseWheel: !0, hideScrollbars: !1, fadeScrollbars: !1, disableMouse: !0, interactiveScrollbars: !0 };e.fn.fullpage = function (l) {\n    function s(n, t) {\n      ot('autoScrolling', n, t);var o = e(b);l.autoScrolling && !l.scrollBar ? (rt.css({ overflow: 'hidden', height: '100%' }), U(Et.recordHistory, 'internal'), vt.css({ '-ms-touch-action': 'none', 'touch-action': 'none' }), o.length && $n(o.position().top)) : (rt.css({ overflow: 'visible', height: 'initial' }), U(!1, 'internal'), vt.css({ '-ms-touch-action': '', 'touch-action': '' }), $n(0), o.length && rt.scrollTop(o.position().top));\n    }function U(e, n) {\n      ot('recordHistory', e, n);\n    }function Q(e, n) {\n      ot('scrollingSpeed', e, n);\n    }function Z(e, n) {\n      ot('fitToSection', e, n);\n    }function $(e) {\n      l.lockAnchors = e;\n    }function ae(e) {\n      e ? (Nn(), Un()) : (jn(), Xn());\n    }function re(n, t) {\n      'undefined' != typeof t ? (t = t.replace(/ /g, '').split(','), e.each(t, function (e, t) {\n        et(n, t, 'm');\n      })) : n ? (ae(!0), Kn()) : (ae(!1), Qn());\n    }function le(n, t) {\n      'undefined' != typeof t ? (t = t.replace(/ /g, '').split(','), e.each(t, function (e, t) {\n        et(n, t, 'k');\n      })) : l.keyboardScrolling = n;\n    }function se() {\n      var n = e(b).prev(y);n.length || !l.loopTop && !l.continuousVertical || (n = e(y).last()), n.length && Ue(n, null, !0);\n    }function ce() {\n      var n = e(b).next(y);n.length || !l.loopBottom && !l.continuousVertical || (n = e(y).first()), n.length && Ue(n, null, !1);\n    }function de(e, n) {\n      Q(0, 'internal'), fe(e, n), Q(Et.scrollingSpeed, 'internal');\n    }function fe(e, n) {\n      var t = Bn(e);'undefined' != typeof n ? zn(e, n) : t.length > 0 && Ue(t);\n    }function ue(e) {\n      Ye('right', e);\n    }function he(e) {\n      Ye('left', e);\n    }function pe(n) {\n      if (!vt.hasClass(f)) {\n        mt = !0, gt = ne.height(), e(y).each(function () {\n          var n = e(this).find(q),\n              t = e(this).find(z);l.verticalCentered && e(this).find(k).css('height', On(e(this)) + 'px'), e(this).css('height', gt + 'px'), l.scrollOverflow && (t.length ? t.each(function () {\n            An(e(this));\n          }) : An(e(this))), t.length > 1 && gn(n, n.find(D));\n        });var t = e(b),\n            o = t.index(y);o && de(o + 1), mt = !1, e.isFunction(l.afterResize) && n && l.afterResize.call(vt), e.isFunction(l.afterReBuild) && !n && l.afterReBuild.call(vt);\n      }\n    }function ve(n) {\n      var t = lt.hasClass(c);n ? t || (s(!1, 'internal'), Z(!1, 'internal'), e(A).hide(), lt.addClass(c), e.isFunction(l.afterResponsive) && l.afterResponsive.call(vt, n)) : t && (s(Et.autoScrolling, 'internal'), Z(Et.autoScrolling, 'internal'), e(A).show(), lt.removeClass(c), e.isFunction(l.afterResponsive) && l.afterResponsive.call(vt, n));\n    }function ge() {\n      l.css3 && (l.css3 = Yn()), l.scrollBar = l.scrollBar || l.hybrid, we(), Se(), re(!0), s(l.autoScrolling, 'internal');var n = e(b).find(D);n.length && (0 !== e(b).index(y) || 0 === e(b).index(y) && 0 !== n.index()) && Zn(n), bn(), Wn(), 'complete' === t.readyState && tn(), ne.on('load', tn);\n    }function me() {\n      ne.on('scroll', Oe).on('hashchange', on).blur(fn).resize(yn), te.keydown(an).keyup(ln).on('click touchstart', A + ' a', un).on('click touchstart', N, hn).on('click', O, rn), e(y).on('click touchstart', X, dn), l.normalScrollElements && (te.on('mouseenter', l.normalScrollElements, function () {\n        ae(!1);\n      }), te.on('mouseleave', l.normalScrollElements, function () {\n        ae(!0);\n      }));\n    }function we() {\n      var n = vt.find(l.sectionSelector);l.anchors.length || (l.anchors = n.filter('[data-anchor]').map(function () {\n        return e(this).data('anchor').toString();\n      }).get()), l.navigationTooltips.length || (l.navigationTooltips = n.filter('[data-tooltip]').map(function () {\n        return e(this).data('tooltip').toString();\n      }).get());\n    }function Se() {\n      vt.css({ height: '100%', position: 'relative' }), vt.addClass(a), e('html').addClass(u), gt = ne.height(), vt.removeClass(f), Ce(), e(y).each(function (n) {\n        var t = e(this),\n            o = t.find(z),\n            i = o.length;be(t, n), xe(t, n), i > 0 ? ye(t, o, i) : l.verticalCentered && Mn(t);\n      }), l.fixedElements && l.css3 && e(l.fixedElements).appendTo(lt), l.navigation && ke(), Le(), l.scrollOverflow ? ('complete' === t.readyState && Ie(), ne.on('load', Ie)) : Me();\n    }function ye(n, t, o) {\n      var i = 100 * o,\n          a = 100 / o;t.wrapAll('<div class=\"' + F + '\" />'), t.parent().wrap('<div class=\"' + P + '\" />'), n.find(V).css('width', i + '%'), o > 1 && (l.controlArrows && Te(n), l.slidesNavigation && Pn(n, o)), t.each(function (n) {\n        e(this).css('width', a + '%'), l.verticalCentered && Mn(e(this));\n      });var r = n.find(D);r.length && (0 !== e(b).index(y) || 0 === e(b).index(y) && 0 !== r.index()) ? Zn(r) : t.eq(0).addClass(p);\n    }function be(n, t) {\n      t || 0 !== e(b).length || n.addClass(p), n.css('height', gt + 'px'), l.paddingTop && n.css('padding-top', l.paddingTop), l.paddingBottom && n.css('padding-bottom', l.paddingBottom), 'undefined' != typeof l.sectionsColor[t] && n.css('background-color', l.sectionsColor[t]), 'undefined' != typeof l.anchors[t] && n.attr('data-anchor', l.anchors[t]);\n    }function xe(n, t) {\n      'undefined' != typeof l.anchors[t] && n.hasClass(p) && In(l.anchors[t], t), l.menu && l.css3 && e(l.menu).closest(r).length && e(l.menu).appendTo(lt);\n    }function Ce() {\n      vt.find(l.sectionSelector).addClass(S), vt.find(l.slideSelector).addClass(R);\n    }function Te(e) {\n      e.find(q).after('<div class=\"' + G + '\"></div><div class=\"' + _ + '\"></div>'), '#fff' != l.controlArrowColor && (e.find(ee).css('border-color', 'transparent transparent transparent ' + l.controlArrowColor), e.find(J).css('border-color', 'transparent ' + l.controlArrowColor + ' transparent transparent')), l.loopHorizontal || e.find(J).hide();\n    }function ke() {\n      lt.append('<div id=\"' + E + '\"><ul></ul></div>');var n = e(A);n.addClass(function () {\n        return l.showActiveTooltip ? H + ' ' + l.navigationPosition : l.navigationPosition;\n      });for (var t = 0; t < e(y).length; t++) {\n        var o = '';l.anchors.length && (o = l.anchors[t]);var i = '<li><a href=\"#' + o + '\"><span></span></a>',\n            a = l.navigationTooltips[t];'undefined' != typeof a && '' !== a && (i += '<div class=\"' + M + ' ' + l.navigationPosition + '\">' + a + '</div>'), i += '</li>', n.find('ul').append(i);\n      }e(A).css('margin-top', '-' + e(A).height() / 2 + 'px'), e(A).find('li').eq(e(b).index(y)).find('a').addClass(p);\n    }function Ie() {\n      e(y).each(function () {\n        var n = e(this).find(z);n.length ? n.each(function () {\n          An(e(this));\n        }) : An(e(this));\n      }), Me();\n    }function Le() {\n      vt.find('iframe[src*=\"youtube.com/embed/\"]').each(function () {\n        Ee(e(this), 'enablejsapi=1');\n      });\n    }function Ee(e, n) {\n      var t = e.attr('src');e.attr('src', t + Ae(t) + n);\n    }function Ae(e) {\n      return (/\\?/.test(e) ? '&' : '?'\n      );\n    }function Me() {\n      var n = e(b);n.addClass(g), l.scrollOverflowHandler.afterRender && l.scrollOverflowHandler.afterRender(n), Ze(n), $e(n), l.scrollOverflowHandler.afterLoad(), e.isFunction(l.afterLoad) && l.afterLoad.call(n, n.data('anchor'), n.index(y) + 1), e.isFunction(l.afterRender) && l.afterRender.call(vt);\n    }function Oe() {\n      var n;if (!l.autoScrolling || l.scrollBar) {\n        var o = ne.scrollTop(),\n            i = Be(o),\n            a = 0,\n            r = o + ne.height() / 2,\n            s = lt.height() - ne.height() === o,\n            c = t.querySelectorAll(y);if (s) a = c.length - 1;else if (o) for (var d = 0; d < c.length; ++d) {\n          var f = c[d];f.offsetTop <= r && (a = d);\n        } else a = 0;if (He(i) && (e(b).hasClass(g) || e(b).addClass(g).siblings().removeClass(g)), n = e(c).eq(a), !n.hasClass(p)) {\n          At = !0;var u,\n              h,\n              v = e(b),\n              m = v.index(y) + 1,\n              w = Ln(n),\n              S = n.data('anchor'),\n              x = n.index(y) + 1,\n              C = n.find(D);C.length && (h = C.data('anchor'), u = C.index()), St && (n.addClass(p).siblings().removeClass(p), e.isFunction(l.onLeave) && l.onLeave.call(v, m, x, w), e.isFunction(l.afterLoad) && l.afterLoad.call(n, S, x), en(v), Ze(n), $e(n), In(S, x - 1), l.anchors.length && (ct = S), qn(u, h, S, x)), clearTimeout(kt), kt = setTimeout(function () {\n            At = !1;\n          }, 100);\n        }l.fitToSection && (clearTimeout(It), It = setTimeout(function () {\n          St && l.fitToSection && (e(b).is(n) && (mt = !0), Ue(e(b)), mt = !1);\n        }, l.fitToSectionDelay));\n      }\n    }function He(n) {\n      var t = e(b).position().top,\n          o = t + ne.height();return 'up' == n ? o >= ne.scrollTop() + ne.height() : t <= ne.scrollTop();\n    }function Be(e) {\n      var n = e > Mt ? 'down' : 'up';return Mt = e, Dt = e, n;\n    }function Re(e, n) {\n      if (bt.m[e]) {\n        var t = 'down' === e ? 'bottom' : 'top',\n            o = 'down' === e ? ce : se;if (n.length > 0) {\n          if (!l.scrollOverflowHandler.isScrolled(t, n)) return !0;o();\n        } else o();\n      }\n    }function ze(e) {\n      var n = e.originalEvent;!Pe(e.target) && l.autoScrolling && qe(n) && e.preventDefault();\n    }function De(n) {\n      var t = n.originalEvent,\n          i = e(t.target).closest(y);if (!Pe(n.target) && qe(t)) {\n        l.autoScrolling && n.preventDefault();var a = l.scrollOverflowHandler.scrollable(i),\n            r = Jn(t);Bt = r.y, Rt = r.x, i.find(q).length && o.abs(Ht - Rt) > o.abs(Ot - Bt) ? !ut && o.abs(Ht - Rt) > ne.outerWidth() / 100 * l.touchSensitivity && (Ht > Rt ? bt.m.right && ue(i) : bt.m.left && he(i)) : l.autoScrolling && St && o.abs(Ot - Bt) > ne.height() / 100 * l.touchSensitivity && (Ot > Bt ? Re('down', a) : Bt > Ot && Re('up', a));\n      }\n    }function Pe(n, t) {\n      t = t || 0;var o = e(n).parent();return t < l.normalScrollElementTouchThreshold && o.is(l.normalScrollElements) ? !0 : t == l.normalScrollElementTouchThreshold ? !1 : Pe(o, ++t);\n    }function qe(e) {\n      return 'undefined' == typeof e.pointerType || 'mouse' != e.pointerType;\n    }function Fe(e) {\n      var n = e.originalEvent;if (l.fitToSection && rt.stop(), qe(n)) {\n        var t = Jn(n);Ot = t.y, Ht = t.x;\n      }\n    }function Ve(e, n) {\n      for (var t = 0, i = e.slice(o.max(e.length - n, 1)), a = 0; a < i.length; a++) {\n        t += i[a];\n      }return o.ceil(t / n);\n    }function We(t) {\n      var i = new Date().getTime(),\n          a = e(m).hasClass(L);if (l.autoScrolling && !ft && !a) {\n        t = t || n.event;var r = t.wheelDelta || -t.deltaY || -t.detail,\n            s = o.max(-1, o.min(1, r)),\n            c = 'undefined' != typeof t.wheelDeltaX || 'undefined' != typeof t.deltaX,\n            d = o.abs(t.wheelDeltaX) < o.abs(t.wheelDelta) || o.abs(t.deltaX) < o.abs(t.deltaY) || !c;yt.length > 149 && yt.shift(), yt.push(o.abs(r)), l.scrollBar && (t.preventDefault ? t.preventDefault() : t.returnValue = !1);var f = e(b),\n            u = l.scrollOverflowHandler.scrollable(f),\n            h = i - zt;if (zt = i, h > 200 && (yt = []), St) {\n          var p = Ve(yt, 10),\n              v = Ve(yt, 70),\n              g = p >= v;g && d && (0 > s ? Re('down', u) : Re('up', u));\n        }return !1;\n      }l.fitToSection && rt.stop();\n    }function Ye(n, t) {\n      var o = 'undefined' == typeof t ? e(b) : t,\n          i = o.find(q),\n          a = i.find(z).length;if (!(!i.length || ut || 2 > a)) {\n        var r = i.find(D),\n            s = null;if (s = 'left' === n ? r.prev(z) : r.next(z), !s.length) {\n          if (!l.loopHorizontal) return;s = 'left' === n ? r.siblings(':last') : r.siblings(':first');\n        }ut = !0, gn(i, s, n);\n      }\n    }function je() {\n      e(D).each(function () {\n        Zn(e(this), 'internal');\n      });\n    }function Ne(e) {\n      var n = e.position(),\n          t = n.top,\n          o = n.top > Dt,\n          i = t - gt + e.outerHeight(),\n          a = l.bigSectionsDestination;return e.outerHeight() > gt ? (!o && !a || 'bottom' === a) && (t = i) : (o || mt && e.is(':last-child')) && (t = i), Dt = t, t;\n    }function Ue(n, t, o) {\n      if ('undefined' != typeof n) {\n        var i,\n            a,\n            r = Ne(n),\n            s = { element: n, callback: t, isMovementUp: o, dtop: r, yMovement: Ln(n), anchorLink: n.data('anchor'), sectionIndex: n.index(y), activeSlide: n.find(D), activeSection: e(b), leavingSection: e(b).index(y) + 1, localIsResizing: mt };s.activeSection.is(n) && !mt || l.scrollBar && ne.scrollTop() === s.dtop && !n.hasClass(I) || (s.activeSlide.length && (i = s.activeSlide.data('anchor'), a = s.activeSlide.index()), l.autoScrolling && l.continuousVertical && 'undefined' != typeof s.isMovementUp && (!s.isMovementUp && 'up' == s.yMovement || s.isMovementUp && 'down' == s.yMovement) && (s = Qe(s)), (!e.isFunction(l.onLeave) || s.localIsResizing || l.onLeave.call(s.activeSection, s.leavingSection, s.sectionIndex + 1, s.yMovement) !== !1) && (en(s.activeSection), l.scrollOverflowHandler.beforeLeave(), n.addClass(p).siblings().removeClass(p), Ze(n), l.scrollOverflowHandler.onLeave(), St = !1, qn(a, i, s.anchorLink, s.sectionIndex), Xe(s), ct = s.anchorLink, In(s.anchorLink, s.sectionIndex)));\n      }\n    }function Xe(n) {\n      if (l.css3 && l.autoScrolling && !l.scrollBar) {\n        var t = 'translate3d(0px, -' + o.round(n.dtop) + 'px, 0px)';Hn(t, !0), l.scrollingSpeed ? (clearTimeout(Ct), Ct = setTimeout(function () {\n          Je(n);\n        }, l.scrollingSpeed)) : Je(n);\n      } else {\n        var i = Ke(n);e(i.element).animate(i.options, l.scrollingSpeed, l.easing).promise().done(function () {\n          l.scrollBar ? setTimeout(function () {\n            Je(n);\n          }, 30) : Je(n);\n        });\n      }\n    }function Ke(e) {\n      var n = {};return l.autoScrolling && !l.scrollBar ? (n.options = { top: -e.dtop }, n.element = r) : (n.options = { scrollTop: e.dtop }, n.element = 'html, body'), n;\n    }function Qe(n) {\n      return n.isMovementUp ? e(b).before(n.activeSection.nextAll(y)) : e(b).after(n.activeSection.prevAll(y).get().reverse()), $n(e(b).position().top), je(), n.wrapAroundElements = n.activeSection, n.dtop = n.element.position().top, n.yMovement = Ln(n.element), n;\n    }function Ge(n) {\n      n.wrapAroundElements && n.wrapAroundElements.length && (n.isMovementUp ? e(x).before(n.wrapAroundElements) : e(C).after(n.wrapAroundElements), $n(e(b).position().top), je());\n    }function Je(n) {\n      Ge(n), e.isFunction(l.afterLoad) && !n.localIsResizing && l.afterLoad.call(n.element, n.anchorLink, n.sectionIndex + 1), l.scrollOverflowHandler.afterLoad(), n.localIsResizing || $e(n.element), n.element.addClass(g).siblings().removeClass(g), St = !0, e.isFunction(n.callback) && n.callback.call(this);\n    }function Ze(n) {\n      if (l.lazyLoading) {\n        var t,\n            o = nn(n);o.find('img[data-src], source[data-src], audio[data-src], iframe[data-src]').each(function () {\n          t = e(this), t.attr('src', t.data('src')), t.removeAttr('data-src'), t.is('source') && t.closest('video').get(0).load();\n        });\n      }\n    }function $e(n) {\n      var t = nn(n);t.find('video, audio').each(function () {\n        var n = e(this).get(0);n.hasAttribute('data-autoplay') && 'function' == typeof n.play && n.play();\n      }), t.find('iframe[src*=\"youtube.com/embed/\"]').each(function () {\n        var n = e(this).get(0);n.hasAttribute('data-autoplay') && _e(n), n.onload = function () {\n          n.hasAttribute('data-autoplay') && _e(n);\n        };\n      });\n    }function _e(e) {\n      e.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"playVideo\",\"args\":\"\"}', '*');\n    }function en(n) {\n      var t = nn(n);t.find('video, audio').each(function () {\n        var n = e(this).get(0);n.hasAttribute('data-keepplaying') || 'function' != typeof n.pause || n.pause();\n      }), t.find('iframe[src*=\"youtube.com/embed/\"]').each(function () {\n        var n = e(this).get(0);/youtube\\.com\\/embed\\//.test(e(this).attr('src')) && !n.hasAttribute('data-keepplaying') && e(this).get(0).contentWindow.postMessage('{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}', '*');\n      });\n    }function nn(n) {\n      var t = n.find(D);return t.length && (n = e(t)), n;\n    }function tn() {\n      var e = n.location.hash.replace('#', '').split('/'),\n          t = decodeURIComponent(e[0]),\n          o = decodeURIComponent(e[1]);t && (l.animateAnchor ? zn(t, o) : de(t, o));\n    }function on() {\n      if (!At && !l.lockAnchors) {\n        var e = n.location.hash.replace('#', '').split('/'),\n            t = decodeURIComponent(e[0]),\n            o = decodeURIComponent(e[1]),\n            i = 'undefined' == typeof ct,\n            a = 'undefined' == typeof ct && 'undefined' == typeof o && !ut;t.length && (t && t !== ct && !i || a || !ut && dt != o) && zn(t, o);\n      }\n    }function an(n) {\n      clearTimeout(Lt);var t = e(':focus');if (!t.is('textarea') && !t.is('input') && !t.is('select') && 'true' !== t.attr('contentEditable') && '' !== t.attr('contentEditable') && l.keyboardScrolling && l.autoScrolling) {\n        var o = n.which,\n            i = [40, 38, 32, 33, 34];e.inArray(o, i) > -1 && n.preventDefault(), ft = n.ctrlKey, Lt = setTimeout(function () {\n          pn(n);\n        }, 150);\n      }\n    }function rn() {\n      e(this).prev().trigger('click');\n    }function ln(e) {\n      wt && (ft = e.ctrlKey);\n    }function sn(e) {\n      2 == e.which && (Pt = e.pageY, vt.on('mousemove', vn));\n    }function cn(e) {\n      2 == e.which && vt.off('mousemove');\n    }function dn() {\n      var n = e(this).closest(y);e(this).hasClass(K) ? bt.m.left && he(n) : bt.m.right && ue(n);\n    }function fn() {\n      wt = !1, ft = !1;\n    }function un(n) {\n      n.preventDefault();var t = e(this).parent().index();Ue(e(y).eq(t));\n    }function hn(n) {\n      n.preventDefault();var t = e(this).closest(y).find(q),\n          o = t.find(z).eq(e(this).closest('li').index());gn(t, o);\n    }function pn(n) {\n      var t = n.shiftKey;switch (n.which) {case 38:case 33:\n          bt.k.up && se();break;case 32:\n          if (t && bt.k.up) {\n            se();break;\n          }case 40:case 34:\n          bt.k.down && ce();break;case 36:\n          bt.k.up && fe(1);break;case 35:\n          bt.k.down && fe(e(y).length);break;case 37:\n          bt.k.left && he();break;case 39:\n          bt.k.right && ue();break;default:\n          return;}\n    }function vn(e) {\n      St && (e.pageY < Pt && bt.m.up ? se() : e.pageY > Pt && bt.m.down && ce()), Pt = e.pageY;\n    }function gn(n, t, o) {\n      var i = n.closest(y),\n          a = { slides: n, destiny: t, direction: o, destinyPos: t.position(), slideIndex: t.index(), section: i, sectionIndex: i.index(y), anchorLink: i.data('anchor'), slidesNav: i.find(j), slideAnchor: Vn(t), prevSlide: i.find(D), prevSlideIndex: i.find(D).index(), localIsResizing: mt };return a.xMovement = En(a.prevSlideIndex, a.slideIndex), a.localIsResizing || (St = !1), l.onSlideLeave && !a.localIsResizing && 'none' !== a.xMovement && e.isFunction(l.onSlideLeave) && l.onSlideLeave.call(a.prevSlide, a.anchorLink, a.sectionIndex + 1, a.prevSlideIndex, a.xMovement, a.slideIndex) === !1 ? void (ut = !1) : (t.addClass(p).siblings().removeClass(p), a.localIsResizing || (en(a.prevSlide), Ze(t)), !l.loopHorizontal && l.controlArrows && (i.find(J).toggle(0 !== a.slideIndex), i.find(ee).toggle(!t.is(':last-child'))), i.hasClass(p) && qn(a.slideIndex, a.slideAnchor, a.anchorLink, a.sectionIndex), void wn(n, a, !0));\n    }function mn(n) {\n      Sn(n.slidesNav, n.slideIndex), n.localIsResizing || (e.isFunction(l.afterSlideLoad) && l.afterSlideLoad.call(n.destiny, n.anchorLink, n.sectionIndex + 1, n.slideAnchor, n.slideIndex), St = !0, $e(n.destiny)), ut = !1;\n    }function wn(e, n, t) {\n      var i = n.destinyPos;if (l.css3) {\n        var a = 'translate3d(-' + o.round(i.left) + 'px, 0px, 0px)';xn(e.find(V)).css(_n(a)), Tt = setTimeout(function () {\n          t && mn(n);\n        }, l.scrollingSpeed, l.easing);\n      } else e.animate({ scrollLeft: o.round(i.left) }, l.scrollingSpeed, l.easing, function () {\n        t && mn(n);\n      });\n    }function Sn(e, n) {\n      e.find(v).removeClass(p), e.find('li').eq(n).find('a').addClass(p);\n    }function yn() {\n      if (bn(), ht) {\n        var n = e(t.activeElement);if (!n.is('textarea') && !n.is('input') && !n.is('select')) {\n          var i = ne.height();o.abs(i - qt) > 20 * o.max(qt, i) / 100 && (pe(!0), qt = i);\n        }\n      } else clearTimeout(xt), xt = setTimeout(function () {\n        pe(!0);\n      }, 350);\n    }function bn() {\n      var e = l.responsive || l.responsiveWidth,\n          n = l.responsiveHeight,\n          t = e && ne.outerWidth() < e,\n          o = n && ne.height() < n;e && n ? ve(t || o) : e ? ve(t) : n && ve(o);\n    }function xn(e) {\n      var n = 'all ' + l.scrollingSpeed + 'ms ' + l.easingcss3;return e.removeClass(d), e.css({ '-webkit-transition': n, transition: n });\n    }function Cn(e) {\n      return e.addClass(d);\n    }function Tn(n, t) {\n      l.navigation && (e(A).find(v).removeClass(p), n ? e(A).find('a[href=\"#' + n + '\"]').addClass(p) : e(A).find('li').eq(t).find('a').addClass(p));\n    }function kn(n) {\n      l.menu && (e(l.menu).find(v).removeClass(p), e(l.menu).find('[data-menuanchor=\"' + n + '\"]').addClass(p));\n    }function In(e, n) {\n      kn(e), Tn(e, n);\n    }function Ln(n) {\n      var t = e(b).index(y),\n          o = n.index(y);return t == o ? 'none' : t > o ? 'up' : 'down';\n    }function En(e, n) {\n      return e == n ? 'none' : e > n ? 'left' : 'right';\n    }function An(e) {\n      if (!e.hasClass('fp-noscroll')) {\n        e.css('overflow', 'hidden');var n,\n            t = l.scrollOverflowHandler,\n            o = t.wrapContent(),\n            i = e.closest(y),\n            a = t.scrollable(e);a.length ? n = t.scrollHeight(e) : (n = e.get(0).scrollHeight, l.verticalCentered && (n = e.find(k).get(0).scrollHeight));var r = gt - parseInt(i.css('padding-bottom')) - parseInt(i.css('padding-top'));n > r ? a.length ? t.update(e, r) : (l.verticalCentered ? e.find(k).wrapInner(o) : e.wrapInner(o), t.create(e, r)) : t.remove(e), e.css('overflow', '');\n      }\n    }function Mn(e) {\n      e.hasClass(W) || e.addClass(W).wrapInner('<div class=\"' + T + '\" style=\"height:' + On(e) + 'px;\" />');\n    }function On(e) {\n      var n = gt;if (l.paddingTop || l.paddingBottom) {\n        var t = e;t.hasClass(S) || (t = e.closest(y));var o = parseInt(t.css('padding-top')) + parseInt(t.css('padding-bottom'));n = gt - o;\n      }return n;\n    }function Hn(e, n) {\n      n ? xn(vt) : Cn(vt), vt.css(_n(e)), setTimeout(function () {\n        vt.removeClass(d);\n      }, 10);\n    }function Bn(n) {\n      var t = vt.find(y + '[data-anchor=\"' + n + '\"]');return t.length || (t = e(y).eq(n - 1)), t;\n    }function Rn(e, n) {\n      var t = n.find(q),\n          o = t.find(z + '[data-anchor=\"' + e + '\"]');return o.length || (o = t.find(z).eq(e)), o;\n    }function zn(e, n) {\n      var t = Bn(e);t.length && ('undefined' == typeof n && (n = 0), e === ct || t.hasClass(p) ? Dn(t, n) : Ue(t, function () {\n        Dn(t, n);\n      }));\n    }function Dn(e, n) {\n      if ('undefined' != typeof n) {\n        var t = e.find(q),\n            o = Rn(n, e);o.length && gn(t, o);\n      }\n    }function Pn(e, n) {\n      e.append('<div class=\"' + Y + '\"><ul></ul></div>');var t = e.find(j);t.addClass(l.slidesNavPosition);for (var o = 0; n > o; o++) {\n        t.find('ul').append('<li><a href=\"#\"><span></span></a></li>');\n      }t.css('margin-left', '-' + t.width() / 2 + 'px'), t.find('li').first().find('a').addClass(p);\n    }function qn(e, n, t, o) {\n      var i = '';l.anchors.length && !l.lockAnchors && (e ? ('undefined' != typeof t && (i = t), 'undefined' == typeof n && (n = e), dt = n, Fn(i + '/' + n)) : 'undefined' != typeof e ? (dt = n, Fn(t)) : Fn(t)), Wn();\n    }function Fn(e) {\n      if (l.recordHistory) location.hash = e;else if (ht || pt) n.history.replaceState(i, i, '#' + e);else {\n        var t = n.location.href.split('#')[0];n.location.replace(t + '#' + e);\n      }\n    }function Vn(e) {\n      var n = e.data('anchor'),\n          t = e.index();return 'undefined' == typeof n && (n = t), n;\n    }function Wn() {\n      var n = e(b),\n          t = n.find(D),\n          o = Vn(n),\n          i = Vn(t),\n          a = String(o);t.length && (a = a + '-' + i), a = a.replace('/', '-').replace('#', '');var r = new RegExp('\\\\b\\\\s?' + h + '-[^\\\\s]+\\\\b', 'g');lt[0].className = lt[0].className.replace(r, ''), lt.addClass(h + '-' + a);\n    }function Yn() {\n      var e,\n          o = t.createElement('p'),\n          a = { webkitTransform: '-webkit-transform', OTransform: '-o-transform', msTransform: '-ms-transform', MozTransform: '-moz-transform', transform: 'transform' };t.body.insertBefore(o, null);for (var r in a) {\n        o.style[r] !== i && (o.style[r] = 'translate3d(1px,1px,1px)', e = n.getComputedStyle(o).getPropertyValue(a[r]));\n      }return t.body.removeChild(o), e !== i && e.length > 0 && 'none' !== e;\n    }function jn() {\n      t.addEventListener ? (t.removeEventListener('mousewheel', We, !1), t.removeEventListener('wheel', We, !1), t.removeEventListener('MozMousePixelScroll', We, !1)) : t.detachEvent('onmousewheel', We);\n    }function Nn() {\n      var e,\n          o = '';n.addEventListener ? e = 'addEventListener' : (e = 'attachEvent', o = 'on');var a = 'onwheel' in t.createElement('div') ? 'wheel' : t.onmousewheel !== i ? 'mousewheel' : 'DOMMouseScroll';'DOMMouseScroll' == a ? t[e](o + 'MozMousePixelScroll', We, !1) : t[e](o + a, We, !1);\n    }function Un() {\n      vt.on('mousedown', sn).on('mouseup', cn);\n    }function Xn() {\n      vt.off('mousedown', sn).off('mouseup', cn);\n    }function Kn() {\n      if (l.autoScrolling && (ht || pt)) {\n        var n = Gn();lt.off('touchmove ' + n.move).on('touchmove ' + n.move, ze), e(r).off('touchstart ' + n.down).on('touchstart ' + n.down, Fe).off('touchmove ' + n.move).on('touchmove ' + n.move, De);\n      }\n    }function Qn() {\n      if (ht || pt) {\n        var n = Gn();e(r).off('touchstart ' + n.down).off('touchmove ' + n.move);\n      }\n    }function Gn() {\n      var e;return e = n.PointerEvent ? { down: 'pointerdown', move: 'pointermove' } : { down: 'MSPointerDown', move: 'MSPointerMove' };\n    }function Jn(e) {\n      var n = [];return n.y = 'undefined' != typeof e.pageY && (e.pageY || e.pageX) ? e.pageY : e.touches[0].pageY, n.x = 'undefined' != typeof e.pageX && (e.pageY || e.pageX) ? e.pageX : e.touches[0].pageX, pt && qe(e) && l.scrollBar && (n.y = e.touches[0].pageY, n.x = e.touches[0].pageX), n;\n    }function Zn(e, n) {\n      Q(0, 'internal'), 'undefined' != typeof n && (mt = !0), gn(e.closest(q), e), 'undefined' != typeof n && (mt = !1), Q(Et.scrollingSpeed, 'internal');\n    }function $n(e) {\n      var n = o.round(e);if (l.scrollBar || !l.autoScrolling) vt.scrollTop(n);else if (l.css3) {\n        var t = 'translate3d(0px, -' + n + 'px, 0px)';Hn(t, !1);\n      } else vt.css('top', -n);\n    }function _n(e) {\n      return { '-webkit-transform': e, '-moz-transform': e, '-ms-transform': e, transform: e };\n    }function et(e, n, t) {\n      switch (n) {case 'up':\n          bt[t].up = e;break;case 'down':\n          bt[t].down = e;break;case 'left':\n          bt[t].left = e;break;case 'right':\n          bt[t].right = e;break;case 'all':\n          'm' == t ? re(e) : le(e);}\n    }function nt(n) {\n      s(!1, 'internal'), re(!1), le(!1), vt.addClass(f), clearTimeout(Tt), clearTimeout(Ct), clearTimeout(xt), clearTimeout(kt), clearTimeout(It), ne.off('scroll', Oe).off('hashchange', on).off('resize', yn), te.off('click touchstart', A + ' a').off('mouseenter', A + ' li').off('mouseleave', A + ' li').off('click touchstart', N).off('mouseover', l.normalScrollElements).off('mouseout', l.normalScrollElements), e(y).off('click touchstart', X), clearTimeout(Tt), clearTimeout(Ct), n && tt();\n    }function tt() {\n      $n(0), vt.find('img[data-src], source[data-src], audio[data-src], iframe[data-src]').each(function () {\n        e(this).attr('src', e(this).data('src')), e(this).removeAttr('data-src');\n      }), e(A + ', ' + j + ', ' + X).remove(), e(y).css({ height: '', 'background-color': '', padding: '' }), e(z).css({ width: '' }), vt.css({ height: '', position: '', '-ms-touch-action': '', 'touch-action': '' }), rt.css({ overflow: '', height: '' }), e('html').removeClass(u), lt.removeClass(c), e.each(lt.get(0).className.split(/\\s+/), function (e, n) {\n        0 === n.indexOf(h) && lt.removeClass(n);\n      }), e(y + ', ' + z).each(function () {\n        l.scrollOverflowHandler.remove(e(this)), e(this).removeClass(W + ' ' + p);\n      }), Cn(vt), vt.find(k + ', ' + V + ', ' + q).each(function () {\n        e(this).replaceWith(this.childNodes);\n      }), rt.scrollTop(0);var n = [S, R, F];e.each(n, function (n, t) {\n        e('.' + t).removeClass(t);\n      });\n    }function ot(e, n, t) {\n      l[e] = n, 'internal' !== t && (Et[e] = n);\n    }function it() {\n      var n = ['fadingEffect', 'continuousHorizontal', 'scrollHorizontally', 'interlockedSlides', 'resetSliders', 'responsiveSlides', 'offsetSections', 'dragAndMove'];return e('html').hasClass(u) ? void at('error', 'Fullpage.js can only be initialized once and you are doing it multiple times!') : (l.continuousVertical && (l.loopTop || l.loopBottom) && (l.continuousVertical = !1, at('warn', 'Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled')), l.scrollBar && l.scrollOverflow && at('warn', 'Option `scrollBar` is mutually exclusive with `scrollOverflow`. Sections with scrollOverflow might not work well in Firefox'), !l.continuousVertical || !l.scrollBar && l.autoScrolling || (l.continuousVertical = !1, at('warn', 'Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled')), e.each(n, function (e, n) {\n        l[n] && at('warn', 'fullpage.js extensions require jquery.fullpage.extensions.min.js file instead of the usual jquery.fullpage.js. Requested: ' + n);\n      }), void e.each(l.anchors, function (n, t) {\n        var o = te.find('[name]').filter(function () {\n          return e(this).attr('name') && e(this).attr('name').toLowerCase() == t.toLowerCase();\n        }),\n            i = te.find('[id]').filter(function () {\n          return e(this).attr('id') && e(this).attr('id').toLowerCase() == t.toLowerCase();\n        });(i.length || o.length) && (at('error', 'data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).'), i.length && at('error', '\"' + t + '\" is is being used by another element `id` property'), o.length && at('error', '\"' + t + '\" is is being used by another element `name` property'));\n      }));\n    }function at(e, n) {\n      console && console[e] && console[e]('fullPage: ' + n);\n    }if (e('html').hasClass(u)) return void it();var rt = e('html, body'),\n        lt = e('body'),\n        st = e.fn.fullpage;l = e.extend({ menu: !1, anchors: [], lockAnchors: !1, navigation: !1, navigationPosition: 'right', navigationTooltips: [], showActiveTooltip: !1, slidesNavigation: !1, slidesNavPosition: 'bottom', scrollBar: !1, hybrid: !1, css3: !0, scrollingSpeed: 700, autoScrolling: !0, fitToSection: !0, fitToSectionDelay: 1e3, easing: 'easeInOutCubic', easingcss3: 'ease', loopBottom: !1, loopTop: !1, loopHorizontal: !0, continuousVertical: !1, continuousHorizontal: !1, scrollHorizontally: !1, interlockedSlides: !1, dragAndMove: !1, offsetSections: !1, resetSliders: !1, fadingEffect: !1, normalScrollElements: null, scrollOverflow: !1, scrollOverflowHandler: ie, scrollOverflowOptions: null, touchSensitivity: 5, normalScrollElementTouchThreshold: 5, bigSectionsDestination: null, keyboardScrolling: !0, animateAnchor: !0, recordHistory: !0, controlArrows: !0, controlArrowColor: '#fff', verticalCentered: !0, sectionsColor: [], paddingTop: 0, paddingBottom: 0, fixedElements: null, responsive: 0, responsiveWidth: 0, responsiveHeight: 0, responsiveSlides: !1, sectionSelector: w, slideSelector: B, afterLoad: null, onLeave: null, afterRender: null, afterResize: null, afterReBuild: null, afterSlideLoad: null, onSlideLeave: null, afterResponsive: null, lazyLoading: !0 }, l);var ct,\n        dt,\n        ft,\n        ut = !1,\n        ht = navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),\n        pt = 'ontouchstart' in n || navigator.msMaxTouchPoints > 0 || navigator.maxTouchPoints,\n        vt = e(this),\n        gt = ne.height(),\n        mt = !1,\n        wt = !0,\n        St = !0,\n        yt = [],\n        bt = {};bt.m = { up: !0, down: !0, left: !0, right: !0 }, bt.k = e.extend(!0, {}, bt.m);var xt,\n        Ct,\n        Tt,\n        kt,\n        It,\n        Lt,\n        Et = e.extend(!0, {}, l);it(), oe.click = pt, oe = e.extend(oe, l.scrollOverflowOptions), e.extend(e.easing, { easeInOutCubic: function easeInOutCubic(e, n, t, o, i) {\n        return (n /= i / 2) < 1 ? o / 2 * n * n * n + t : o / 2 * ((n -= 2) * n * n + 2) + t;\n      } }), e(this).length && (st.setAutoScrolling = s, st.setRecordHistory = U, st.setScrollingSpeed = Q, st.setFitToSection = Z, st.setLockAnchors = $, st.setMouseWheelScrolling = ae, st.setAllowScrolling = re, st.setKeyboardScrolling = le, st.moveSectionUp = se, st.moveSectionDown = ce, st.silentMoveTo = de, st.moveTo = fe, st.moveSlideRight = ue, st.moveSlideLeft = he, st.reBuild = pe, st.setResponsive = ve, st.destroy = nt, ge(), me());var At = !1,\n        Mt = 0,\n        Ot = 0,\n        Ht = 0,\n        Bt = 0,\n        Rt = 0,\n        zt = new Date().getTime(),\n        Dt = 0,\n        Pt = 0,\n        qt = gt;\n  }, 'undefined' != typeof IScroll && (IScroll.prototype.wheelOn = function () {\n    this.wrapper.addEventListener('wheel', this), this.wrapper.addEventListener('mousewheel', this), this.wrapper.addEventListener('DOMMouseScroll', this);\n  }, IScroll.prototype.wheelOff = function () {\n    this.wrapper.removeEventListener('wheel', this), this.wrapper.removeEventListener('mousewheel', this), this.wrapper.removeEventListener('DOMMouseScroll', this);\n  });var ie = { refreshId: null, iScrollInstances: [], toggleWheel: function toggleWheel(n) {\n      var t = e(b).find(s);t.each(function () {\n        var t = e(this).data('iscrollInstance');'undefined' != typeof t && t && (n ? t.wheelOn() : t.wheelOff());\n      });\n    }, onLeave: function onLeave() {\n      ie.toggleWheel(!1);\n    }, beforeLeave: function beforeLeave() {\n      ie.onLeave();\n    }, afterLoad: function afterLoad() {\n      ie.toggleWheel(!0);\n    }, create: function create(n, t) {\n      var o = n.find(s);o.height(t), o.each(function () {\n        var n = e(this),\n            t = n.data('iscrollInstance');t && e.each(ie.iScrollInstances, function () {\n          e(this).destroy();\n        }), t = new IScroll(n.get(0), oe), ie.iScrollInstances.push(t), t.wheelOff(), n.data('iscrollInstance', t);\n      });\n    }, isScrolled: function isScrolled(e, n) {\n      var t = n.data('iscrollInstance');return t ? 'top' === e ? t.y >= 0 && !n.scrollTop() : 'bottom' === e ? 0 - t.y + n.scrollTop() + 1 + n.innerHeight() >= n[0].scrollHeight : void 0 : !0;\n    }, scrollable: function scrollable(e) {\n      return e.find(q).length ? e.find(D).find(s) : e.find(s);\n    }, scrollHeight: function scrollHeight(e) {\n      return e.find(s).children().first().get(0).scrollHeight;\n    }, remove: function remove(e) {\n      var n = e.find(s);if (n.length) {\n        var t = n.data('iscrollInstance');t.destroy(), n.data('iscrollInstance', null);\n      }e.find(s).children().first().children().first().unwrap().unwrap();\n    }, update: function update(n, t) {\n      clearTimeout(ie.refreshId), ie.refreshId = setTimeout(function () {\n        e.each(ie.iScrollInstances, function () {\n          e(this).get(0).refresh();\n        });\n      }, 150), n.find(s).css('height', t + 'px').parent().css('height', t + 'px');\n    }, wrapContent: function wrapContent() {\n      return '<div class=\"' + l + '\"><div class=\"fp-scroller\"></div></div>';\n    } };\n});\n//# sourceMappingURL=jquery.fullpage.min.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, exports) {

eval("\nvar indexOf = [].indexOf;\n\nmodule.exports = function(arr, obj){\n  if (indexOf) return arr.indexOf(obj);\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRDovdml0YWxpay9rbGltb3Yvfi9pbmRleG9mL2luZGV4LmpzP2I5MWQiXSwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIEQ6L3ZpdGFsaWsva2xpbW92L34vaW5kZXhvZi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*! iScroll v5.2.0 ~ (c) 2008-2016 Matteo Spinelli ~ http://cubiq.org/license */\n(function (window, document, Math) {\nvar rAF = window.requestAnimationFrame\t||\n\twindow.webkitRequestAnimationFrame\t||\n\twindow.mozRequestAnimationFrame\t\t||\n\twindow.oRequestAnimationFrame\t\t||\n\twindow.msRequestAnimationFrame\t\t||\n\tfunction (callback) { window.setTimeout(callback, 1000 / 60); };\n\nvar utils = (function () {\n\tvar me = {};\n\n\tvar _elementStyle = document.createElement('div').style;\n\tvar _vendor = (function () {\n\t\tvar vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],\n\t\t\ttransform,\n\t\t\ti = 0,\n\t\t\tl = vendors.length;\n\n\t\tfor ( ; i < l; i++ ) {\n\t\t\ttransform = vendors[i] + 'ransform';\n\t\t\tif ( transform in _elementStyle ) return vendors[i].substr(0, vendors[i].length-1);\n\t\t}\n\n\t\treturn false;\n\t})();\n\n\tfunction _prefixStyle (style) {\n\t\tif ( _vendor === false ) return false;\n\t\tif ( _vendor === '' ) return style;\n\t\treturn _vendor + style.charAt(0).toUpperCase() + style.substr(1);\n\t}\n\n\tme.getTime = Date.now || function getTime () { return new Date().getTime(); };\n\n\tme.extend = function (target, obj) {\n\t\tfor ( var i in obj ) {\n\t\t\ttarget[i] = obj[i];\n\t\t}\n\t};\n\n\tme.addEvent = function (el, type, fn, capture) {\n\t\tel.addEventListener(type, fn, !!capture);\n\t};\n\n\tme.removeEvent = function (el, type, fn, capture) {\n\t\tel.removeEventListener(type, fn, !!capture);\n\t};\n\n\tme.prefixPointerEvent = function (pointerEvent) {\n\t\treturn window.MSPointerEvent ?\n\t\t\t'MSPointer' + pointerEvent.charAt(7).toUpperCase() + pointerEvent.substr(8):\n\t\t\tpointerEvent;\n\t};\n\n\tme.momentum = function (current, start, time, lowerMargin, wrapperSize, deceleration) {\n\t\tvar distance = current - start,\n\t\t\tspeed = Math.abs(distance) / time,\n\t\t\tdestination,\n\t\t\tduration;\n\n\t\tdeceleration = deceleration === undefined ? 0.0006 : deceleration;\n\n\t\tdestination = current + ( speed * speed ) / ( 2 * deceleration ) * ( distance < 0 ? -1 : 1 );\n\t\tduration = speed / deceleration;\n\n\t\tif ( destination < lowerMargin ) {\n\t\t\tdestination = wrapperSize ? lowerMargin - ( wrapperSize / 2.5 * ( speed / 8 ) ) : lowerMargin;\n\t\t\tdistance = Math.abs(destination - current);\n\t\t\tduration = distance / speed;\n\t\t} else if ( destination > 0 ) {\n\t\t\tdestination = wrapperSize ? wrapperSize / 2.5 * ( speed / 8 ) : 0;\n\t\t\tdistance = Math.abs(current) + destination;\n\t\t\tduration = distance / speed;\n\t\t}\n\n\t\treturn {\n\t\t\tdestination: Math.round(destination),\n\t\t\tduration: duration\n\t\t};\n\t};\n\n\tvar _transform = _prefixStyle('transform');\n\n\tme.extend(me, {\n\t\thasTransform: _transform !== false,\n\t\thasPerspective: _prefixStyle('perspective') in _elementStyle,\n\t\thasTouch: 'ontouchstart' in window,\n\t\thasPointer: !!(window.PointerEvent || window.MSPointerEvent), // IE10 is prefixed\n\t\thasTransition: _prefixStyle('transition') in _elementStyle\n\t});\n\n\t/*\n\tThis should find all Android browsers lower than build 535.19 (both stock browser and webview)\n\t- galaxy S2 is ok\n    - 2.3.6 : `AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1`\n    - 4.0.4 : `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`\n   - galaxy S3 is badAndroid (stock brower, webview)\n     `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`\n   - galaxy S4 is badAndroid (stock brower, webview)\n     `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`\n   - galaxy S5 is OK\n     `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`\n   - galaxy S6 is OK\n     `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`\n  */\n\tme.isBadAndroid = (function() {\n\t\tvar appVersion = window.navigator.appVersion;\n\t\t// Android browser is not a chrome browser.\n\t\tif (/Android/.test(appVersion) && !(/Chrome\\/\\d/.test(appVersion))) {\n\t\t\tvar safariVersion = appVersion.match(/Safari\\/(\\d+.\\d)/);\n\t\t\tif(safariVersion && typeof safariVersion === \"object\" && safariVersion.length >= 2) {\n\t\t\t\treturn parseFloat(safariVersion[1]) < 535.19;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t})();\n\n\tme.extend(me.style = {}, {\n\t\ttransform: _transform,\n\t\ttransitionTimingFunction: _prefixStyle('transitionTimingFunction'),\n\t\ttransitionDuration: _prefixStyle('transitionDuration'),\n\t\ttransitionDelay: _prefixStyle('transitionDelay'),\n\t\ttransformOrigin: _prefixStyle('transformOrigin')\n\t});\n\n\tme.hasClass = function (e, c) {\n\t\tvar re = new RegExp(\"(^|\\\\s)\" + c + \"(\\\\s|$)\");\n\t\treturn re.test(e.className);\n\t};\n\n\tme.addClass = function (e, c) {\n\t\tif ( me.hasClass(e, c) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar newclass = e.className.split(' ');\n\t\tnewclass.push(c);\n\t\te.className = newclass.join(' ');\n\t};\n\n\tme.removeClass = function (e, c) {\n\t\tif ( !me.hasClass(e, c) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar re = new RegExp(\"(^|\\\\s)\" + c + \"(\\\\s|$)\", 'g');\n\t\te.className = e.className.replace(re, ' ');\n\t};\n\n\tme.offset = function (el) {\n\t\tvar left = -el.offsetLeft,\n\t\t\ttop = -el.offsetTop;\n\n\t\t// jshint -W084\n\t\twhile (el = el.offsetParent) {\n\t\t\tleft -= el.offsetLeft;\n\t\t\ttop -= el.offsetTop;\n\t\t}\n\t\t// jshint +W084\n\n\t\treturn {\n\t\t\tleft: left,\n\t\t\ttop: top\n\t\t};\n\t};\n\n\tme.preventDefaultException = function (el, exceptions) {\n\t\tfor ( var i in exceptions ) {\n\t\t\tif ( exceptions[i].test(el[i]) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tme.extend(me.eventType = {}, {\n\t\ttouchstart: 1,\n\t\ttouchmove: 1,\n\t\ttouchend: 1,\n\n\t\tmousedown: 2,\n\t\tmousemove: 2,\n\t\tmouseup: 2,\n\n\t\tpointerdown: 3,\n\t\tpointermove: 3,\n\t\tpointerup: 3,\n\n\t\tMSPointerDown: 3,\n\t\tMSPointerMove: 3,\n\t\tMSPointerUp: 3\n\t});\n\n\tme.extend(me.ease = {}, {\n\t\tquadratic: {\n\t\t\tstyle: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n\t\t\tfn: function (k) {\n\t\t\t\treturn k * ( 2 - k );\n\t\t\t}\n\t\t},\n\t\tcircular: {\n\t\t\tstyle: 'cubic-bezier(0.1, 0.57, 0.1, 1)',\t// Not properly \"circular\" but this looks better, it should be (0.075, 0.82, 0.165, 1)\n\t\t\tfn: function (k) {\n\t\t\t\treturn Math.sqrt( 1 - ( --k * k ) );\n\t\t\t}\n\t\t},\n\t\tback: {\n\t\t\tstyle: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',\n\t\t\tfn: function (k) {\n\t\t\t\tvar b = 4;\n\t\t\t\treturn ( k = k - 1 ) * k * ( ( b + 1 ) * k + b ) + 1;\n\t\t\t}\n\t\t},\n\t\tbounce: {\n\t\t\tstyle: '',\n\t\t\tfn: function (k) {\n\t\t\t\tif ( ( k /= 1 ) < ( 1 / 2.75 ) ) {\n\t\t\t\t\treturn 7.5625 * k * k;\n\t\t\t\t} else if ( k < ( 2 / 2.75 ) ) {\n\t\t\t\t\treturn 7.5625 * ( k -= ( 1.5 / 2.75 ) ) * k + 0.75;\n\t\t\t\t} else if ( k < ( 2.5 / 2.75 ) ) {\n\t\t\t\t\treturn 7.5625 * ( k -= ( 2.25 / 2.75 ) ) * k + 0.9375;\n\t\t\t\t} else {\n\t\t\t\t\treturn 7.5625 * ( k -= ( 2.625 / 2.75 ) ) * k + 0.984375;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\telastic: {\n\t\t\tstyle: '',\n\t\t\tfn: function (k) {\n\t\t\t\tvar f = 0.22,\n\t\t\t\t\te = 0.4;\n\n\t\t\t\tif ( k === 0 ) { return 0; }\n\t\t\t\tif ( k == 1 ) { return 1; }\n\n\t\t\t\treturn ( e * Math.pow( 2, - 10 * k ) * Math.sin( ( k - f / 4 ) * ( 2 * Math.PI ) / f ) + 1 );\n\t\t\t}\n\t\t}\n\t});\n\n\tme.tap = function (e, eventName) {\n\t\tvar ev = document.createEvent('Event');\n\t\tev.initEvent(eventName, true, true);\n\t\tev.pageX = e.pageX;\n\t\tev.pageY = e.pageY;\n\t\te.target.dispatchEvent(ev);\n\t};\n\n\tme.click = function (e) {\n\t\tvar target = e.target,\n\t\t\tev;\n\n\t\tif ( !(/(SELECT|INPUT|TEXTAREA)/i).test(target.tagName) ) {\n\t\t\tev = document.createEvent('MouseEvents');\n\t\t\tev.initMouseEvent('click', true, true, e.view, 1,\n\t\t\t\ttarget.screenX, target.screenY, target.clientX, target.clientY,\n\t\t\t\te.ctrlKey, e.altKey, e.shiftKey, e.metaKey,\n\t\t\t\t0, null);\n\n\t\t\tev._constructed = true;\n\t\t\ttarget.dispatchEvent(ev);\n\t\t}\n\t};\n\n\treturn me;\n})();\nfunction IScroll (el, options) {\n\tthis.wrapper = typeof el == 'string' ? document.querySelector(el) : el;\n\tthis.scroller = this.wrapper.children[0];\n\tthis.scrollerStyle = this.scroller.style;\t\t// cache style for better performance\n\n\tthis.options = {\n\n\t\tresizeScrollbars: true,\n\n\t\tmouseWheelSpeed: 20,\n\n\t\tsnapThreshold: 0.334,\n\n// INSERT POINT: OPTIONS\n\t\tdisablePointer : !utils.hasPointer,\n\t\tdisableTouch : utils.hasPointer || !utils.hasTouch,\n\t\tdisableMouse : utils.hasPointer || utils.hasTouch,\n\t\tstartX: 0,\n\t\tstartY: 0,\n\t\tscrollY: true,\n\t\tdirectionLockThreshold: 5,\n\t\tmomentum: true,\n\n\t\tbounce: true,\n\t\tbounceTime: 600,\n\t\tbounceEasing: '',\n\n\t\tpreventDefault: true,\n\t\tpreventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ },\n\n\t\tHWCompositing: true,\n\t\tuseTransition: true,\n\t\tuseTransform: true,\n\t\tbindToWrapper: typeof window.onmousedown === \"undefined\"\n\t};\n\n\tfor ( var i in options ) {\n\t\tthis.options[i] = options[i];\n\t}\n\n\t// Normalize options\n\tthis.translateZ = this.options.HWCompositing && utils.hasPerspective ? ' translateZ(0)' : '';\n\n\tthis.options.useTransition = utils.hasTransition && this.options.useTransition;\n\tthis.options.useTransform = utils.hasTransform && this.options.useTransform;\n\n\tthis.options.eventPassthrough = this.options.eventPassthrough === true ? 'vertical' : this.options.eventPassthrough;\n\tthis.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;\n\n\t// If you want eventPassthrough I have to lock one of the axes\n\tthis.options.scrollY = this.options.eventPassthrough == 'vertical' ? false : this.options.scrollY;\n\tthis.options.scrollX = this.options.eventPassthrough == 'horizontal' ? false : this.options.scrollX;\n\n\t// With eventPassthrough we also need lockDirection mechanism\n\tthis.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;\n\tthis.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;\n\n\tthis.options.bounceEasing = typeof this.options.bounceEasing == 'string' ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;\n\n\tthis.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;\n\n\tif ( this.options.tap === true ) {\n\t\tthis.options.tap = 'tap';\n\t}\n\n\tif ( this.options.shrinkScrollbars == 'scale' ) {\n\t\tthis.options.useTransition = false;\n\t}\n\n\tthis.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1;\n\n// INSERT POINT: NORMALIZATION\n\n\t// Some defaults\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.directionX = 0;\n\tthis.directionY = 0;\n\tthis._events = {};\n\n// INSERT POINT: DEFAULTS\n\n\tthis._init();\n\tthis.refresh();\n\n\tthis.scrollTo(this.options.startX, this.options.startY);\n\tthis.enable();\n}\n\nIScroll.prototype = {\n\tversion: '5.2.0',\n\n\t_init: function () {\n\t\tthis._initEvents();\n\n\t\tif ( this.options.scrollbars || this.options.indicators ) {\n\t\t\tthis._initIndicators();\n\t\t}\n\n\t\tif ( this.options.mouseWheel ) {\n\t\t\tthis._initWheel();\n\t\t}\n\n\t\tif ( this.options.snap ) {\n\t\t\tthis._initSnap();\n\t\t}\n\n\t\tif ( this.options.keyBindings ) {\n\t\t\tthis._initKeys();\n\t\t}\n\n// INSERT POINT: _init\n\n\t},\n\n\tdestroy: function () {\n\t\tthis._initEvents(true);\n\t\tclearTimeout(this.resizeTimeout);\n \t\tthis.resizeTimeout = null;\n\t\tthis._execEvent('destroy');\n\t},\n\n\t_transitionEnd: function (e) {\n\t\tif ( e.target != this.scroller || !this.isInTransition ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._transitionTime();\n\t\tif ( !this.resetPosition(this.options.bounceTime) ) {\n\t\t\tthis.isInTransition = false;\n\t\t\tthis._execEvent('scrollEnd');\n\t\t}\n\t},\n\n\t_start: function (e) {\n\t\t// React to left mouse button only\n\t\tif ( utils.eventType[e.type] != 1 ) {\n\t\t  // for button property\n\t\t  // http://unixpapa.com/js/mouse.html\n\t\t  var button;\n\t    if (!e.which) {\n\t      /* IE case */\n\t      button = (e.button < 2) ? 0 :\n\t               ((e.button == 4) ? 1 : 2);\n\t    } else {\n\t      /* All others */\n\t      button = e.button;\n\t    }\n\t\t\tif ( button !== 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif ( !this.enabled || (this.initiated && utils.eventType[e.type] !== this.initiated) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.options.preventDefault && !utils.isBadAndroid && !utils.preventDefaultException(e.target, this.options.preventDefaultException) ) {\n\t\t\te.preventDefault();\n\t\t}\n\n\t\tvar point = e.touches ? e.touches[0] : e,\n\t\t\tpos;\n\n\t\tthis.initiated\t= utils.eventType[e.type];\n\t\tthis.moved\t\t= false;\n\t\tthis.distX\t\t= 0;\n\t\tthis.distY\t\t= 0;\n\t\tthis.directionX = 0;\n\t\tthis.directionY = 0;\n\t\tthis.directionLocked = 0;\n\n\t\tthis.startTime = utils.getTime();\n\n\t\tif ( this.options.useTransition && this.isInTransition ) {\n\t\t\tthis._transitionTime();\n\t\t\tthis.isInTransition = false;\n\t\t\tpos = this.getComputedPosition();\n\t\t\tthis._translate(Math.round(pos.x), Math.round(pos.y));\n\t\t\tthis._execEvent('scrollEnd');\n\t\t} else if ( !this.options.useTransition && this.isAnimating ) {\n\t\t\tthis.isAnimating = false;\n\t\t\tthis._execEvent('scrollEnd');\n\t\t}\n\n\t\tthis.startX    = this.x;\n\t\tthis.startY    = this.y;\n\t\tthis.absStartX = this.x;\n\t\tthis.absStartY = this.y;\n\t\tthis.pointX    = point.pageX;\n\t\tthis.pointY    = point.pageY;\n\n\t\tthis._execEvent('beforeScrollStart');\n\t},\n\n\t_move: function (e) {\n\t\tif ( !this.enabled || utils.eventType[e.type] !== this.initiated ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.options.preventDefault ) {\t// increases performance on Android? TODO: check!\n\t\t\te.preventDefault();\n\t\t}\n\n\t\tvar point\t\t= e.touches ? e.touches[0] : e,\n\t\t\tdeltaX\t\t= point.pageX - this.pointX,\n\t\t\tdeltaY\t\t= point.pageY - this.pointY,\n\t\t\ttimestamp\t= utils.getTime(),\n\t\t\tnewX, newY,\n\t\t\tabsDistX, absDistY;\n\n\t\tthis.pointX\t\t= point.pageX;\n\t\tthis.pointY\t\t= point.pageY;\n\n\t\tthis.distX\t\t+= deltaX;\n\t\tthis.distY\t\t+= deltaY;\n\t\tabsDistX\t\t= Math.abs(this.distX);\n\t\tabsDistY\t\t= Math.abs(this.distY);\n\n\t\t// We need to move at least 10 pixels for the scrolling to initiate\n\t\tif ( timestamp - this.endTime > 300 && (absDistX < 10 && absDistY < 10) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If you are scrolling in one direction lock the other\n\t\tif ( !this.directionLocked && !this.options.freeScroll ) {\n\t\t\tif ( absDistX > absDistY + this.options.directionLockThreshold ) {\n\t\t\t\tthis.directionLocked = 'h';\t\t// lock horizontally\n\t\t\t} else if ( absDistY >= absDistX + this.options.directionLockThreshold ) {\n\t\t\t\tthis.directionLocked = 'v';\t\t// lock vertically\n\t\t\t} else {\n\t\t\t\tthis.directionLocked = 'n';\t\t// no lock\n\t\t\t}\n\t\t}\n\n\t\tif ( this.directionLocked == 'h' ) {\n\t\t\tif ( this.options.eventPassthrough == 'vertical' ) {\n\t\t\t\te.preventDefault();\n\t\t\t} else if ( this.options.eventPassthrough == 'horizontal' ) {\n\t\t\t\tthis.initiated = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdeltaY = 0;\n\t\t} else if ( this.directionLocked == 'v' ) {\n\t\t\tif ( this.options.eventPassthrough == 'horizontal' ) {\n\t\t\t\te.preventDefault();\n\t\t\t} else if ( this.options.eventPassthrough == 'vertical' ) {\n\t\t\t\tthis.initiated = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdeltaX = 0;\n\t\t}\n\n\t\tdeltaX = this.hasHorizontalScroll ? deltaX : 0;\n\t\tdeltaY = this.hasVerticalScroll ? deltaY : 0;\n\n\t\tnewX = this.x + deltaX;\n\t\tnewY = this.y + deltaY;\n\n\t\t// Slow down if outside of the boundaries\n\t\tif ( newX > 0 || newX < this.maxScrollX ) {\n\t\t\tnewX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;\n\t\t}\n\t\tif ( newY > 0 || newY < this.maxScrollY ) {\n\t\t\tnewY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;\n\t\t}\n\n\t\tthis.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;\n\t\tthis.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;\n\n\t\tif ( !this.moved ) {\n\t\t\tthis._execEvent('scrollStart');\n\t\t}\n\n\t\tthis.moved = true;\n\n\t\tthis._translate(newX, newY);\n\n/* REPLACE START: _move */\n\n\t\tif ( timestamp - this.startTime > 300 ) {\n\t\t\tthis.startTime = timestamp;\n\t\t\tthis.startX = this.x;\n\t\t\tthis.startY = this.y;\n\t\t}\n\n/* REPLACE END: _move */\n\n\t},\n\n\t_end: function (e) {\n\t\tif ( !this.enabled || utils.eventType[e.type] !== this.initiated ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException) ) {\n\t\t\te.preventDefault();\n\t\t}\n\n\t\tvar point = e.changedTouches ? e.changedTouches[0] : e,\n\t\t\tmomentumX,\n\t\t\tmomentumY,\n\t\t\tduration = utils.getTime() - this.startTime,\n\t\t\tnewX = Math.round(this.x),\n\t\t\tnewY = Math.round(this.y),\n\t\t\tdistanceX = Math.abs(newX - this.startX),\n\t\t\tdistanceY = Math.abs(newY - this.startY),\n\t\t\ttime = 0,\n\t\t\teasing = '';\n\n\t\tthis.isInTransition = 0;\n\t\tthis.initiated = 0;\n\t\tthis.endTime = utils.getTime();\n\n\t\t// reset if we are outside of the boundaries\n\t\tif ( this.resetPosition(this.options.bounceTime) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.scrollTo(newX, newY);\t// ensures that the last position is rounded\n\n\t\t// we scrolled less than 10 pixels\n\t\tif ( !this.moved ) {\n\t\t\tif ( this.options.tap ) {\n\t\t\t\tutils.tap(e, this.options.tap);\n\t\t\t}\n\n\t\t\tif ( this.options.click ) {\n\t\t\t\tutils.click(e);\n\t\t\t}\n\n\t\t\tthis._execEvent('scrollCancel');\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100 ) {\n\t\t\tthis._execEvent('flick');\n\t\t\treturn;\n\t\t}\n\n\t\t// start momentum animation if needed\n\t\tif ( this.options.momentum && duration < 300 ) {\n\t\t\tmomentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration) : { destination: newX, duration: 0 };\n\t\t\tmomentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration) : { destination: newY, duration: 0 };\n\t\t\tnewX = momentumX.destination;\n\t\t\tnewY = momentumY.destination;\n\t\t\ttime = Math.max(momentumX.duration, momentumY.duration);\n\t\t\tthis.isInTransition = 1;\n\t\t}\n\n\n\t\tif ( this.options.snap ) {\n\t\t\tvar snap = this._nearestSnap(newX, newY);\n\t\t\tthis.currentPage = snap;\n\t\t\ttime = this.options.snapSpeed || Math.max(\n\t\t\t\t\tMath.max(\n\t\t\t\t\t\tMath.min(Math.abs(newX - snap.x), 1000),\n\t\t\t\t\t\tMath.min(Math.abs(newY - snap.y), 1000)\n\t\t\t\t\t), 300);\n\t\t\tnewX = snap.x;\n\t\t\tnewY = snap.y;\n\n\t\t\tthis.directionX = 0;\n\t\t\tthis.directionY = 0;\n\t\t\teasing = this.options.bounceEasing;\n\t\t}\n\n// INSERT POINT: _end\n\n\t\tif ( newX != this.x || newY != this.y ) {\n\t\t\t// change easing function when scroller goes out of the boundaries\n\t\t\tif ( newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY ) {\n\t\t\t\teasing = utils.ease.quadratic;\n\t\t\t}\n\n\t\t\tthis.scrollTo(newX, newY, time, easing);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._execEvent('scrollEnd');\n\t},\n\n\t_resize: function () {\n\t\tvar that = this;\n\n\t\tclearTimeout(this.resizeTimeout);\n\n\t\tthis.resizeTimeout = setTimeout(function () {\n\t\t\tthat.refresh();\n\t\t}, this.options.resizePolling);\n\t},\n\n\tresetPosition: function (time) {\n\t\tvar x = this.x,\n\t\t\ty = this.y;\n\n\t\ttime = time || 0;\n\n\t\tif ( !this.hasHorizontalScroll || this.x > 0 ) {\n\t\t\tx = 0;\n\t\t} else if ( this.x < this.maxScrollX ) {\n\t\t\tx = this.maxScrollX;\n\t\t}\n\n\t\tif ( !this.hasVerticalScroll || this.y > 0 ) {\n\t\t\ty = 0;\n\t\t} else if ( this.y < this.maxScrollY ) {\n\t\t\ty = this.maxScrollY;\n\t\t}\n\n\t\tif ( x == this.x && y == this.y ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.scrollTo(x, y, time, this.options.bounceEasing);\n\n\t\treturn true;\n\t},\n\n\tdisable: function () {\n\t\tthis.enabled = false;\n\t},\n\n\tenable: function () {\n\t\tthis.enabled = true;\n\t},\n\n\trefresh: function () {\n\t\tvar rf = this.wrapper.offsetHeight;\t\t// Force reflow\n\n\t\tthis.wrapperWidth\t= this.wrapper.clientWidth;\n\t\tthis.wrapperHeight\t= this.wrapper.clientHeight;\n\n/* REPLACE START: refresh */\n\n\t\tthis.scrollerWidth\t= this.scroller.offsetWidth;\n\t\tthis.scrollerHeight\t= this.scroller.offsetHeight;\n\n\t\tthis.maxScrollX\t\t= this.wrapperWidth - this.scrollerWidth;\n\t\tthis.maxScrollY\t\t= this.wrapperHeight - this.scrollerHeight;\n\n/* REPLACE END: refresh */\n\n\t\tthis.hasHorizontalScroll\t= this.options.scrollX && this.maxScrollX < 0;\n\t\tthis.hasVerticalScroll\t\t= this.options.scrollY && this.maxScrollY < 0;\n\n\t\tif ( !this.hasHorizontalScroll ) {\n\t\t\tthis.maxScrollX = 0;\n\t\t\tthis.scrollerWidth = this.wrapperWidth;\n\t\t}\n\n\t\tif ( !this.hasVerticalScroll ) {\n\t\t\tthis.maxScrollY = 0;\n\t\t\tthis.scrollerHeight = this.wrapperHeight;\n\t\t}\n\n\t\tthis.endTime = 0;\n\t\tthis.directionX = 0;\n\t\tthis.directionY = 0;\n\n\t\tthis.wrapperOffset = utils.offset(this.wrapper);\n\n\t\tthis._execEvent('refresh');\n\n\t\tthis.resetPosition();\n\n// INSERT POINT: _refresh\n\n\t},\n\n\ton: function (type, fn) {\n\t\tif ( !this._events[type] ) {\n\t\t\tthis._events[type] = [];\n\t\t}\n\n\t\tthis._events[type].push(fn);\n\t},\n\n\toff: function (type, fn) {\n\t\tif ( !this._events[type] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar index = this._events[type].indexOf(fn);\n\n\t\tif ( index > -1 ) {\n\t\t\tthis._events[type].splice(index, 1);\n\t\t}\n\t},\n\n\t_execEvent: function (type) {\n\t\tif ( !this._events[type] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar i = 0,\n\t\t\tl = this._events[type].length;\n\n\t\tif ( !l ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( ; i < l; i++ ) {\n\t\t\tthis._events[type][i].apply(this, [].slice.call(arguments, 1));\n\t\t}\n\t},\n\n\tscrollBy: function (x, y, time, easing) {\n\t\tx = this.x + x;\n\t\ty = this.y + y;\n\t\ttime = time || 0;\n\n\t\tthis.scrollTo(x, y, time, easing);\n\t},\n\n\tscrollTo: function (x, y, time, easing) {\n\t\teasing = easing || utils.ease.circular;\n\n\t\tthis.isInTransition = this.options.useTransition && time > 0;\n\t\tvar transitionType = this.options.useTransition && easing.style;\n\t\tif ( !time || transitionType ) {\n\t\t\t\tif(transitionType) {\n\t\t\t\t\tthis._transitionTimingFunction(easing.style);\n\t\t\t\t\tthis._transitionTime(time);\n\t\t\t\t}\n\t\t\tthis._translate(x, y);\n\t\t} else {\n\t\t\tthis._animate(x, y, time, easing.fn);\n\t\t}\n\t},\n\n\tscrollToElement: function (el, time, offsetX, offsetY, easing) {\n\t\tel = el.nodeType ? el : this.scroller.querySelector(el);\n\n\t\tif ( !el ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar pos = utils.offset(el);\n\n\t\tpos.left -= this.wrapperOffset.left;\n\t\tpos.top  -= this.wrapperOffset.top;\n\n\t\t// if offsetX/Y are true we center the element to the screen\n\t\tif ( offsetX === true ) {\n\t\t\toffsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);\n\t\t}\n\t\tif ( offsetY === true ) {\n\t\t\toffsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);\n\t\t}\n\n\t\tpos.left -= offsetX || 0;\n\t\tpos.top  -= offsetY || 0;\n\n\t\tpos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;\n\t\tpos.top  = pos.top  > 0 ? 0 : pos.top  < this.maxScrollY ? this.maxScrollY : pos.top;\n\n\t\ttime = time === undefined || time === null || time === 'auto' ? Math.max(Math.abs(this.x-pos.left), Math.abs(this.y-pos.top)) : time;\n\n\t\tthis.scrollTo(pos.left, pos.top, time, easing);\n\t},\n\n\t_transitionTime: function (time) {\n\t\ttime = time || 0;\n\n\t\tvar durationProp = utils.style.transitionDuration;\n\t\tthis.scrollerStyle[durationProp] = time + 'ms';\n\n\t\tif ( !time && utils.isBadAndroid ) {\n\t\t\tthis.scrollerStyle[durationProp] = '0.0001ms';\n\t\t\t// remove 0.0001ms\n\t\t\tvar self = this;\n\t\t\trAF(function() {\n\t\t\t\tif(self.scrollerStyle[durationProp] === '0.0001ms') {\n\t\t\t\t\tself.scrollerStyle[durationProp] = '0s';\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\n\t\tif ( this.indicators ) {\n\t\t\tfor ( var i = this.indicators.length; i--; ) {\n\t\t\t\tthis.indicators[i].transitionTime(time);\n\t\t\t}\n\t\t}\n\n\n// INSERT POINT: _transitionTime\n\n\t},\n\n\t_transitionTimingFunction: function (easing) {\n\t\tthis.scrollerStyle[utils.style.transitionTimingFunction] = easing;\n\n\n\t\tif ( this.indicators ) {\n\t\t\tfor ( var i = this.indicators.length; i--; ) {\n\t\t\t\tthis.indicators[i].transitionTimingFunction(easing);\n\t\t\t}\n\t\t}\n\n\n// INSERT POINT: _transitionTimingFunction\n\n\t},\n\n\t_translate: function (x, y) {\n\t\tif ( this.options.useTransform ) {\n\n/* REPLACE START: _translate */\n\n\t\t\tthis.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;\n\n/* REPLACE END: _translate */\n\n\t\t} else {\n\t\t\tx = Math.round(x);\n\t\t\ty = Math.round(y);\n\t\t\tthis.scrollerStyle.left = x + 'px';\n\t\t\tthis.scrollerStyle.top = y + 'px';\n\t\t}\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\n\tif ( this.indicators ) {\n\t\tfor ( var i = this.indicators.length; i--; ) {\n\t\t\tthis.indicators[i].updatePosition();\n\t\t}\n\t}\n\n\n// INSERT POINT: _translate\n\n\t},\n\n\t_initEvents: function (remove) {\n\t\tvar eventType = remove ? utils.removeEvent : utils.addEvent,\n\t\t\ttarget = this.options.bindToWrapper ? this.wrapper : window;\n\n\t\teventType(window, 'orientationchange', this);\n\t\teventType(window, 'resize', this);\n\n\t\tif ( this.options.click ) {\n\t\t\teventType(this.wrapper, 'click', this, true);\n\t\t}\n\n\t\tif ( !this.options.disableMouse ) {\n\t\t\teventType(this.wrapper, 'mousedown', this);\n\t\t\teventType(target, 'mousemove', this);\n\t\t\teventType(target, 'mousecancel', this);\n\t\t\teventType(target, 'mouseup', this);\n\t\t}\n\n\t\tif ( utils.hasPointer && !this.options.disablePointer ) {\n\t\t\teventType(this.wrapper, utils.prefixPointerEvent('pointerdown'), this);\n\t\t\teventType(target, utils.prefixPointerEvent('pointermove'), this);\n\t\t\teventType(target, utils.prefixPointerEvent('pointercancel'), this);\n\t\t\teventType(target, utils.prefixPointerEvent('pointerup'), this);\n\t\t}\n\n\t\tif ( utils.hasTouch && !this.options.disableTouch ) {\n\t\t\teventType(this.wrapper, 'touchstart', this);\n\t\t\teventType(target, 'touchmove', this);\n\t\t\teventType(target, 'touchcancel', this);\n\t\t\teventType(target, 'touchend', this);\n\t\t}\n\n\t\teventType(this.scroller, 'transitionend', this);\n\t\teventType(this.scroller, 'webkitTransitionEnd', this);\n\t\teventType(this.scroller, 'oTransitionEnd', this);\n\t\teventType(this.scroller, 'MSTransitionEnd', this);\n\t},\n\n\tgetComputedPosition: function () {\n\t\tvar matrix = window.getComputedStyle(this.scroller, null),\n\t\t\tx, y;\n\n\t\tif ( this.options.useTransform ) {\n\t\t\tmatrix = matrix[utils.style.transform].split(')')[0].split(', ');\n\t\t\tx = +(matrix[12] || matrix[4]);\n\t\t\ty = +(matrix[13] || matrix[5]);\n\t\t} else {\n\t\t\tx = +matrix.left.replace(/[^-\\d.]/g, '');\n\t\t\ty = +matrix.top.replace(/[^-\\d.]/g, '');\n\t\t}\n\n\t\treturn { x: x, y: y };\n\t},\n\t_initIndicators: function () {\n\t\tvar interactive = this.options.interactiveScrollbars,\n\t\t\tcustomStyle = typeof this.options.scrollbars != 'string',\n\t\t\tindicators = [],\n\t\t\tindicator;\n\n\t\tvar that = this;\n\n\t\tthis.indicators = [];\n\n\t\tif ( this.options.scrollbars ) {\n\t\t\t// Vertical scrollbar\n\t\t\tif ( this.options.scrollY ) {\n\t\t\t\tindicator = {\n\t\t\t\t\tel: createDefaultScrollbar('v', interactive, this.options.scrollbars),\n\t\t\t\t\tinteractive: interactive,\n\t\t\t\t\tdefaultScrollbars: true,\n\t\t\t\t\tcustomStyle: customStyle,\n\t\t\t\t\tresize: this.options.resizeScrollbars,\n\t\t\t\t\tshrink: this.options.shrinkScrollbars,\n\t\t\t\t\tfade: this.options.fadeScrollbars,\n\t\t\t\t\tlistenX: false\n\t\t\t\t};\n\n\t\t\t\tthis.wrapper.appendChild(indicator.el);\n\t\t\t\tindicators.push(indicator);\n\t\t\t}\n\n\t\t\t// Horizontal scrollbar\n\t\t\tif ( this.options.scrollX ) {\n\t\t\t\tindicator = {\n\t\t\t\t\tel: createDefaultScrollbar('h', interactive, this.options.scrollbars),\n\t\t\t\t\tinteractive: interactive,\n\t\t\t\t\tdefaultScrollbars: true,\n\t\t\t\t\tcustomStyle: customStyle,\n\t\t\t\t\tresize: this.options.resizeScrollbars,\n\t\t\t\t\tshrink: this.options.shrinkScrollbars,\n\t\t\t\t\tfade: this.options.fadeScrollbars,\n\t\t\t\t\tlistenY: false\n\t\t\t\t};\n\n\t\t\t\tthis.wrapper.appendChild(indicator.el);\n\t\t\t\tindicators.push(indicator);\n\t\t\t}\n\t\t}\n\n\t\tif ( this.options.indicators ) {\n\t\t\t// TODO: check concat compatibility\n\t\t\tindicators = indicators.concat(this.options.indicators);\n\t\t}\n\n\t\tfor ( var i = indicators.length; i--; ) {\n\t\t\tthis.indicators.push( new Indicator(this, indicators[i]) );\n\t\t}\n\n\t\t// TODO: check if we can use array.map (wide compatibility and performance issues)\n\t\tfunction _indicatorsMap (fn) {\n\t\t\tif (that.indicators) {\n\t\t\t\tfor ( var i = that.indicators.length; i--; ) {\n\t\t\t\t\tfn.call(that.indicators[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( this.options.fadeScrollbars ) {\n\t\t\tthis.on('scrollEnd', function () {\n\t\t\t\t_indicatorsMap(function () {\n\t\t\t\t\tthis.fade();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthis.on('scrollCancel', function () {\n\t\t\t\t_indicatorsMap(function () {\n\t\t\t\t\tthis.fade();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthis.on('scrollStart', function () {\n\t\t\t\t_indicatorsMap(function () {\n\t\t\t\t\tthis.fade(1);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthis.on('beforeScrollStart', function () {\n\t\t\t\t_indicatorsMap(function () {\n\t\t\t\t\tthis.fade(1, true);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\n\t\tthis.on('refresh', function () {\n\t\t\t_indicatorsMap(function () {\n\t\t\t\tthis.refresh();\n\t\t\t});\n\t\t});\n\n\t\tthis.on('destroy', function () {\n\t\t\t_indicatorsMap(function () {\n\t\t\t\tthis.destroy();\n\t\t\t});\n\n\t\t\tdelete this.indicators;\n\t\t});\n\t},\n\n\t_initWheel: function () {\n\t\tutils.addEvent(this.wrapper, 'wheel', this);\n\t\tutils.addEvent(this.wrapper, 'mousewheel', this);\n\t\tutils.addEvent(this.wrapper, 'DOMMouseScroll', this);\n\n\t\tthis.on('destroy', function () {\n\t\t\tclearTimeout(this.wheelTimeout);\n\t\t\tthis.wheelTimeout = null;\n\t\t\tutils.removeEvent(this.wrapper, 'wheel', this);\n\t\t\tutils.removeEvent(this.wrapper, 'mousewheel', this);\n\t\t\tutils.removeEvent(this.wrapper, 'DOMMouseScroll', this);\n\t\t});\n\t},\n\n\t_wheel: function (e) {\n\t\tif ( !this.enabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\te.preventDefault();\n\n\t\tvar wheelDeltaX, wheelDeltaY,\n\t\t\tnewX, newY,\n\t\t\tthat = this;\n\n\t\tif ( this.wheelTimeout === undefined ) {\n\t\t\tthat._execEvent('scrollStart');\n\t\t}\n\n\t\t// Execute the scrollEnd event after 400ms the wheel stopped scrolling\n\t\tclearTimeout(this.wheelTimeout);\n\t\tthis.wheelTimeout = setTimeout(function () {\n\t\t\tif(!that.options.snap) {\n\t\t\t\tthat._execEvent('scrollEnd');\n\t\t\t}\n\t\t\tthat.wheelTimeout = undefined;\n\t\t}, 400);\n\n\t\tif ( 'deltaX' in e ) {\n\t\t\tif (e.deltaMode === 1) {\n\t\t\t\twheelDeltaX = -e.deltaX * this.options.mouseWheelSpeed;\n\t\t\t\twheelDeltaY = -e.deltaY * this.options.mouseWheelSpeed;\n\t\t\t} else {\n\t\t\t\twheelDeltaX = -e.deltaX;\n\t\t\t\twheelDeltaY = -e.deltaY;\n\t\t\t}\n\t\t} else if ( 'wheelDeltaX' in e ) {\n\t\t\twheelDeltaX = e.wheelDeltaX / 120 * this.options.mouseWheelSpeed;\n\t\t\twheelDeltaY = e.wheelDeltaY / 120 * this.options.mouseWheelSpeed;\n\t\t} else if ( 'wheelDelta' in e ) {\n\t\t\twheelDeltaX = wheelDeltaY = e.wheelDelta / 120 * this.options.mouseWheelSpeed;\n\t\t} else if ( 'detail' in e ) {\n\t\t\twheelDeltaX = wheelDeltaY = -e.detail / 3 * this.options.mouseWheelSpeed;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\twheelDeltaX *= this.options.invertWheelDirection;\n\t\twheelDeltaY *= this.options.invertWheelDirection;\n\n\t\tif ( !this.hasVerticalScroll ) {\n\t\t\twheelDeltaX = wheelDeltaY;\n\t\t\twheelDeltaY = 0;\n\t\t}\n\n\t\tif ( this.options.snap ) {\n\t\t\tnewX = this.currentPage.pageX;\n\t\t\tnewY = this.currentPage.pageY;\n\n\t\t\tif ( wheelDeltaX > 0 ) {\n\t\t\t\tnewX--;\n\t\t\t} else if ( wheelDeltaX < 0 ) {\n\t\t\t\tnewX++;\n\t\t\t}\n\n\t\t\tif ( wheelDeltaY > 0 ) {\n\t\t\t\tnewY--;\n\t\t\t} else if ( wheelDeltaY < 0 ) {\n\t\t\t\tnewY++;\n\t\t\t}\n\n\t\t\tthis.goToPage(newX, newY);\n\n\t\t\treturn;\n\t\t}\n\n\t\tnewX = this.x + Math.round(this.hasHorizontalScroll ? wheelDeltaX : 0);\n\t\tnewY = this.y + Math.round(this.hasVerticalScroll ? wheelDeltaY : 0);\n\n\t\tthis.directionX = wheelDeltaX > 0 ? -1 : wheelDeltaX < 0 ? 1 : 0;\n\t\tthis.directionY = wheelDeltaY > 0 ? -1 : wheelDeltaY < 0 ? 1 : 0;\n\n\t\tif ( newX > 0 ) {\n\t\t\tnewX = 0;\n\t\t} else if ( newX < this.maxScrollX ) {\n\t\t\tnewX = this.maxScrollX;\n\t\t}\n\n\t\tif ( newY > 0 ) {\n\t\t\tnewY = 0;\n\t\t} else if ( newY < this.maxScrollY ) {\n\t\t\tnewY = this.maxScrollY;\n\t\t}\n\n\t\tthis.scrollTo(newX, newY, 0);\n\n// INSERT POINT: _wheel\n\t},\n\n\t_initSnap: function () {\n\t\tthis.currentPage = {};\n\n\t\tif ( typeof this.options.snap == 'string' ) {\n\t\t\tthis.options.snap = this.scroller.querySelectorAll(this.options.snap);\n\t\t}\n\n\t\tthis.on('refresh', function () {\n\t\t\tvar i = 0, l,\n\t\t\t\tm = 0, n,\n\t\t\t\tcx, cy,\n\t\t\t\tx = 0, y,\n\t\t\t\tstepX = this.options.snapStepX || this.wrapperWidth,\n\t\t\t\tstepY = this.options.snapStepY || this.wrapperHeight,\n\t\t\t\tel;\n\n\t\t\tthis.pages = [];\n\n\t\t\tif ( !this.wrapperWidth || !this.wrapperHeight || !this.scrollerWidth || !this.scrollerHeight ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this.options.snap === true ) {\n\t\t\t\tcx = Math.round( stepX / 2 );\n\t\t\t\tcy = Math.round( stepY / 2 );\n\n\t\t\t\twhile ( x > -this.scrollerWidth ) {\n\t\t\t\t\tthis.pages[i] = [];\n\t\t\t\t\tl = 0;\n\t\t\t\t\ty = 0;\n\n\t\t\t\t\twhile ( y > -this.scrollerHeight ) {\n\t\t\t\t\t\tthis.pages[i][l] = {\n\t\t\t\t\t\t\tx: Math.max(x, this.maxScrollX),\n\t\t\t\t\t\t\ty: Math.max(y, this.maxScrollY),\n\t\t\t\t\t\t\twidth: stepX,\n\t\t\t\t\t\t\theight: stepY,\n\t\t\t\t\t\t\tcx: x - cx,\n\t\t\t\t\t\t\tcy: y - cy\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\ty -= stepY;\n\t\t\t\t\t\tl++;\n\t\t\t\t\t}\n\n\t\t\t\t\tx -= stepX;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tel = this.options.snap;\n\t\t\t\tl = el.length;\n\t\t\t\tn = -1;\n\n\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\tif ( i === 0 || el[i].offsetLeft <= el[i-1].offsetLeft ) {\n\t\t\t\t\t\tm = 0;\n\t\t\t\t\t\tn++;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !this.pages[m] ) {\n\t\t\t\t\t\tthis.pages[m] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tx = Math.max(-el[i].offsetLeft, this.maxScrollX);\n\t\t\t\t\ty = Math.max(-el[i].offsetTop, this.maxScrollY);\n\t\t\t\t\tcx = x - Math.round(el[i].offsetWidth / 2);\n\t\t\t\t\tcy = y - Math.round(el[i].offsetHeight / 2);\n\n\t\t\t\t\tthis.pages[m][n] = {\n\t\t\t\t\t\tx: x,\n\t\t\t\t\t\ty: y,\n\t\t\t\t\t\twidth: el[i].offsetWidth,\n\t\t\t\t\t\theight: el[i].offsetHeight,\n\t\t\t\t\t\tcx: cx,\n\t\t\t\t\t\tcy: cy\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( x > this.maxScrollX ) {\n\t\t\t\t\t\tm++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0);\n\n\t\t\t// Update snap threshold if needed\n\t\t\tif ( this.options.snapThreshold % 1 === 0 ) {\n\t\t\t\tthis.snapThresholdX = this.options.snapThreshold;\n\t\t\t\tthis.snapThresholdY = this.options.snapThreshold;\n\t\t\t} else {\n\t\t\t\tthis.snapThresholdX = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold);\n\t\t\t\tthis.snapThresholdY = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold);\n\t\t\t}\n\t\t});\n\n\t\tthis.on('flick', function () {\n\t\t\tvar time = this.options.snapSpeed || Math.max(\n\t\t\t\t\tMath.max(\n\t\t\t\t\t\tMath.min(Math.abs(this.x - this.startX), 1000),\n\t\t\t\t\t\tMath.min(Math.abs(this.y - this.startY), 1000)\n\t\t\t\t\t), 300);\n\n\t\t\tthis.goToPage(\n\t\t\t\tthis.currentPage.pageX + this.directionX,\n\t\t\t\tthis.currentPage.pageY + this.directionY,\n\t\t\t\ttime\n\t\t\t);\n\t\t});\n\t},\n\n\t_nearestSnap: function (x, y) {\n\t\tif ( !this.pages.length ) {\n\t\t\treturn { x: 0, y: 0, pageX: 0, pageY: 0 };\n\t\t}\n\n\t\tvar i = 0,\n\t\t\tl = this.pages.length,\n\t\t\tm = 0;\n\n\t\t// Check if we exceeded the snap threshold\n\t\tif ( Math.abs(x - this.absStartX) < this.snapThresholdX &&\n\t\t\tMath.abs(y - this.absStartY) < this.snapThresholdY ) {\n\t\t\treturn this.currentPage;\n\t\t}\n\n\t\tif ( x > 0 ) {\n\t\t\tx = 0;\n\t\t} else if ( x < this.maxScrollX ) {\n\t\t\tx = this.maxScrollX;\n\t\t}\n\n\t\tif ( y > 0 ) {\n\t\t\ty = 0;\n\t\t} else if ( y < this.maxScrollY ) {\n\t\t\ty = this.maxScrollY;\n\t\t}\n\n\t\tfor ( ; i < l; i++ ) {\n\t\t\tif ( x >= this.pages[i][0].cx ) {\n\t\t\t\tx = this.pages[i][0].x;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tl = this.pages[i].length;\n\n\t\tfor ( ; m < l; m++ ) {\n\t\t\tif ( y >= this.pages[0][m].cy ) {\n\t\t\t\ty = this.pages[0][m].y;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ( i == this.currentPage.pageX ) {\n\t\t\ti += this.directionX;\n\n\t\t\tif ( i < 0 ) {\n\t\t\t\ti = 0;\n\t\t\t} else if ( i >= this.pages.length ) {\n\t\t\t\ti = this.pages.length - 1;\n\t\t\t}\n\n\t\t\tx = this.pages[i][0].x;\n\t\t}\n\n\t\tif ( m == this.currentPage.pageY ) {\n\t\t\tm += this.directionY;\n\n\t\t\tif ( m < 0 ) {\n\t\t\t\tm = 0;\n\t\t\t} else if ( m >= this.pages[0].length ) {\n\t\t\t\tm = this.pages[0].length - 1;\n\t\t\t}\n\n\t\t\ty = this.pages[0][m].y;\n\t\t}\n\n\t\treturn {\n\t\t\tx: x,\n\t\t\ty: y,\n\t\t\tpageX: i,\n\t\t\tpageY: m\n\t\t};\n\t},\n\n\tgoToPage: function (x, y, time, easing) {\n\t\teasing = easing || this.options.bounceEasing;\n\n\t\tif ( x >= this.pages.length ) {\n\t\t\tx = this.pages.length - 1;\n\t\t} else if ( x < 0 ) {\n\t\t\tx = 0;\n\t\t}\n\n\t\tif ( y >= this.pages[x].length ) {\n\t\t\ty = this.pages[x].length - 1;\n\t\t} else if ( y < 0 ) {\n\t\t\ty = 0;\n\t\t}\n\n\t\tvar posX = this.pages[x][y].x,\n\t\t\tposY = this.pages[x][y].y;\n\n\t\ttime = time === undefined ? this.options.snapSpeed || Math.max(\n\t\t\tMath.max(\n\t\t\t\tMath.min(Math.abs(posX - this.x), 1000),\n\t\t\t\tMath.min(Math.abs(posY - this.y), 1000)\n\t\t\t), 300) : time;\n\n\t\tthis.currentPage = {\n\t\t\tx: posX,\n\t\t\ty: posY,\n\t\t\tpageX: x,\n\t\t\tpageY: y\n\t\t};\n\n\t\tthis.scrollTo(posX, posY, time, easing);\n\t},\n\n\tnext: function (time, easing) {\n\t\tvar x = this.currentPage.pageX,\n\t\t\ty = this.currentPage.pageY;\n\n\t\tx++;\n\n\t\tif ( x >= this.pages.length && this.hasVerticalScroll ) {\n\t\t\tx = 0;\n\t\t\ty++;\n\t\t}\n\n\t\tthis.goToPage(x, y, time, easing);\n\t},\n\n\tprev: function (time, easing) {\n\t\tvar x = this.currentPage.pageX,\n\t\t\ty = this.currentPage.pageY;\n\n\t\tx--;\n\n\t\tif ( x < 0 && this.hasVerticalScroll ) {\n\t\t\tx = 0;\n\t\t\ty--;\n\t\t}\n\n\t\tthis.goToPage(x, y, time, easing);\n\t},\n\n\t_initKeys: function (e) {\n\t\t// default key bindings\n\t\tvar keys = {\n\t\t\tpageUp: 33,\n\t\t\tpageDown: 34,\n\t\t\tend: 35,\n\t\t\thome: 36,\n\t\t\tleft: 37,\n\t\t\tup: 38,\n\t\t\tright: 39,\n\t\t\tdown: 40\n\t\t};\n\t\tvar i;\n\n\t\t// if you give me characters I give you keycode\n\t\tif ( typeof this.options.keyBindings == 'object' ) {\n\t\t\tfor ( i in this.options.keyBindings ) {\n\t\t\t\tif ( typeof this.options.keyBindings[i] == 'string' ) {\n\t\t\t\t\tthis.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.options.keyBindings = {};\n\t\t}\n\n\t\tfor ( i in keys ) {\n\t\t\tthis.options.keyBindings[i] = this.options.keyBindings[i] || keys[i];\n\t\t}\n\n\t\tutils.addEvent(window, 'keydown', this);\n\n\t\tthis.on('destroy', function () {\n\t\t\tutils.removeEvent(window, 'keydown', this);\n\t\t});\n\t},\n\n\t_key: function (e) {\n\t\tif ( !this.enabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar snap = this.options.snap,\t// we are using this alot, better to cache it\n\t\t\tnewX = snap ? this.currentPage.pageX : this.x,\n\t\t\tnewY = snap ? this.currentPage.pageY : this.y,\n\t\t\tnow = utils.getTime(),\n\t\t\tprevTime = this.keyTime || 0,\n\t\t\tacceleration = 0.250,\n\t\t\tpos;\n\n\t\tif ( this.options.useTransition && this.isInTransition ) {\n\t\t\tpos = this.getComputedPosition();\n\n\t\t\tthis._translate(Math.round(pos.x), Math.round(pos.y));\n\t\t\tthis.isInTransition = false;\n\t\t}\n\n\t\tthis.keyAcceleration = now - prevTime < 200 ? Math.min(this.keyAcceleration + acceleration, 50) : 0;\n\n\t\tswitch ( e.keyCode ) {\n\t\t\tcase this.options.keyBindings.pageUp:\n\t\t\t\tif ( this.hasHorizontalScroll && !this.hasVerticalScroll ) {\n\t\t\t\t\tnewX += snap ? 1 : this.wrapperWidth;\n\t\t\t\t} else {\n\t\t\t\t\tnewY += snap ? 1 : this.wrapperHeight;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase this.options.keyBindings.pageDown:\n\t\t\t\tif ( this.hasHorizontalScroll && !this.hasVerticalScroll ) {\n\t\t\t\t\tnewX -= snap ? 1 : this.wrapperWidth;\n\t\t\t\t} else {\n\t\t\t\t\tnewY -= snap ? 1 : this.wrapperHeight;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase this.options.keyBindings.end:\n\t\t\t\tnewX = snap ? this.pages.length-1 : this.maxScrollX;\n\t\t\t\tnewY = snap ? this.pages[0].length-1 : this.maxScrollY;\n\t\t\t\tbreak;\n\t\t\tcase this.options.keyBindings.home:\n\t\t\t\tnewX = 0;\n\t\t\t\tnewY = 0;\n\t\t\t\tbreak;\n\t\t\tcase this.options.keyBindings.left:\n\t\t\t\tnewX += snap ? -1 : 5 + this.keyAcceleration>>0;\n\t\t\t\tbreak;\n\t\t\tcase this.options.keyBindings.up:\n\t\t\t\tnewY += snap ? 1 : 5 + this.keyAcceleration>>0;\n\t\t\t\tbreak;\n\t\t\tcase this.options.keyBindings.right:\n\t\t\t\tnewX -= snap ? -1 : 5 + this.keyAcceleration>>0;\n\t\t\t\tbreak;\n\t\t\tcase this.options.keyBindings.down:\n\t\t\t\tnewY -= snap ? 1 : 5 + this.keyAcceleration>>0;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\n\t\tif ( snap ) {\n\t\t\tthis.goToPage(newX, newY);\n\t\t\treturn;\n\t\t}\n\n\t\tif ( newX > 0 ) {\n\t\t\tnewX = 0;\n\t\t\tthis.keyAcceleration = 0;\n\t\t} else if ( newX < this.maxScrollX ) {\n\t\t\tnewX = this.maxScrollX;\n\t\t\tthis.keyAcceleration = 0;\n\t\t}\n\n\t\tif ( newY > 0 ) {\n\t\t\tnewY = 0;\n\t\t\tthis.keyAcceleration = 0;\n\t\t} else if ( newY < this.maxScrollY ) {\n\t\t\tnewY = this.maxScrollY;\n\t\t\tthis.keyAcceleration = 0;\n\t\t}\n\n\t\tthis.scrollTo(newX, newY, 0);\n\n\t\tthis.keyTime = now;\n\t},\n\n\t_animate: function (destX, destY, duration, easingFn) {\n\t\tvar that = this,\n\t\t\tstartX = this.x,\n\t\t\tstartY = this.y,\n\t\t\tstartTime = utils.getTime(),\n\t\t\tdestTime = startTime + duration;\n\n\t\tfunction step () {\n\t\t\tvar now = utils.getTime(),\n\t\t\t\tnewX, newY,\n\t\t\t\teasing;\n\n\t\t\tif ( now >= destTime ) {\n\t\t\t\tthat.isAnimating = false;\n\t\t\t\tthat._translate(destX, destY);\n\n\t\t\t\tif ( !that.resetPosition(that.options.bounceTime) ) {\n\t\t\t\t\tthat._execEvent('scrollEnd');\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnow = ( now - startTime ) / duration;\n\t\t\teasing = easingFn(now);\n\t\t\tnewX = ( destX - startX ) * easing + startX;\n\t\t\tnewY = ( destY - startY ) * easing + startY;\n\t\t\tthat._translate(newX, newY);\n\n\t\t\tif ( that.isAnimating ) {\n\t\t\t\trAF(step);\n\t\t\t}\n\t\t}\n\n\t\tthis.isAnimating = true;\n\t\tstep();\n\t},\n\thandleEvent: function (e) {\n\t\tswitch ( e.type ) {\n\t\t\tcase 'touchstart':\n\t\t\tcase 'pointerdown':\n\t\t\tcase 'MSPointerDown':\n\t\t\tcase 'mousedown':\n\t\t\t\tthis._start(e);\n\t\t\t\tbreak;\n\t\t\tcase 'touchmove':\n\t\t\tcase 'pointermove':\n\t\t\tcase 'MSPointerMove':\n\t\t\tcase 'mousemove':\n\t\t\t\tthis._move(e);\n\t\t\t\tbreak;\n\t\t\tcase 'touchend':\n\t\t\tcase 'pointerup':\n\t\t\tcase 'MSPointerUp':\n\t\t\tcase 'mouseup':\n\t\t\tcase 'touchcancel':\n\t\t\tcase 'pointercancel':\n\t\t\tcase 'MSPointerCancel':\n\t\t\tcase 'mousecancel':\n\t\t\t\tthis._end(e);\n\t\t\t\tbreak;\n\t\t\tcase 'orientationchange':\n\t\t\tcase 'resize':\n\t\t\t\tthis._resize();\n\t\t\t\tbreak;\n\t\t\tcase 'transitionend':\n\t\t\tcase 'webkitTransitionEnd':\n\t\t\tcase 'oTransitionEnd':\n\t\t\tcase 'MSTransitionEnd':\n\t\t\t\tthis._transitionEnd(e);\n\t\t\t\tbreak;\n\t\t\tcase 'wheel':\n\t\t\tcase 'DOMMouseScroll':\n\t\t\tcase 'mousewheel':\n\t\t\t\tthis._wheel(e);\n\t\t\t\tbreak;\n\t\t\tcase 'keydown':\n\t\t\t\tthis._key(e);\n\t\t\t\tbreak;\n\t\t\tcase 'click':\n\t\t\t\tif ( this.enabled && !e._constructed ) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\nfunction createDefaultScrollbar (direction, interactive, type) {\n\tvar scrollbar = document.createElement('div'),\n\t\tindicator = document.createElement('div');\n\n\tif ( type === true ) {\n\t\tscrollbar.style.cssText = 'position:absolute;z-index:9999';\n\t\tindicator.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px';\n\t}\n\n\tindicator.className = 'iScrollIndicator';\n\n\tif ( direction == 'h' ) {\n\t\tif ( type === true ) {\n\t\t\tscrollbar.style.cssText += ';height:7px;left:2px;right:2px;bottom:0';\n\t\t\tindicator.style.height = '100%';\n\t\t}\n\t\tscrollbar.className = 'iScrollHorizontalScrollbar';\n\t} else {\n\t\tif ( type === true ) {\n\t\t\tscrollbar.style.cssText += ';width:7px;bottom:2px;top:2px;right:1px';\n\t\t\tindicator.style.width = '100%';\n\t\t}\n\t\tscrollbar.className = 'iScrollVerticalScrollbar';\n\t}\n\n\tscrollbar.style.cssText += ';overflow:hidden';\n\n\tif ( !interactive ) {\n\t\tscrollbar.style.pointerEvents = 'none';\n\t}\n\n\tscrollbar.appendChild(indicator);\n\n\treturn scrollbar;\n}\n\nfunction Indicator (scroller, options) {\n\tthis.wrapper = typeof options.el == 'string' ? document.querySelector(options.el) : options.el;\n\tthis.wrapperStyle = this.wrapper.style;\n\tthis.indicator = this.wrapper.children[0];\n\tthis.indicatorStyle = this.indicator.style;\n\tthis.scroller = scroller;\n\n\tthis.options = {\n\t\tlistenX: true,\n\t\tlistenY: true,\n\t\tinteractive: false,\n\t\tresize: true,\n\t\tdefaultScrollbars: false,\n\t\tshrink: false,\n\t\tfade: false,\n\t\tspeedRatioX: 0,\n\t\tspeedRatioY: 0\n\t};\n\n\tfor ( var i in options ) {\n\t\tthis.options[i] = options[i];\n\t}\n\n\tthis.sizeRatioX = 1;\n\tthis.sizeRatioY = 1;\n\tthis.maxPosX = 0;\n\tthis.maxPosY = 0;\n\n\tif ( this.options.interactive ) {\n\t\tif ( !this.options.disableTouch ) {\n\t\t\tutils.addEvent(this.indicator, 'touchstart', this);\n\t\t\tutils.addEvent(window, 'touchend', this);\n\t\t}\n\t\tif ( !this.options.disablePointer ) {\n\t\t\tutils.addEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);\n\t\t\tutils.addEvent(window, utils.prefixPointerEvent('pointerup'), this);\n\t\t}\n\t\tif ( !this.options.disableMouse ) {\n\t\t\tutils.addEvent(this.indicator, 'mousedown', this);\n\t\t\tutils.addEvent(window, 'mouseup', this);\n\t\t}\n\t}\n\n\tif ( this.options.fade ) {\n\t\tthis.wrapperStyle[utils.style.transform] = this.scroller.translateZ;\n\t\tvar durationProp = utils.style.transitionDuration;\n\t\tthis.wrapperStyle[durationProp] = utils.isBadAndroid ? '0.0001ms' : '0ms';\n\t\t// remove 0.0001ms\n\t\tvar self = this;\n\t\tif(utils.isBadAndroid) {\n\t\t\trAF(function() {\n\t\t\t\tif(self.wrapperStyle[durationProp] === '0.0001ms') {\n\t\t\t\t\tself.wrapperStyle[durationProp] = '0s';\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.wrapperStyle.opacity = '0';\n\t}\n}\n\nIndicator.prototype = {\n\thandleEvent: function (e) {\n\t\tswitch ( e.type ) {\n\t\t\tcase 'touchstart':\n\t\t\tcase 'pointerdown':\n\t\t\tcase 'MSPointerDown':\n\t\t\tcase 'mousedown':\n\t\t\t\tthis._start(e);\n\t\t\t\tbreak;\n\t\t\tcase 'touchmove':\n\t\t\tcase 'pointermove':\n\t\t\tcase 'MSPointerMove':\n\t\t\tcase 'mousemove':\n\t\t\t\tthis._move(e);\n\t\t\t\tbreak;\n\t\t\tcase 'touchend':\n\t\t\tcase 'pointerup':\n\t\t\tcase 'MSPointerUp':\n\t\t\tcase 'mouseup':\n\t\t\tcase 'touchcancel':\n\t\t\tcase 'pointercancel':\n\t\t\tcase 'MSPointerCancel':\n\t\t\tcase 'mousecancel':\n\t\t\t\tthis._end(e);\n\t\t\t\tbreak;\n\t\t}\n\t},\n\n\tdestroy: function () {\n\t\tif ( this.options.fadeScrollbars ) {\n\t\t\tclearTimeout(this.fadeTimeout);\n\t\t\tthis.fadeTimeout = null;\n\t\t}\n\t\tif ( this.options.interactive ) {\n\t\t\tutils.removeEvent(this.indicator, 'touchstart', this);\n\t\t\tutils.removeEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);\n\t\t\tutils.removeEvent(this.indicator, 'mousedown', this);\n\n\t\t\tutils.removeEvent(window, 'touchmove', this);\n\t\t\tutils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);\n\t\t\tutils.removeEvent(window, 'mousemove', this);\n\n\t\t\tutils.removeEvent(window, 'touchend', this);\n\t\t\tutils.removeEvent(window, utils.prefixPointerEvent('pointerup'), this);\n\t\t\tutils.removeEvent(window, 'mouseup', this);\n\t\t}\n\n\t\tif ( this.options.defaultScrollbars ) {\n\t\t\tthis.wrapper.parentNode.removeChild(this.wrapper);\n\t\t}\n\t},\n\n\t_start: function (e) {\n\t\tvar point = e.touches ? e.touches[0] : e;\n\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\tthis.transitionTime();\n\n\t\tthis.initiated = true;\n\t\tthis.moved = false;\n\t\tthis.lastPointX\t= point.pageX;\n\t\tthis.lastPointY\t= point.pageY;\n\n\t\tthis.startTime\t= utils.getTime();\n\n\t\tif ( !this.options.disableTouch ) {\n\t\t\tutils.addEvent(window, 'touchmove', this);\n\t\t}\n\t\tif ( !this.options.disablePointer ) {\n\t\t\tutils.addEvent(window, utils.prefixPointerEvent('pointermove'), this);\n\t\t}\n\t\tif ( !this.options.disableMouse ) {\n\t\t\tutils.addEvent(window, 'mousemove', this);\n\t\t}\n\n\t\tthis.scroller._execEvent('beforeScrollStart');\n\t},\n\n\t_move: function (e) {\n\t\tvar point = e.touches ? e.touches[0] : e,\n\t\t\tdeltaX, deltaY,\n\t\t\tnewX, newY,\n\t\t\ttimestamp = utils.getTime();\n\n\t\tif ( !this.moved ) {\n\t\t\tthis.scroller._execEvent('scrollStart');\n\t\t}\n\n\t\tthis.moved = true;\n\n\t\tdeltaX = point.pageX - this.lastPointX;\n\t\tthis.lastPointX = point.pageX;\n\n\t\tdeltaY = point.pageY - this.lastPointY;\n\t\tthis.lastPointY = point.pageY;\n\n\t\tnewX = this.x + deltaX;\n\t\tnewY = this.y + deltaY;\n\n\t\tthis._pos(newX, newY);\n\n// INSERT POINT: indicator._move\n\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t},\n\n\t_end: function (e) {\n\t\tif ( !this.initiated ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.initiated = false;\n\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\n\t\tutils.removeEvent(window, 'touchmove', this);\n\t\tutils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);\n\t\tutils.removeEvent(window, 'mousemove', this);\n\n\t\tif ( this.scroller.options.snap ) {\n\t\t\tvar snap = this.scroller._nearestSnap(this.scroller.x, this.scroller.y);\n\n\t\t\tvar time = this.options.snapSpeed || Math.max(\n\t\t\t\t\tMath.max(\n\t\t\t\t\t\tMath.min(Math.abs(this.scroller.x - snap.x), 1000),\n\t\t\t\t\t\tMath.min(Math.abs(this.scroller.y - snap.y), 1000)\n\t\t\t\t\t), 300);\n\n\t\t\tif ( this.scroller.x != snap.x || this.scroller.y != snap.y ) {\n\t\t\t\tthis.scroller.directionX = 0;\n\t\t\t\tthis.scroller.directionY = 0;\n\t\t\t\tthis.scroller.currentPage = snap;\n\t\t\t\tthis.scroller.scrollTo(snap.x, snap.y, time, this.scroller.options.bounceEasing);\n\t\t\t}\n\t\t}\n\n\t\tif ( this.moved ) {\n\t\t\tthis.scroller._execEvent('scrollEnd');\n\t\t}\n\t},\n\n\ttransitionTime: function (time) {\n\t\ttime = time || 0;\n\t\tvar durationProp = utils.style.transitionDuration;\n\t\tthis.indicatorStyle[durationProp] = time + 'ms';\n\n\t\tif ( !time && utils.isBadAndroid ) {\n\t\t\tthis.indicatorStyle[durationProp] = '0.0001ms';\n\t\t\t// remove 0.0001ms\n\t\t\tvar self = this;\n\t\t\trAF(function() {\n\t\t\t\tif(self.indicatorStyle[durationProp] === '0.0001ms') {\n\t\t\t\t\tself.indicatorStyle[durationProp] = '0s';\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\ttransitionTimingFunction: function (easing) {\n\t\tthis.indicatorStyle[utils.style.transitionTimingFunction] = easing;\n\t},\n\n\trefresh: function () {\n\t\tthis.transitionTime();\n\n\t\tif ( this.options.listenX && !this.options.listenY ) {\n\t\t\tthis.indicatorStyle.display = this.scroller.hasHorizontalScroll ? 'block' : 'none';\n\t\t} else if ( this.options.listenY && !this.options.listenX ) {\n\t\t\tthis.indicatorStyle.display = this.scroller.hasVerticalScroll ? 'block' : 'none';\n\t\t} else {\n\t\t\tthis.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? 'block' : 'none';\n\t\t}\n\n\t\tif ( this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll ) {\n\t\t\tutils.addClass(this.wrapper, 'iScrollBothScrollbars');\n\t\t\tutils.removeClass(this.wrapper, 'iScrollLoneScrollbar');\n\n\t\t\tif ( this.options.defaultScrollbars && this.options.customStyle ) {\n\t\t\t\tif ( this.options.listenX ) {\n\t\t\t\t\tthis.wrapper.style.right = '8px';\n\t\t\t\t} else {\n\t\t\t\t\tthis.wrapper.style.bottom = '8px';\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tutils.removeClass(this.wrapper, 'iScrollBothScrollbars');\n\t\t\tutils.addClass(this.wrapper, 'iScrollLoneScrollbar');\n\n\t\t\tif ( this.options.defaultScrollbars && this.options.customStyle ) {\n\t\t\t\tif ( this.options.listenX ) {\n\t\t\t\t\tthis.wrapper.style.right = '2px';\n\t\t\t\t} else {\n\t\t\t\t\tthis.wrapper.style.bottom = '2px';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar r = this.wrapper.offsetHeight;\t// force refresh\n\n\t\tif ( this.options.listenX ) {\n\t\t\tthis.wrapperWidth = this.wrapper.clientWidth;\n\t\t\tif ( this.options.resize ) {\n\t\t\t\tthis.indicatorWidth = Math.max(Math.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8);\n\t\t\t\tthis.indicatorStyle.width = this.indicatorWidth + 'px';\n\t\t\t} else {\n\t\t\t\tthis.indicatorWidth = this.indicator.clientWidth;\n\t\t\t}\n\n\t\t\tthis.maxPosX = this.wrapperWidth - this.indicatorWidth;\n\n\t\t\tif ( this.options.shrink == 'clip' ) {\n\t\t\t\tthis.minBoundaryX = -this.indicatorWidth + 8;\n\t\t\t\tthis.maxBoundaryX = this.wrapperWidth - 8;\n\t\t\t} else {\n\t\t\t\tthis.minBoundaryX = 0;\n\t\t\t\tthis.maxBoundaryX = this.maxPosX;\n\t\t\t}\n\n\t\t\tthis.sizeRatioX = this.options.speedRatioX || (this.scroller.maxScrollX && (this.maxPosX / this.scroller.maxScrollX));\n\t\t}\n\n\t\tif ( this.options.listenY ) {\n\t\t\tthis.wrapperHeight = this.wrapper.clientHeight;\n\t\t\tif ( this.options.resize ) {\n\t\t\t\tthis.indicatorHeight = Math.max(Math.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8);\n\t\t\t\tthis.indicatorStyle.height = this.indicatorHeight + 'px';\n\t\t\t} else {\n\t\t\t\tthis.indicatorHeight = this.indicator.clientHeight;\n\t\t\t}\n\n\t\t\tthis.maxPosY = this.wrapperHeight - this.indicatorHeight;\n\n\t\t\tif ( this.options.shrink == 'clip' ) {\n\t\t\t\tthis.minBoundaryY = -this.indicatorHeight + 8;\n\t\t\t\tthis.maxBoundaryY = this.wrapperHeight - 8;\n\t\t\t} else {\n\t\t\t\tthis.minBoundaryY = 0;\n\t\t\t\tthis.maxBoundaryY = this.maxPosY;\n\t\t\t}\n\n\t\t\tthis.maxPosY = this.wrapperHeight - this.indicatorHeight;\n\t\t\tthis.sizeRatioY = this.options.speedRatioY || (this.scroller.maxScrollY && (this.maxPosY / this.scroller.maxScrollY));\n\t\t}\n\n\t\tthis.updatePosition();\n\t},\n\n\tupdatePosition: function () {\n\t\tvar x = this.options.listenX && Math.round(this.sizeRatioX * this.scroller.x) || 0,\n\t\t\ty = this.options.listenY && Math.round(this.sizeRatioY * this.scroller.y) || 0;\n\n\t\tif ( !this.options.ignoreBoundaries ) {\n\t\t\tif ( x < this.minBoundaryX ) {\n\t\t\t\tif ( this.options.shrink == 'scale' ) {\n\t\t\t\t\tthis.width = Math.max(this.indicatorWidth + x, 8);\n\t\t\t\t\tthis.indicatorStyle.width = this.width + 'px';\n\t\t\t\t}\n\t\t\t\tx = this.minBoundaryX;\n\t\t\t} else if ( x > this.maxBoundaryX ) {\n\t\t\t\tif ( this.options.shrink == 'scale' ) {\n\t\t\t\t\tthis.width = Math.max(this.indicatorWidth - (x - this.maxPosX), 8);\n\t\t\t\t\tthis.indicatorStyle.width = this.width + 'px';\n\t\t\t\t\tx = this.maxPosX + this.indicatorWidth - this.width;\n\t\t\t\t} else {\n\t\t\t\t\tx = this.maxBoundaryX;\n\t\t\t\t}\n\t\t\t} else if ( this.options.shrink == 'scale' && this.width != this.indicatorWidth ) {\n\t\t\t\tthis.width = this.indicatorWidth;\n\t\t\t\tthis.indicatorStyle.width = this.width + 'px';\n\t\t\t}\n\n\t\t\tif ( y < this.minBoundaryY ) {\n\t\t\t\tif ( this.options.shrink == 'scale' ) {\n\t\t\t\t\tthis.height = Math.max(this.indicatorHeight + y * 3, 8);\n\t\t\t\t\tthis.indicatorStyle.height = this.height + 'px';\n\t\t\t\t}\n\t\t\t\ty = this.minBoundaryY;\n\t\t\t} else if ( y > this.maxBoundaryY ) {\n\t\t\t\tif ( this.options.shrink == 'scale' ) {\n\t\t\t\t\tthis.height = Math.max(this.indicatorHeight - (y - this.maxPosY) * 3, 8);\n\t\t\t\t\tthis.indicatorStyle.height = this.height + 'px';\n\t\t\t\t\ty = this.maxPosY + this.indicatorHeight - this.height;\n\t\t\t\t} else {\n\t\t\t\t\ty = this.maxBoundaryY;\n\t\t\t\t}\n\t\t\t} else if ( this.options.shrink == 'scale' && this.height != this.indicatorHeight ) {\n\t\t\t\tthis.height = this.indicatorHeight;\n\t\t\t\tthis.indicatorStyle.height = this.height + 'px';\n\t\t\t}\n\t\t}\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\tif ( this.scroller.options.useTransform ) {\n\t\t\tthis.indicatorStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.scroller.translateZ;\n\t\t} else {\n\t\t\tthis.indicatorStyle.left = x + 'px';\n\t\t\tthis.indicatorStyle.top = y + 'px';\n\t\t}\n\t},\n\n\t_pos: function (x, y) {\n\t\tif ( x < 0 ) {\n\t\t\tx = 0;\n\t\t} else if ( x > this.maxPosX ) {\n\t\t\tx = this.maxPosX;\n\t\t}\n\n\t\tif ( y < 0 ) {\n\t\t\ty = 0;\n\t\t} else if ( y > this.maxPosY ) {\n\t\t\ty = this.maxPosY;\n\t\t}\n\n\t\tx = this.options.listenX ? Math.round(x / this.sizeRatioX) : this.scroller.x;\n\t\ty = this.options.listenY ? Math.round(y / this.sizeRatioY) : this.scroller.y;\n\n\t\tthis.scroller.scrollTo(x, y);\n\t},\n\n\tfade: function (val, hold) {\n\t\tif ( hold && !this.visible ) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearTimeout(this.fadeTimeout);\n\t\tthis.fadeTimeout = null;\n\n\t\tvar time = val ? 250 : 500,\n\t\t\tdelay = val ? 0 : 300;\n\n\t\tval = val ? '1' : '0';\n\n\t\tthis.wrapperStyle[utils.style.transitionDuration] = time + 'ms';\n\n\t\tthis.fadeTimeout = setTimeout((function (val) {\n\t\t\tthis.wrapperStyle.opacity = val;\n\t\t\tthis.visible = +val;\n\t\t}).bind(this, val), delay);\n\t}\n};\n\nIScroll.utils = utils;\n\nif ( typeof module != 'undefined' && module.exports ) {\n\tmodule.exports = IScroll;\n} else if ( true ) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () { return IScroll; }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else {\n\twindow.IScroll = IScroll;\n}\n\n})(window, document, Math);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Isotope v3.0.6\n *\n * Licensed GPLv3 for open source use\n * or Isotope Commercial License for commercial use\n *\n * https://isotope.metafizzy.co\n * Copyright 2010-2018 Metafizzy\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(4),\n        __webpack_require__(2),\n        __webpack_require__(16),\n        __webpack_require__(18),\n        __webpack_require__(39),\n        __webpack_require__(3),\n        // include default layout modes\n        __webpack_require__(41),\n        __webpack_require__(40),\n        __webpack_require__(42)\n      ], __WEBPACK_AMD_DEFINE_RESULT__ = function( Outlayer, getSize, matchesSelector, utils, Item, LayoutMode ) {\n        return factory( window, Outlayer, getSize, matchesSelector, utils, Item, LayoutMode );\n      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('outlayer'),\n      require('get-size'),\n      require('desandro-matches-selector'),\n      require('fizzy-ui-utils'),\n      require('./item'),\n      require('./layout-mode'),\n      // include default layout modes\n      require('./layout-modes/masonry'),\n      require('./layout-modes/fit-rows'),\n      require('./layout-modes/vertical')\n    );\n  } else {\n    // browser global\n    window.Isotope = factory(\n      window,\n      window.Outlayer,\n      window.getSize,\n      window.matchesSelector,\n      window.fizzyUIUtils,\n      window.Isotope.Item,\n      window.Isotope.LayoutMode\n    );\n  }\n\n}( window, function factory( window, Outlayer, getSize, matchesSelector, utils,\n  Item, LayoutMode ) {\n\n'use strict';\n\n// -------------------------- vars -------------------------- //\n\nvar jQuery = window.jQuery;\n\n// -------------------------- helpers -------------------------- //\n\nvar trim = String.prototype.trim ?\n  function( str ) {\n    return str.trim();\n  } :\n  function( str ) {\n    return str.replace( /^\\s+|\\s+$/g, '' );\n  };\n\n// -------------------------- isotopeDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var Isotope = Outlayer.create( 'isotope', {\n    layoutMode: 'masonry',\n    isJQueryFiltering: true,\n    sortAscending: true\n  });\n\n  Isotope.Item = Item;\n  Isotope.LayoutMode = LayoutMode;\n\n  var proto = Isotope.prototype;\n\n  proto._create = function() {\n    this.itemGUID = 0;\n    // functions that sort items\n    this._sorters = {};\n    this._getSorters();\n    // call super\n    Outlayer.prototype._create.call( this );\n\n    // create layout modes\n    this.modes = {};\n    // start filteredItems with all items\n    this.filteredItems = this.items;\n    // keep of track of sortBys\n    this.sortHistory = [ 'original-order' ];\n    // create from registered layout modes\n    for ( var name in LayoutMode.modes ) {\n      this._initLayoutMode( name );\n    }\n  };\n\n  proto.reloadItems = function() {\n    // reset item ID counter\n    this.itemGUID = 0;\n    // call super\n    Outlayer.prototype.reloadItems.call( this );\n  };\n\n  proto._itemize = function() {\n    var items = Outlayer.prototype._itemize.apply( this, arguments );\n    // assign ID for original-order\n    for ( var i=0; i < items.length; i++ ) {\n      var item = items[i];\n      item.id = this.itemGUID++;\n    }\n    this._updateItemsSortData( items );\n    return items;\n  };\n\n\n  // -------------------------- layout -------------------------- //\n\n  proto._initLayoutMode = function( name ) {\n    var Mode = LayoutMode.modes[ name ];\n    // set mode options\n    // HACK extend initial options, back-fill in default options\n    var initialOpts = this.options[ name ] || {};\n    this.options[ name ] = Mode.options ?\n      utils.extend( Mode.options, initialOpts ) : initialOpts;\n    // init layout mode instance\n    this.modes[ name ] = new Mode( this );\n  };\n\n\n  proto.layout = function() {\n    // if first time doing layout, do all magic\n    if ( !this._isLayoutInited && this._getOption('initLayout') ) {\n      this.arrange();\n      return;\n    }\n    this._layout();\n  };\n\n  // private method to be used in layout() & magic()\n  proto._layout = function() {\n    // don't animate first layout\n    var isInstant = this._getIsInstant();\n    // layout flow\n    this._resetLayout();\n    this._manageStamps();\n    this.layoutItems( this.filteredItems, isInstant );\n\n    // flag for initalized\n    this._isLayoutInited = true;\n  };\n\n  // filter + sort + layout\n  proto.arrange = function( opts ) {\n    // set any options pass\n    this.option( opts );\n    this._getIsInstant();\n    // filter, sort, and layout\n\n    // filter\n    var filtered = this._filter( this.items );\n    this.filteredItems = filtered.matches;\n\n    this._bindArrangeComplete();\n\n    if ( this._isInstant ) {\n      this._noTransition( this._hideReveal, [ filtered ] );\n    } else {\n      this._hideReveal( filtered );\n    }\n\n    this._sort();\n    this._layout();\n  };\n  // alias to _init for main plugin method\n  proto._init = proto.arrange;\n\n  proto._hideReveal = function( filtered ) {\n    this.reveal( filtered.needReveal );\n    this.hide( filtered.needHide );\n  };\n\n  // HACK\n  // Don't animate/transition first layout\n  // Or don't animate/transition other layouts\n  proto._getIsInstant = function() {\n    var isLayoutInstant = this._getOption('layoutInstant');\n    var isInstant = isLayoutInstant !== undefined ? isLayoutInstant :\n      !this._isLayoutInited;\n    this._isInstant = isInstant;\n    return isInstant;\n  };\n\n  // listen for layoutComplete, hideComplete and revealComplete\n  // to trigger arrangeComplete\n  proto._bindArrangeComplete = function() {\n    // listen for 3 events to trigger arrangeComplete\n    var isLayoutComplete, isHideComplete, isRevealComplete;\n    var _this = this;\n    function arrangeParallelCallback() {\n      if ( isLayoutComplete && isHideComplete && isRevealComplete ) {\n        _this.dispatchEvent( 'arrangeComplete', null, [ _this.filteredItems ] );\n      }\n    }\n    this.once( 'layoutComplete', function() {\n      isLayoutComplete = true;\n      arrangeParallelCallback();\n    });\n    this.once( 'hideComplete', function() {\n      isHideComplete = true;\n      arrangeParallelCallback();\n    });\n    this.once( 'revealComplete', function() {\n      isRevealComplete = true;\n      arrangeParallelCallback();\n    });\n  };\n\n  // -------------------------- filter -------------------------- //\n\n  proto._filter = function( items ) {\n    var filter = this.options.filter;\n    filter = filter || '*';\n    var matches = [];\n    var hiddenMatched = [];\n    var visibleUnmatched = [];\n\n    var test = this._getFilterTest( filter );\n\n    // test each item\n    for ( var i=0; i < items.length; i++ ) {\n      var item = items[i];\n      if ( item.isIgnored ) {\n        continue;\n      }\n      // add item to either matched or unmatched group\n      var isMatched = test( item );\n      // item.isFilterMatched = isMatched;\n      // add to matches if its a match\n      if ( isMatched ) {\n        matches.push( item );\n      }\n      // add to additional group if item needs to be hidden or revealed\n      if ( isMatched && item.isHidden ) {\n        hiddenMatched.push( item );\n      } else if ( !isMatched && !item.isHidden ) {\n        visibleUnmatched.push( item );\n      }\n    }\n\n    // return collections of items to be manipulated\n    return {\n      matches: matches,\n      needReveal: hiddenMatched,\n      needHide: visibleUnmatched\n    };\n  };\n\n  // get a jQuery, function, or a matchesSelector test given the filter\n  proto._getFilterTest = function( filter ) {\n    if ( jQuery && this.options.isJQueryFiltering ) {\n      // use jQuery\n      return function( item ) {\n        return jQuery( item.element ).is( filter );\n      };\n    }\n    if ( typeof filter == 'function' ) {\n      // use filter as function\n      return function( item ) {\n        return filter( item.element );\n      };\n    }\n    // default, use filter as selector string\n    return function( item ) {\n      return matchesSelector( item.element, filter );\n    };\n  };\n\n  // -------------------------- sorting -------------------------- //\n\n  /**\n   * @params {Array} elems\n   * @public\n   */\n  proto.updateSortData = function( elems ) {\n    // get items\n    var items;\n    if ( elems ) {\n      elems = utils.makeArray( elems );\n      items = this.getItems( elems );\n    } else {\n      // update all items if no elems provided\n      items = this.items;\n    }\n\n    this._getSorters();\n    this._updateItemsSortData( items );\n  };\n\n  proto._getSorters = function() {\n    var getSortData = this.options.getSortData;\n    for ( var key in getSortData ) {\n      var sorter = getSortData[ key ];\n      this._sorters[ key ] = mungeSorter( sorter );\n    }\n  };\n\n  /**\n   * @params {Array} items - of Isotope.Items\n   * @private\n   */\n  proto._updateItemsSortData = function( items ) {\n    // do not update if no items\n    var len = items && items.length;\n\n    for ( var i=0; len && i < len; i++ ) {\n      var item = items[i];\n      item.updateSortData();\n    }\n  };\n\n  // ----- munge sorter ----- //\n\n  // encapsulate this, as we just need mungeSorter\n  // other functions in here are just for munging\n  var mungeSorter = ( function() {\n    // add a magic layer to sorters for convienent shorthands\n    // `.foo-bar` will use the text of .foo-bar querySelector\n    // `[foo-bar]` will use attribute\n    // you can also add parser\n    // `.foo-bar parseInt` will parse that as a number\n    function mungeSorter( sorter ) {\n      // if not a string, return function or whatever it is\n      if ( typeof sorter != 'string' ) {\n        return sorter;\n      }\n      // parse the sorter string\n      var args = trim( sorter ).split(' ');\n      var query = args[0];\n      // check if query looks like [an-attribute]\n      var attrMatch = query.match( /^\\[(.+)\\]$/ );\n      var attr = attrMatch && attrMatch[1];\n      var getValue = getValueGetter( attr, query );\n      // use second argument as a parser\n      var parser = Isotope.sortDataParsers[ args[1] ];\n      // parse the value, if there was a parser\n      sorter = parser ? function( elem ) {\n        return elem && parser( getValue( elem ) );\n      } :\n      // otherwise just return value\n      function( elem ) {\n        return elem && getValue( elem );\n      };\n\n      return sorter;\n    }\n\n    // get an attribute getter, or get text of the querySelector\n    function getValueGetter( attr, query ) {\n      // if query looks like [foo-bar], get attribute\n      if ( attr ) {\n        return function getAttribute( elem ) {\n          return elem.getAttribute( attr );\n        };\n      }\n\n      // otherwise, assume its a querySelector, and get its text\n      return function getChildText( elem ) {\n        var child = elem.querySelector( query );\n        return child && child.textContent;\n      };\n    }\n\n    return mungeSorter;\n  })();\n\n  // parsers used in getSortData shortcut strings\n  Isotope.sortDataParsers = {\n    'parseInt': function( val ) {\n      return parseInt( val, 10 );\n    },\n    'parseFloat': function( val ) {\n      return parseFloat( val );\n    }\n  };\n\n  // ----- sort method ----- //\n\n  // sort filteredItem order\n  proto._sort = function() {\n    if ( !this.options.sortBy ) {\n      return;\n    }\n    // keep track of sortBy History\n    var sortBys = utils.makeArray( this.options.sortBy );\n    if ( !this._getIsSameSortBy( sortBys ) ) {\n      // concat all sortBy and sortHistory, add to front, oldest goes in last\n      this.sortHistory = sortBys.concat( this.sortHistory );\n    }\n    // sort magic\n    var itemSorter = getItemSorter( this.sortHistory, this.options.sortAscending );\n    this.filteredItems.sort( itemSorter );\n  };\n\n  // check if sortBys is same as start of sortHistory\n  proto._getIsSameSortBy = function( sortBys ) {\n    for ( var i=0; i < sortBys.length; i++ ) {\n      if ( sortBys[i] != this.sortHistory[i] ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // returns a function used for sorting\n  function getItemSorter( sortBys, sortAsc ) {\n    return function sorter( itemA, itemB ) {\n      // cycle through all sortKeys\n      for ( var i = 0; i < sortBys.length; i++ ) {\n        var sortBy = sortBys[i];\n        var a = itemA.sortData[ sortBy ];\n        var b = itemB.sortData[ sortBy ];\n        if ( a > b || a < b ) {\n          // if sortAsc is an object, use the value given the sortBy key\n          var isAscending = sortAsc[ sortBy ] !== undefined ? sortAsc[ sortBy ] : sortAsc;\n          var direction = isAscending ? 1 : -1;\n          return ( a > b ? 1 : -1 ) * direction;\n        }\n      }\n      return 0;\n    };\n  }\n\n  // -------------------------- methods -------------------------- //\n\n  // get layout mode\n  proto._mode = function() {\n    var layoutMode = this.options.layoutMode;\n    var mode = this.modes[ layoutMode ];\n    if ( !mode ) {\n      // TODO console.error\n      throw new Error( 'No layout mode: ' + layoutMode );\n    }\n    // HACK sync mode's options\n    // any options set after init for layout mode need to be synced\n    mode.options = this.options[ layoutMode ];\n    return mode;\n  };\n\n  proto._resetLayout = function() {\n    // trigger original reset layout\n    Outlayer.prototype._resetLayout.call( this );\n    this._mode()._resetLayout();\n  };\n\n  proto._getItemLayoutPosition = function( item  ) {\n    return this._mode()._getItemLayoutPosition( item );\n  };\n\n  proto._manageStamp = function( stamp ) {\n    this._mode()._manageStamp( stamp );\n  };\n\n  proto._getContainerSize = function() {\n    return this._mode()._getContainerSize();\n  };\n\n  proto.needsResizeLayout = function() {\n    return this._mode().needsResizeLayout();\n  };\n\n  // -------------------------- adding & removing -------------------------- //\n\n  // HEADS UP overwrites default Outlayer appended\n  proto.appended = function( elems ) {\n    var items = this.addItems( elems );\n    if ( !items.length ) {\n      return;\n    }\n    // filter, layout, reveal new items\n    var filteredItems = this._filterRevealAdded( items );\n    // add to filteredItems\n    this.filteredItems = this.filteredItems.concat( filteredItems );\n  };\n\n  // HEADS UP overwrites default Outlayer prepended\n  proto.prepended = function( elems ) {\n    var items = this._itemize( elems );\n    if ( !items.length ) {\n      return;\n    }\n    // start new layout\n    this._resetLayout();\n    this._manageStamps();\n    // filter, layout, reveal new items\n    var filteredItems = this._filterRevealAdded( items );\n    // layout previous items\n    this.layoutItems( this.filteredItems );\n    // add to items and filteredItems\n    this.filteredItems = filteredItems.concat( this.filteredItems );\n    this.items = items.concat( this.items );\n  };\n\n  proto._filterRevealAdded = function( items ) {\n    var filtered = this._filter( items );\n    this.hide( filtered.needHide );\n    // reveal all new items\n    this.reveal( filtered.matches );\n    // layout new items, no transition\n    this.layoutItems( filtered.matches, true );\n    return filtered.matches;\n  };\n\n  /**\n   * Filter, sort, and layout newly-appended item elements\n   * @param {Array or NodeList or Element} elems\n   */\n  proto.insert = function( elems ) {\n    var items = this.addItems( elems );\n    if ( !items.length ) {\n      return;\n    }\n    // append item elements\n    var i, item;\n    var len = items.length;\n    for ( i=0; i < len; i++ ) {\n      item = items[i];\n      this.element.appendChild( item.element );\n    }\n    // filter new stuff\n    var filteredInsertItems = this._filter( items ).matches;\n    // set flag\n    for ( i=0; i < len; i++ ) {\n      items[i].isLayoutInstant = true;\n    }\n    this.arrange();\n    // reset flag\n    for ( i=0; i < len; i++ ) {\n      delete items[i].isLayoutInstant;\n    }\n    this.reveal( filteredInsertItems );\n  };\n\n  var _remove = proto.remove;\n  proto.remove = function( elems ) {\n    elems = utils.makeArray( elems );\n    var removeItems = this.getItems( elems );\n    // do regular thing\n    _remove.call( this, elems );\n    // bail if no items to remove\n    var len = removeItems && removeItems.length;\n    // remove elems from filteredItems\n    for ( var i=0; len && i < len; i++ ) {\n      var item = removeItems[i];\n      // remove item from collection\n      utils.removeFrom( this.filteredItems, item );\n    }\n  };\n\n  proto.shuffle = function() {\n    // update random sortData\n    for ( var i=0; i < this.items.length; i++ ) {\n      var item = this.items[i];\n      item.sortData.random = Math.random();\n    }\n    this.options.sortBy = 'random';\n    this._sort();\n    this._layout();\n  };\n\n  /**\n   * trigger fn without transition\n   * kind of hacky to have this in the first place\n   * @param {Function} fn\n   * @param {Array} args\n   * @returns ret\n   * @private\n   */\n  proto._noTransition = function( fn, args ) {\n    // save transitionDuration before disabling\n    var transitionDuration = this.options.transitionDuration;\n    // disable transition\n    this.options.transitionDuration = 0;\n    // do it\n    var returnValue = fn.apply( this, args );\n    // re-enable transition for reveal\n    this.options.transitionDuration = transitionDuration;\n    return returnValue;\n  };\n\n  // ----- helper methods ----- //\n\n  /**\n   * getter method for getting filtered item elements\n   * @returns {Array} elems - collection of item elements\n   */\n  proto.getFilteredItemElements = function() {\n    return this.filteredItems.map( function( item ) {\n      return item.element;\n    });\n  };\n\n  // -----  ----- //\n\n  return Isotope;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Isotope Item\n**/\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(4)\n      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      require('outlayer')\n    );\n  } else {\n    // browser global\n    window.Isotope = window.Isotope || {};\n    window.Isotope.Item = factory(\n      window.Outlayer\n    );\n  }\n\n}( window, function factory( Outlayer ) {\n'use strict';\n\n// -------------------------- Item -------------------------- //\n\n// sub-class Outlayer Item\nfunction Item() {\n  Outlayer.Item.apply( this, arguments );\n}\n\nvar proto = Item.prototype = Object.create( Outlayer.Item.prototype );\n\nvar _create = proto._create;\nproto._create = function() {\n  // assign id, used for original-order sorting\n  this.id = this.layout.itemGUID++;\n  _create.call( this );\n  this.sortData = {};\n};\n\nproto.updateSortData = function() {\n  if ( this.isIgnored ) {\n    return;\n  }\n  // default sorters\n  this.sortData.id = this.id;\n  // for backward compatibility\n  this.sortData['original-order'] = this.id;\n  this.sortData.random = Math.random();\n  // go thru getSortData obj and apply the sorters\n  var getSortData = this.layout.options.getSortData;\n  var sorters = this.layout._sorters;\n  for ( var key in getSortData ) {\n    var sorter = sorters[ key ];\n    this.sortData[ key ] = sorter( this.element, this );\n  }\n};\n\nvar _destroy = proto.destroy;\nproto.destroy = function() {\n  // call super\n  _destroy.apply( this, arguments );\n  // reset display, #741\n  this.css({\n    display: ''\n  });\n};\n\nreturn Item;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRDovdml0YWxpay9rbGltb3Yvfi9pc290b3BlLWxheW91dC9qcy9pdGVtLmpzPzljMWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJc290b3BlIEl0ZW1cbioqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICAgJ291dGxheWVyL291dGxheWVyJ1xuICAgICAgXSxcbiAgICAgIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHJlcXVpcmUoJ291dGxheWVyJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93Lklzb3RvcGUgPSB3aW5kb3cuSXNvdG9wZSB8fCB7fTtcbiAgICB3aW5kb3cuSXNvdG9wZS5JdGVtID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdy5PdXRsYXllclxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBPdXRsYXllciApIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSXRlbSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBzdWItY2xhc3MgT3V0bGF5ZXIgSXRlbVxuZnVuY3Rpb24gSXRlbSgpIHtcbiAgT3V0bGF5ZXIuSXRlbS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG59XG5cbnZhciBwcm90byA9IEl0ZW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT3V0bGF5ZXIuSXRlbS5wcm90b3R5cGUgKTtcblxudmFyIF9jcmVhdGUgPSBwcm90by5fY3JlYXRlO1xucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBhc3NpZ24gaWQsIHVzZWQgZm9yIG9yaWdpbmFsLW9yZGVyIHNvcnRpbmdcbiAgdGhpcy5pZCA9IHRoaXMubGF5b3V0Lml0ZW1HVUlEKys7XG4gIF9jcmVhdGUuY2FsbCggdGhpcyApO1xuICB0aGlzLnNvcnREYXRhID0ge307XG59O1xuXG5wcm90by51cGRhdGVTb3J0RGF0YSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuaXNJZ25vcmVkICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBkZWZhdWx0IHNvcnRlcnNcbiAgdGhpcy5zb3J0RGF0YS5pZCA9IHRoaXMuaWQ7XG4gIC8vIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gIHRoaXMuc29ydERhdGFbJ29yaWdpbmFsLW9yZGVyJ10gPSB0aGlzLmlkO1xuICB0aGlzLnNvcnREYXRhLnJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIGdvIHRocnUgZ2V0U29ydERhdGEgb2JqIGFuZCBhcHBseSB0aGUgc29ydGVyc1xuICB2YXIgZ2V0U29ydERhdGEgPSB0aGlzLmxheW91dC5vcHRpb25zLmdldFNvcnREYXRhO1xuICB2YXIgc29ydGVycyA9IHRoaXMubGF5b3V0Ll9zb3J0ZXJzO1xuICBmb3IgKCB2YXIga2V5IGluIGdldFNvcnREYXRhICkge1xuICAgIHZhciBzb3J0ZXIgPSBzb3J0ZXJzWyBrZXkgXTtcbiAgICB0aGlzLnNvcnREYXRhWyBrZXkgXSA9IHNvcnRlciggdGhpcy5lbGVtZW50LCB0aGlzICk7XG4gIH1cbn07XG5cbnZhciBfZGVzdHJveSA9IHByb3RvLmRlc3Ryb3k7XG5wcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNhbGwgc3VwZXJcbiAgX2Rlc3Ryb3kuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAvLyByZXNldCBkaXNwbGF5LCAjNzQxXG4gIHRoaXMuY3NzKHtcbiAgICBkaXNwbGF5OiAnJ1xuICB9KTtcbn07XG5cbnJldHVybiBJdGVtO1xuXG59KSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBEOi92aXRhbGlrL2tsaW1vdi9+L2lzb3RvcGUtbGF5b3V0L2pzL2l0ZW0uanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * fitRows layout mode\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(3)\n      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof exports == 'object' ) {\n    // CommonJS\n    module.exports = factory(\n      require('../layout-mode')\n    );\n  } else {\n    // browser global\n    factory(\n      window.Isotope.LayoutMode\n    );\n  }\n\n}( window, function factory( LayoutMode ) {\n'use strict';\n\nvar FitRows = LayoutMode.create('fitRows');\n\nvar proto = FitRows.prototype;\n\nproto._resetLayout = function() {\n  this.x = 0;\n  this.y = 0;\n  this.maxY = 0;\n  this._getMeasurement( 'gutter', 'outerWidth' );\n};\n\nproto._getItemLayoutPosition = function( item ) {\n  item.getSize();\n\n  var itemWidth = item.size.outerWidth + this.gutter;\n  // if this element cannot fit in the current row\n  var containerWidth = this.isotope.size.innerWidth + this.gutter;\n  if ( this.x !== 0 && itemWidth + this.x > containerWidth ) {\n    this.x = 0;\n    this.y = this.maxY;\n  }\n\n  var position = {\n    x: this.x,\n    y: this.y\n  };\n\n  this.maxY = Math.max( this.maxY, this.y + item.size.outerHeight );\n  this.x += itemWidth;\n\n  return position;\n};\n\nproto._getContainerSize = function() {\n  return { height: this.maxY };\n};\n\nreturn FitRows;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRDovdml0YWxpay9rbGltb3Yvfi9pc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvZml0LXJvd3MuanM/MjRjNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGZpdFJvd3MgbGF5b3V0IG1vZGVcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICAgJy4uL2xheW91dC1tb2RlJ1xuICAgICAgXSxcbiAgICAgIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCcuLi9sYXlvdXQtbW9kZScpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICB3aW5kb3cuSXNvdG9wZS5MYXlvdXRNb2RlXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIExheW91dE1vZGUgKSB7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBGaXRSb3dzID0gTGF5b3V0TW9kZS5jcmVhdGUoJ2ZpdFJvd3MnKTtcblxudmFyIHByb3RvID0gRml0Um93cy5wcm90b3R5cGU7XG5cbnByb3RvLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnggPSAwO1xuICB0aGlzLnkgPSAwO1xuICB0aGlzLm1heFkgPSAwO1xuICB0aGlzLl9nZXRNZWFzdXJlbWVudCggJ2d1dHRlcicsICdvdXRlcldpZHRoJyApO1xufTtcblxucHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICkge1xuICBpdGVtLmdldFNpemUoKTtcblxuICB2YXIgaXRlbVdpZHRoID0gaXRlbS5zaXplLm91dGVyV2lkdGggKyB0aGlzLmd1dHRlcjtcbiAgLy8gaWYgdGhpcyBlbGVtZW50IGNhbm5vdCBmaXQgaW4gdGhlIGN1cnJlbnQgcm93XG4gIHZhciBjb250YWluZXJXaWR0aCA9IHRoaXMuaXNvdG9wZS5zaXplLmlubmVyV2lkdGggKyB0aGlzLmd1dHRlcjtcbiAgaWYgKCB0aGlzLnggIT09IDAgJiYgaXRlbVdpZHRoICsgdGhpcy54ID4gY29udGFpbmVyV2lkdGggKSB7XG4gICAgdGhpcy54ID0gMDtcbiAgICB0aGlzLnkgPSB0aGlzLm1heFk7XG4gIH1cblxuICB2YXIgcG9zaXRpb24gPSB7XG4gICAgeDogdGhpcy54LFxuICAgIHk6IHRoaXMueVxuICB9O1xuXG4gIHRoaXMubWF4WSA9IE1hdGgubWF4KCB0aGlzLm1heFksIHRoaXMueSArIGl0ZW0uc2l6ZS5vdXRlckhlaWdodCApO1xuICB0aGlzLnggKz0gaXRlbVdpZHRoO1xuXG4gIHJldHVybiBwb3NpdGlvbjtcbn07XG5cbnByb3RvLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7IGhlaWdodDogdGhpcy5tYXhZIH07XG59O1xuXG5yZXR1cm4gRml0Um93cztcblxufSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gRDovdml0YWxpay9rbGltb3Yvfi9pc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvZml0LXJvd3MuanNcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Masonry layout mode\n * sub-classes Masonry\n * https://masonry.desandro.com\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(3),\n        __webpack_require__(44)\n      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      require('../layout-mode'),\n      require('masonry-layout')\n    );\n  } else {\n    // browser global\n    factory(\n      window.Isotope.LayoutMode,\n      window.Masonry\n    );\n  }\n\n}( window, function factory( LayoutMode, Masonry ) {\n'use strict';\n\n// -------------------------- masonryDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var MasonryMode = LayoutMode.create('masonry');\n\n  var proto = MasonryMode.prototype;\n\n  var keepModeMethods = {\n    _getElementOffset: true,\n    layout: true,\n    _getMeasurement: true\n  };\n\n  // inherit Masonry prototype\n  for ( var method in Masonry.prototype ) {\n    // do not inherit mode methods\n    if ( !keepModeMethods[ method ] ) {\n      proto[ method ] = Masonry.prototype[ method ];\n    }\n  }\n\n  var measureColumns = proto.measureColumns;\n  proto.measureColumns = function() {\n    // set items, used if measuring first item\n    this.items = this.isotope.filteredItems;\n    measureColumns.call( this );\n  };\n\n  // point to mode options for fitWidth\n  var _getOption = proto._getOption;\n  proto._getOption = function( option ) {\n    if ( option == 'fitWidth' ) {\n      return this.options.isFitWidth !== undefined ?\n        this.options.isFitWidth : this.options.fitWidth;\n    }\n    return _getOption.apply( this.isotope, arguments );\n  };\n\n  return MasonryMode;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRDovdml0YWxpay9rbGltb3Yvfi9pc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvbWFzb25yeS5qcz9lOWFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogTWFzb25yeSBsYXlvdXQgbW9kZVxuICogc3ViLWNsYXNzZXMgTWFzb25yeVxuICogaHR0cHM6Ly9tYXNvbnJ5LmRlc2FuZHJvLmNvbVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgICAnLi4vbGF5b3V0LW1vZGUnLFxuICAgICAgICAnbWFzb25yeS1sYXlvdXQvbWFzb25yeSdcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCcuLi9sYXlvdXQtbW9kZScpLFxuICAgICAgcmVxdWlyZSgnbWFzb25yeS1sYXlvdXQnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgd2luZG93Lklzb3RvcGUuTGF5b3V0TW9kZSxcbiAgICAgIHdpbmRvdy5NYXNvbnJ5XG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIExheW91dE1vZGUsIE1hc29ucnkgKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1hc29ucnlEZWZpbml0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLy8gY3JlYXRlIGFuIE91dGxheWVyIGxheW91dCBjbGFzc1xuICB2YXIgTWFzb25yeU1vZGUgPSBMYXlvdXRNb2RlLmNyZWF0ZSgnbWFzb25yeScpO1xuXG4gIHZhciBwcm90byA9IE1hc29ucnlNb2RlLnByb3RvdHlwZTtcblxuICB2YXIga2VlcE1vZGVNZXRob2RzID0ge1xuICAgIF9nZXRFbGVtZW50T2Zmc2V0OiB0cnVlLFxuICAgIGxheW91dDogdHJ1ZSxcbiAgICBfZ2V0TWVhc3VyZW1lbnQ6IHRydWVcbiAgfTtcblxuICAvLyBpbmhlcml0IE1hc29ucnkgcHJvdG90eXBlXG4gIGZvciAoIHZhciBtZXRob2QgaW4gTWFzb25yeS5wcm90b3R5cGUgKSB7XG4gICAgLy8gZG8gbm90IGluaGVyaXQgbW9kZSBtZXRob2RzXG4gICAgaWYgKCAha2VlcE1vZGVNZXRob2RzWyBtZXRob2QgXSApIHtcbiAgICAgIHByb3RvWyBtZXRob2QgXSA9IE1hc29ucnkucHJvdG90eXBlWyBtZXRob2QgXTtcbiAgICB9XG4gIH1cblxuICB2YXIgbWVhc3VyZUNvbHVtbnMgPSBwcm90by5tZWFzdXJlQ29sdW1ucztcbiAgcHJvdG8ubWVhc3VyZUNvbHVtbnMgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBzZXQgaXRlbXMsIHVzZWQgaWYgbWVhc3VyaW5nIGZpcnN0IGl0ZW1cbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pc290b3BlLmZpbHRlcmVkSXRlbXM7XG4gICAgbWVhc3VyZUNvbHVtbnMuY2FsbCggdGhpcyApO1xuICB9O1xuXG4gIC8vIHBvaW50IHRvIG1vZGUgb3B0aW9ucyBmb3IgZml0V2lkdGhcbiAgdmFyIF9nZXRPcHRpb24gPSBwcm90by5fZ2V0T3B0aW9uO1xuICBwcm90by5fZ2V0T3B0aW9uID0gZnVuY3Rpb24oIG9wdGlvbiApIHtcbiAgICBpZiAoIG9wdGlvbiA9PSAnZml0V2lkdGgnICkge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pc0ZpdFdpZHRoICE9PSB1bmRlZmluZWQgP1xuICAgICAgICB0aGlzLm9wdGlvbnMuaXNGaXRXaWR0aCA6IHRoaXMub3B0aW9ucy5maXRXaWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIF9nZXRPcHRpb24uYXBwbHkoIHRoaXMuaXNvdG9wZSwgYXJndW1lbnRzICk7XG4gIH07XG5cbiAgcmV0dXJuIE1hc29ucnlNb2RlO1xuXG59KSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBEOi92aXRhbGlrL2tsaW1vdi9+L2lzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy9tYXNvbnJ5LmpzXG4vLyBtb2R1bGUgaWQgPSA0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * vertical layout mode\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(3)\n      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      require('../layout-mode')\n    );\n  } else {\n    // browser global\n    factory(\n      window.Isotope.LayoutMode\n    );\n  }\n\n}( window, function factory( LayoutMode ) {\n'use strict';\n\nvar Vertical = LayoutMode.create( 'vertical', {\n  horizontalAlignment: 0\n});\n\nvar proto = Vertical.prototype;\n\nproto._resetLayout = function() {\n  this.y = 0;\n};\n\nproto._getItemLayoutPosition = function( item ) {\n  item.getSize();\n  var x = ( this.isotope.size.innerWidth - item.size.outerWidth ) *\n    this.options.horizontalAlignment;\n  var y = this.y;\n  this.y += item.size.outerHeight;\n  return { x: x, y: y };\n};\n\nproto._getContainerSize = function() {\n  return { height: this.y };\n};\n\nreturn Vertical;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRDovdml0YWxpay9rbGltb3Yvfi9pc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvdmVydGljYWwuanM/NDE1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHZlcnRpY2FsIGxheW91dCBtb2RlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAgICcuLi9sYXlvdXQtbW9kZSdcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCcuLi9sYXlvdXQtbW9kZScpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICB3aW5kb3cuSXNvdG9wZS5MYXlvdXRNb2RlXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIExheW91dE1vZGUgKSB7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBWZXJ0aWNhbCA9IExheW91dE1vZGUuY3JlYXRlKCAndmVydGljYWwnLCB7XG4gIGhvcml6b250YWxBbGlnbm1lbnQ6IDBcbn0pO1xuXG52YXIgcHJvdG8gPSBWZXJ0aWNhbC5wcm90b3R5cGU7XG5cbnByb3RvLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnkgPSAwO1xufTtcblxucHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCBpdGVtICkge1xuICBpdGVtLmdldFNpemUoKTtcbiAgdmFyIHggPSAoIHRoaXMuaXNvdG9wZS5zaXplLmlubmVyV2lkdGggLSBpdGVtLnNpemUub3V0ZXJXaWR0aCApICpcbiAgICB0aGlzLm9wdGlvbnMuaG9yaXpvbnRhbEFsaWdubWVudDtcbiAgdmFyIHkgPSB0aGlzLnk7XG4gIHRoaXMueSArPSBpdGVtLnNpemUub3V0ZXJIZWlnaHQ7XG4gIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcbn07XG5cbnByb3RvLl9nZXRDb250YWluZXJTaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7IGhlaWdodDogdGhpcy55IH07XG59O1xuXG5yZXR1cm4gVmVydGljYWw7XG5cbn0pKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIEQ6L3ZpdGFsaWsva2xpbW92L34vaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL3ZlcnRpY2FsLmpzXG4vLyBtb2R1bGUgaWQgPSA0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */,
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Masonry v4.2.2\n * Cascading grid layout library\n * https://masonry.desandro.com\n * MIT License\n * by David DeSandro\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( true ) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(4),\n        __webpack_require__(2)\n      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      require('outlayer'),\n      require('get-size')\n    );\n  } else {\n    // browser global\n    window.Masonry = factory(\n      window.Outlayer,\n      window.getSize\n    );\n  }\n\n}( window, function factory( Outlayer, getSize ) {\n\n'use strict';\n\n// -------------------------- masonryDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var Masonry = Outlayer.create('masonry');\n  // isFitWidth -> fitWidth\n  Masonry.compatOptions.fitWidth = 'isFitWidth';\n\n  var proto = Masonry.prototype;\n\n  proto._resetLayout = function() {\n    this.getSize();\n    this._getMeasurement( 'columnWidth', 'outerWidth' );\n    this._getMeasurement( 'gutter', 'outerWidth' );\n    this.measureColumns();\n\n    // reset column Y\n    this.colYs = [];\n    for ( var i=0; i < this.cols; i++ ) {\n      this.colYs.push( 0 );\n    }\n\n    this.maxY = 0;\n    this.horizontalColIndex = 0;\n  };\n\n  proto.measureColumns = function() {\n    this.getContainerWidth();\n    // if columnWidth is 0, default to outerWidth of first item\n    if ( !this.columnWidth ) {\n      var firstItem = this.items[0];\n      var firstItemElem = firstItem && firstItem.element;\n      // columnWidth fall back to item of first element\n      this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||\n        // if first elem has no width, default to size of container\n        this.containerWidth;\n    }\n\n    var columnWidth = this.columnWidth += this.gutter;\n\n    // calculate columns\n    var containerWidth = this.containerWidth + this.gutter;\n    var cols = containerWidth / columnWidth;\n    // fix rounding errors, typically with gutters\n    var excess = columnWidth - containerWidth % columnWidth;\n    // if overshoot is less than a pixel, round up, otherwise floor it\n    var mathMethod = excess && excess < 1 ? 'round' : 'floor';\n    cols = Math[ mathMethod ]( cols );\n    this.cols = Math.max( cols, 1 );\n  };\n\n  proto.getContainerWidth = function() {\n    // container is parent if fit width\n    var isFitWidth = this._getOption('fitWidth');\n    var container = isFitWidth ? this.element.parentNode : this.element;\n    // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n    var size = getSize( container );\n    this.containerWidth = size && size.innerWidth;\n  };\n\n  proto._getItemLayoutPosition = function( item ) {\n    item.getSize();\n    // how many columns does this brick span\n    var remainder = item.size.outerWidth % this.columnWidth;\n    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';\n    // round if off by 1 pixel, otherwise use ceil\n    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );\n    colSpan = Math.min( colSpan, this.cols );\n    // use horizontal or top column position\n    var colPosMethod = this.options.horizontalOrder ?\n      '_getHorizontalColPosition' : '_getTopColPosition';\n    var colPosition = this[ colPosMethod ]( colSpan, item );\n    // position the brick\n    var position = {\n      x: this.columnWidth * colPosition.col,\n      y: colPosition.y\n    };\n    // apply setHeight to necessary columns\n    var setHeight = colPosition.y + item.size.outerHeight;\n    var setMax = colSpan + colPosition.col;\n    for ( var i = colPosition.col; i < setMax; i++ ) {\n      this.colYs[i] = setHeight;\n    }\n\n    return position;\n  };\n\n  proto._getTopColPosition = function( colSpan ) {\n    var colGroup = this._getTopColGroup( colSpan );\n    // get the minimum Y value from the columns\n    var minimumY = Math.min.apply( Math, colGroup );\n\n    return {\n      col: colGroup.indexOf( minimumY ),\n      y: minimumY,\n    };\n  };\n\n  /**\n   * @param {Number} colSpan - number of columns the element spans\n   * @returns {Array} colGroup\n   */\n  proto._getTopColGroup = function( colSpan ) {\n    if ( colSpan < 2 ) {\n      // if brick spans only one column, use all the column Ys\n      return this.colYs;\n    }\n\n    var colGroup = [];\n    // how many different places could this brick fit horizontally\n    var groupCount = this.cols + 1 - colSpan;\n    // for each group potential horizontal position\n    for ( var i = 0; i < groupCount; i++ ) {\n      colGroup[i] = this._getColGroupY( i, colSpan );\n    }\n    return colGroup;\n  };\n\n  proto._getColGroupY = function( col, colSpan ) {\n    if ( colSpan < 2 ) {\n      return this.colYs[ col ];\n    }\n    // make an array of colY values for that one group\n    var groupColYs = this.colYs.slice( col, col + colSpan );\n    // and get the max value of the array\n    return Math.max.apply( Math, groupColYs );\n  };\n\n  // get column position based on horizontal index. #873\n  proto._getHorizontalColPosition = function( colSpan, item ) {\n    var col = this.horizontalColIndex % this.cols;\n    var isOver = colSpan > 1 && col + colSpan > this.cols;\n    // shift to next row if item can't fit on current row\n    col = isOver ? 0 : col;\n    // don't let zero-size items take up space\n    var hasSize = item.size.outerWidth && item.size.outerHeight;\n    this.horizontalColIndex = hasSize ? col + colSpan : this.horizontalColIndex;\n\n    return {\n      col: col,\n      y: this._getColGroupY( col, colSpan ),\n    };\n  };\n\n  proto._manageStamp = function( stamp ) {\n    var stampSize = getSize( stamp );\n    var offset = this._getElementOffset( stamp );\n    // get the columns that this stamp affects\n    var isOriginLeft = this._getOption('originLeft');\n    var firstX = isOriginLeft ? offset.left : offset.right;\n    var lastX = firstX + stampSize.outerWidth;\n    var firstCol = Math.floor( firstX / this.columnWidth );\n    firstCol = Math.max( 0, firstCol );\n    var lastCol = Math.floor( lastX / this.columnWidth );\n    // lastCol should not go over if multiple of columnWidth #425\n    lastCol -= lastX % this.columnWidth ? 0 : 1;\n    lastCol = Math.min( this.cols - 1, lastCol );\n    // set colYs to bottom of the stamp\n\n    var isOriginTop = this._getOption('originTop');\n    var stampMaxY = ( isOriginTop ? offset.top : offset.bottom ) +\n      stampSize.outerHeight;\n    for ( var i = firstCol; i <= lastCol; i++ ) {\n      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );\n    }\n  };\n\n  proto._getContainerSize = function() {\n    this.maxY = Math.max.apply( Math, this.colYs );\n    var size = {\n      height: this.maxY\n    };\n\n    if ( this._getOption('fitWidth') ) {\n      size.width = this._getContainerFitWidth();\n    }\n\n    return size;\n  };\n\n  proto._getContainerFitWidth = function() {\n    var unusedCols = 0;\n    // count unused columns\n    var i = this.cols;\n    while ( --i ) {\n      if ( this.colYs[i] !== 0 ) {\n        break;\n      }\n      unusedCols++;\n    }\n    // fit container to columns that have been used\n    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;\n  };\n\n  proto.needsResizeLayout = function() {\n    var previousWidth = this.containerWidth;\n    this.getContainerWidth();\n    return previousWidth != this.containerWidth;\n  };\n\n  return Masonry;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Outlayer Item\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /* globals define, module, require */\n  if ( true ) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(17),\n        __webpack_require__(2)\n      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS - Browserify, Webpack\n    module.exports = factory(\n      require('ev-emitter'),\n      require('get-size')\n    );\n  } else {\n    // browser global\n    window.Outlayer = {};\n    window.Outlayer.Item = factory(\n      window.EvEmitter,\n      window.getSize\n    );\n  }\n\n}( window, function factory( EvEmitter, getSize ) {\n'use strict';\n\n// ----- helpers ----- //\n\nfunction isEmptyObj( obj ) {\n  for ( var prop in obj ) {\n    return false;\n  }\n  prop = null;\n  return true;\n}\n\n// -------------------------- CSS3 support -------------------------- //\n\n\nvar docElemStyle = document.documentElement.style;\n\nvar transitionProperty = typeof docElemStyle.transition == 'string' ?\n  'transition' : 'WebkitTransition';\nvar transformProperty = typeof docElemStyle.transform == 'string' ?\n  'transform' : 'WebkitTransform';\n\nvar transitionEndEvent = {\n  WebkitTransition: 'webkitTransitionEnd',\n  transition: 'transitionend'\n}[ transitionProperty ];\n\n// cache all vendor properties that could have vendor prefix\nvar vendorProperties = {\n  transform: transformProperty,\n  transition: transitionProperty,\n  transitionDuration: transitionProperty + 'Duration',\n  transitionProperty: transitionProperty + 'Property',\n  transitionDelay: transitionProperty + 'Delay'\n};\n\n// -------------------------- Item -------------------------- //\n\nfunction Item( element, layout ) {\n  if ( !element ) {\n    return;\n  }\n\n  this.element = element;\n  // parent layout class, i.e. Masonry, Isotope, or Packery\n  this.layout = layout;\n  this.position = {\n    x: 0,\n    y: 0\n  };\n\n  this._create();\n}\n\n// inherit EvEmitter\nvar proto = Item.prototype = Object.create( EvEmitter.prototype );\nproto.constructor = Item;\n\nproto._create = function() {\n  // transition objects\n  this._transn = {\n    ingProperties: {},\n    clean: {},\n    onEnd: {}\n  };\n\n  this.css({\n    position: 'absolute'\n  });\n};\n\n// trigger specified handler for event type\nproto.handleEvent = function( event ) {\n  var method = 'on' + event.type;\n  if ( this[ method ] ) {\n    this[ method ]( event );\n  }\n};\n\nproto.getSize = function() {\n  this.size = getSize( this.element );\n};\n\n/**\n * apply CSS styles to element\n * @param {Object} style\n */\nproto.css = function( style ) {\n  var elemStyle = this.element.style;\n\n  for ( var prop in style ) {\n    // use vendor property if available\n    var supportedProp = vendorProperties[ prop ] || prop;\n    elemStyle[ supportedProp ] = style[ prop ];\n  }\n};\n\n // measure position, and sets it\nproto.getPosition = function() {\n  var style = getComputedStyle( this.element );\n  var isOriginLeft = this.layout._getOption('originLeft');\n  var isOriginTop = this.layout._getOption('originTop');\n  var xValue = style[ isOriginLeft ? 'left' : 'right' ];\n  var yValue = style[ isOriginTop ? 'top' : 'bottom' ];\n  var x = parseFloat( xValue );\n  var y = parseFloat( yValue );\n  // convert percent to pixels\n  var layoutSize = this.layout.size;\n  if ( xValue.indexOf('%') != -1 ) {\n    x = ( x / 100 ) * layoutSize.width;\n  }\n  if ( yValue.indexOf('%') != -1 ) {\n    y = ( y / 100 ) * layoutSize.height;\n  }\n  // clean up 'auto' or other non-integer values\n  x = isNaN( x ) ? 0 : x;\n  y = isNaN( y ) ? 0 : y;\n  // remove padding from measurement\n  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;\n  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;\n\n  this.position.x = x;\n  this.position.y = y;\n};\n\n// set settled position, apply padding\nproto.layoutPosition = function() {\n  var layoutSize = this.layout.size;\n  var style = {};\n  var isOriginLeft = this.layout._getOption('originLeft');\n  var isOriginTop = this.layout._getOption('originTop');\n\n  // x\n  var xPadding = isOriginLeft ? 'paddingLeft' : 'paddingRight';\n  var xProperty = isOriginLeft ? 'left' : 'right';\n  var xResetProperty = isOriginLeft ? 'right' : 'left';\n\n  var x = this.position.x + layoutSize[ xPadding ];\n  // set in percentage or pixels\n  style[ xProperty ] = this.getXValue( x );\n  // reset other property\n  style[ xResetProperty ] = '';\n\n  // y\n  var yPadding = isOriginTop ? 'paddingTop' : 'paddingBottom';\n  var yProperty = isOriginTop ? 'top' : 'bottom';\n  var yResetProperty = isOriginTop ? 'bottom' : 'top';\n\n  var y = this.position.y + layoutSize[ yPadding ];\n  // set in percentage or pixels\n  style[ yProperty ] = this.getYValue( y );\n  // reset other property\n  style[ yResetProperty ] = '';\n\n  this.css( style );\n  this.emitEvent( 'layout', [ this ] );\n};\n\nproto.getXValue = function( x ) {\n  var isHorizontal = this.layout._getOption('horizontal');\n  return this.layout.options.percentPosition && !isHorizontal ?\n    ( ( x / this.layout.size.width ) * 100 ) + '%' : x + 'px';\n};\n\nproto.getYValue = function( y ) {\n  var isHorizontal = this.layout._getOption('horizontal');\n  return this.layout.options.percentPosition && isHorizontal ?\n    ( ( y / this.layout.size.height ) * 100 ) + '%' : y + 'px';\n};\n\nproto._transitionTo = function( x, y ) {\n  this.getPosition();\n  // get current x & y from top/left\n  var curX = this.position.x;\n  var curY = this.position.y;\n\n  var didNotMove = x == this.position.x && y == this.position.y;\n\n  // save end position\n  this.setPosition( x, y );\n\n  // if did not move and not transitioning, just go to layout\n  if ( didNotMove && !this.isTransitioning ) {\n    this.layoutPosition();\n    return;\n  }\n\n  var transX = x - curX;\n  var transY = y - curY;\n  var transitionStyle = {};\n  transitionStyle.transform = this.getTranslate( transX, transY );\n\n  this.transition({\n    to: transitionStyle,\n    onTransitionEnd: {\n      transform: this.layoutPosition\n    },\n    isCleaning: true\n  });\n};\n\nproto.getTranslate = function( x, y ) {\n  // flip cooridinates if origin on right or bottom\n  var isOriginLeft = this.layout._getOption('originLeft');\n  var isOriginTop = this.layout._getOption('originTop');\n  x = isOriginLeft ? x : -x;\n  y = isOriginTop ? y : -y;\n  return 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n};\n\n// non transition + transform support\nproto.goTo = function( x, y ) {\n  this.setPosition( x, y );\n  this.layoutPosition();\n};\n\nproto.moveTo = proto._transitionTo;\n\nproto.setPosition = function( x, y ) {\n  this.position.x = parseFloat( x );\n  this.position.y = parseFloat( y );\n};\n\n// ----- transition ----- //\n\n/**\n * @param {Object} style - CSS\n * @param {Function} onTransitionEnd\n */\n\n// non transition, just trigger callback\nproto._nonTransition = function( args ) {\n  this.css( args.to );\n  if ( args.isCleaning ) {\n    this._removeStyles( args.to );\n  }\n  for ( var prop in args.onTransitionEnd ) {\n    args.onTransitionEnd[ prop ].call( this );\n  }\n};\n\n/**\n * proper transition\n * @param {Object} args - arguments\n *   @param {Object} to - style to transition to\n *   @param {Object} from - style to start transition from\n *   @param {Boolean} isCleaning - removes transition styles after transition\n *   @param {Function} onTransitionEnd - callback\n */\nproto.transition = function( args ) {\n  // redirect to nonTransition if no transition duration\n  if ( !parseFloat( this.layout.options.transitionDuration ) ) {\n    this._nonTransition( args );\n    return;\n  }\n\n  var _transition = this._transn;\n  // keep track of onTransitionEnd callback by css property\n  for ( var prop in args.onTransitionEnd ) {\n    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];\n  }\n  // keep track of properties that are transitioning\n  for ( prop in args.to ) {\n    _transition.ingProperties[ prop ] = true;\n    // keep track of properties to clean up when transition is done\n    if ( args.isCleaning ) {\n      _transition.clean[ prop ] = true;\n    }\n  }\n\n  // set from styles\n  if ( args.from ) {\n    this.css( args.from );\n    // force redraw. http://blog.alexmaccaw.com/css-transitions\n    var h = this.element.offsetHeight;\n    // hack for JSHint to hush about unused var\n    h = null;\n  }\n  // enable transition\n  this.enableTransition( args.to );\n  // set styles that are transitioning\n  this.css( args.to );\n\n  this.isTransitioning = true;\n\n};\n\n// dash before all cap letters, including first for\n// WebkitTransform => -webkit-transform\nfunction toDashedAll( str ) {\n  return str.replace( /([A-Z])/g, function( $1 ) {\n    return '-' + $1.toLowerCase();\n  });\n}\n\nvar transitionProps = 'opacity,' + toDashedAll( transformProperty );\n\nproto.enableTransition = function(/* style */) {\n  // HACK changing transitionProperty during a transition\n  // will cause transition to jump\n  if ( this.isTransitioning ) {\n    return;\n  }\n\n  // make `transition: foo, bar, baz` from style object\n  // HACK un-comment this when enableTransition can work\n  // while a transition is happening\n  // var transitionValues = [];\n  // for ( var prop in style ) {\n  //   // dash-ify camelCased properties like WebkitTransition\n  //   prop = vendorProperties[ prop ] || prop;\n  //   transitionValues.push( toDashedAll( prop ) );\n  // }\n  // munge number to millisecond, to match stagger\n  var duration = this.layout.options.transitionDuration;\n  duration = typeof duration == 'number' ? duration + 'ms' : duration;\n  // enable transition styles\n  this.css({\n    transitionProperty: transitionProps,\n    transitionDuration: duration,\n    transitionDelay: this.staggerDelay || 0\n  });\n  // listen for transition end event\n  this.element.addEventListener( transitionEndEvent, this, false );\n};\n\n// ----- events ----- //\n\nproto.onwebkitTransitionEnd = function( event ) {\n  this.ontransitionend( event );\n};\n\nproto.onotransitionend = function( event ) {\n  this.ontransitionend( event );\n};\n\n// properties that I munge to make my life easier\nvar dashedVendorProperties = {\n  '-webkit-transform': 'transform'\n};\n\nproto.ontransitionend = function( event ) {\n  // disregard bubbled events from children\n  if ( event.target !== this.element ) {\n    return;\n  }\n  var _transition = this._transn;\n  // get property name of transitioned property, convert to prefix-free\n  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;\n\n  // remove property that has completed transitioning\n  delete _transition.ingProperties[ propertyName ];\n  // check if any properties are still transitioning\n  if ( isEmptyObj( _transition.ingProperties ) ) {\n    // all properties have completed transitioning\n    this.disableTransition();\n  }\n  // clean style\n  if ( propertyName in _transition.clean ) {\n    // clean up style\n    this.element.style[ event.propertyName ] = '';\n    delete _transition.clean[ propertyName ];\n  }\n  // trigger onTransitionEnd callback\n  if ( propertyName in _transition.onEnd ) {\n    var onTransitionEnd = _transition.onEnd[ propertyName ];\n    onTransitionEnd.call( this );\n    delete _transition.onEnd[ propertyName ];\n  }\n\n  this.emitEvent( 'transitionEnd', [ this ] );\n};\n\nproto.disableTransition = function() {\n  this.removeTransitionStyles();\n  this.element.removeEventListener( transitionEndEvent, this, false );\n  this.isTransitioning = false;\n};\n\n/**\n * removes style property from element\n * @param {Object} style\n**/\nproto._removeStyles = function( style ) {\n  // clean up transition styles\n  var cleanStyle = {};\n  for ( var prop in style ) {\n    cleanStyle[ prop ] = '';\n  }\n  this.css( cleanStyle );\n};\n\nvar cleanTransitionStyle = {\n  transitionProperty: '',\n  transitionDuration: '',\n  transitionDelay: ''\n};\n\nproto.removeTransitionStyles = function() {\n  // remove transition\n  this.css( cleanTransitionStyle );\n};\n\n// ----- stagger ----- //\n\nproto.stagger = function( delay ) {\n  delay = isNaN( delay ) ? 0 : delay;\n  this.staggerDelay = delay + 'ms';\n};\n\n// ----- show/hide/remove ----- //\n\n// remove element from DOM\nproto.removeElem = function() {\n  this.element.parentNode.removeChild( this.element );\n  // remove display: none\n  this.css({ display: '' });\n  this.emitEvent( 'remove', [ this ] );\n};\n\nproto.remove = function() {\n  // just remove element if no transition support or no transition\n  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {\n    this.removeElem();\n    return;\n  }\n\n  // start transition\n  this.once( 'transitionEnd', function() {\n    this.removeElem();\n  });\n  this.hide();\n};\n\nproto.reveal = function() {\n  delete this.isHidden;\n  // remove display: none\n  this.css({ display: '' });\n\n  var options = this.layout.options;\n\n  var onTransitionEnd = {};\n  var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');\n  onTransitionEnd[ transitionEndProperty ] = this.onRevealTransitionEnd;\n\n  this.transition({\n    from: options.hiddenStyle,\n    to: options.visibleStyle,\n    isCleaning: true,\n    onTransitionEnd: onTransitionEnd\n  });\n};\n\nproto.onRevealTransitionEnd = function() {\n  // check if still visible\n  // during transition, item may have been hidden\n  if ( !this.isHidden ) {\n    this.emitEvent('reveal');\n  }\n};\n\n/**\n * get style property use for hide/reveal transition end\n * @param {String} styleProperty - hiddenStyle/visibleStyle\n * @returns {String}\n */\nproto.getHideRevealTransitionEndProperty = function( styleProperty ) {\n  var optionStyle = this.layout.options[ styleProperty ];\n  // use opacity\n  if ( optionStyle.opacity ) {\n    return 'opacity';\n  }\n  // get first property\n  for ( var prop in optionStyle ) {\n    return prop;\n  }\n};\n\nproto.hide = function() {\n  // set flag\n  this.isHidden = true;\n  // remove display: none\n  this.css({ display: '' });\n\n  var options = this.layout.options;\n\n  var onTransitionEnd = {};\n  var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');\n  onTransitionEnd[ transitionEndProperty ] = this.onHideTransitionEnd;\n\n  this.transition({\n    from: options.visibleStyle,\n    to: options.hiddenStyle,\n    // keep hidden stuff hidden\n    isCleaning: true,\n    onTransitionEnd: onTransitionEnd\n  });\n};\n\nproto.onHideTransitionEnd = function() {\n  // check if still hidden\n  // during transition, item may have been un-hidden\n  if ( this.isHidden ) {\n    this.css({ display: 'none' });\n    this.emitEvent('hide');\n  }\n};\n\nproto.destroy = function() {\n  this.css({\n    position: '',\n    left: '',\n    right: '',\n    top: '',\n    bottom: '',\n    transition: '',\n    transform: ''\n  });\n};\n\nreturn Item;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery, jQuery) {/**\n * Owl Carousel v2.3.4\n * Copyright 2013-2018 David Deutsch\n * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE\n */\n/**\n * Owl carousel\n * @version 2.3.4\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n * @todo Lazy Load Icon\n * @todo prevent animationend bubling\n * @todo itemsScaleUp\n * @todo Test Zepto\n * @todo stagePadding calculate wrong active classes\n */\n;(function($, window, document, undefined) {\n\n\t/**\n\t * Creates a carousel.\n\t * @class The Owl Carousel.\n\t * @public\n\t * @param {HTMLElement|jQuery} element - The element to create the carousel for.\n\t * @param {Object} [options] - The options\n\t */\n\tfunction Owl(element, options) {\n\n\t\t/**\n\t\t * Current settings for the carousel.\n\t\t * @public\n\t\t */\n\t\tthis.settings = null;\n\n\t\t/**\n\t\t * Current options set by the caller including defaults.\n\t\t * @public\n\t\t */\n\t\tthis.options = $.extend({}, Owl.Defaults, options);\n\n\t\t/**\n\t\t * Plugin element.\n\t\t * @public\n\t\t */\n\t\tthis.$element = $(element);\n\n\t\t/**\n\t\t * Proxied event handlers.\n\t\t * @protected\n\t\t */\n\t\tthis._handlers = {};\n\n\t\t/**\n\t\t * References to the running plugins of this carousel.\n\t\t * @protected\n\t\t */\n\t\tthis._plugins = {};\n\n\t\t/**\n\t\t * Currently suppressed events to prevent them from being retriggered.\n\t\t * @protected\n\t\t */\n\t\tthis._supress = {};\n\n\t\t/**\n\t\t * Absolute current position.\n\t\t * @protected\n\t\t */\n\t\tthis._current = null;\n\n\t\t/**\n\t\t * Animation speed in milliseconds.\n\t\t * @protected\n\t\t */\n\t\tthis._speed = null;\n\n\t\t/**\n\t\t * Coordinates of all items in pixel.\n\t\t * @todo The name of this member is missleading.\n\t\t * @protected\n\t\t */\n\t\tthis._coordinates = [];\n\n\t\t/**\n\t\t * Current breakpoint.\n\t\t * @todo Real media queries would be nice.\n\t\t * @protected\n\t\t */\n\t\tthis._breakpoint = null;\n\n\t\t/**\n\t\t * Current width of the plugin element.\n\t\t */\n\t\tthis._width = null;\n\n\t\t/**\n\t\t * All real items.\n\t\t * @protected\n\t\t */\n\t\tthis._items = [];\n\n\t\t/**\n\t\t * All cloned items.\n\t\t * @protected\n\t\t */\n\t\tthis._clones = [];\n\n\t\t/**\n\t\t * Merge values of all items.\n\t\t * @todo Maybe this could be part of a plugin.\n\t\t * @protected\n\t\t */\n\t\tthis._mergers = [];\n\n\t\t/**\n\t\t * Widths of all items.\n\t\t */\n\t\tthis._widths = [];\n\n\t\t/**\n\t\t * Invalidated parts within the update process.\n\t\t * @protected\n\t\t */\n\t\tthis._invalidated = {};\n\n\t\t/**\n\t\t * Ordered list of workers for the update process.\n\t\t * @protected\n\t\t */\n\t\tthis._pipe = [];\n\n\t\t/**\n\t\t * Current state information for the drag operation.\n\t\t * @todo #261\n\t\t * @protected\n\t\t */\n\t\tthis._drag = {\n\t\t\ttime: null,\n\t\t\ttarget: null,\n\t\t\tpointer: null,\n\t\t\tstage: {\n\t\t\t\tstart: null,\n\t\t\t\tcurrent: null\n\t\t\t},\n\t\t\tdirection: null\n\t\t};\n\n\t\t/**\n\t\t * Current state information and their tags.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis._states = {\n\t\t\tcurrent: {},\n\t\t\ttags: {\n\t\t\t\t'initializing': [ 'busy' ],\n\t\t\t\t'animating': [ 'busy' ],\n\t\t\t\t'dragging': [ 'interacting' ]\n\t\t\t}\n\t\t};\n\n\t\t$.each([ 'onResize', 'onThrottledResize' ], $.proxy(function(i, handler) {\n\t\t\tthis._handlers[handler] = $.proxy(this[handler], this);\n\t\t}, this));\n\n\t\t$.each(Owl.Plugins, $.proxy(function(key, plugin) {\n\t\t\tthis._plugins[key.charAt(0).toLowerCase() + key.slice(1)]\n\t\t\t\t= new plugin(this);\n\t\t}, this));\n\n\t\t$.each(Owl.Workers, $.proxy(function(priority, worker) {\n\t\t\tthis._pipe.push({\n\t\t\t\t'filter': worker.filter,\n\t\t\t\t'run': $.proxy(worker.run, this)\n\t\t\t});\n\t\t}, this));\n\n\t\tthis.setup();\n\t\tthis.initialize();\n\t}\n\n\t/**\n\t * Default options for the carousel.\n\t * @public\n\t */\n\tOwl.Defaults = {\n\t\titems: 3,\n\t\tloop: false,\n\t\tcenter: false,\n\t\trewind: false,\n\t\tcheckVisibility: true,\n\n\t\tmouseDrag: true,\n\t\ttouchDrag: true,\n\t\tpullDrag: true,\n\t\tfreeDrag: false,\n\n\t\tmargin: 0,\n\t\tstagePadding: 0,\n\n\t\tmerge: false,\n\t\tmergeFit: true,\n\t\tautoWidth: false,\n\n\t\tstartPosition: 0,\n\t\trtl: false,\n\n\t\tsmartSpeed: 250,\n\t\tfluidSpeed: false,\n\t\tdragEndSpeed: false,\n\n\t\tresponsive: {},\n\t\tresponsiveRefreshRate: 200,\n\t\tresponsiveBaseElement: window,\n\n\t\tfallbackEasing: 'swing',\n\t\tslideTransition: '',\n\n\t\tinfo: false,\n\n\t\tnestedItemSelector: false,\n\t\titemElement: 'div',\n\t\tstageElement: 'div',\n\n\t\trefreshClass: 'owl-refresh',\n\t\tloadedClass: 'owl-loaded',\n\t\tloadingClass: 'owl-loading',\n\t\trtlClass: 'owl-rtl',\n\t\tresponsiveClass: 'owl-responsive',\n\t\tdragClass: 'owl-drag',\n\t\titemClass: 'owl-item',\n\t\tstageClass: 'owl-stage',\n\t\tstageOuterClass: 'owl-stage-outer',\n\t\tgrabClass: 'owl-grab'\n\t};\n\n\t/**\n\t * Enumeration for width.\n\t * @public\n\t * @readonly\n\t * @enum {String}\n\t */\n\tOwl.Width = {\n\t\tDefault: 'default',\n\t\tInner: 'inner',\n\t\tOuter: 'outer'\n\t};\n\n\t/**\n\t * Enumeration for types.\n\t * @public\n\t * @readonly\n\t * @enum {String}\n\t */\n\tOwl.Type = {\n\t\tEvent: 'event',\n\t\tState: 'state'\n\t};\n\n\t/**\n\t * Contains all registered plugins.\n\t * @public\n\t */\n\tOwl.Plugins = {};\n\n\t/**\n\t * List of workers involved in the update process.\n\t */\n\tOwl.Workers = [ {\n\t\tfilter: [ 'width', 'settings' ],\n\t\trun: function() {\n\t\t\tthis._width = this.$element.width();\n\t\t}\n\t}, {\n\t\tfilter: [ 'width', 'items', 'settings' ],\n\t\trun: function(cache) {\n\t\t\tcache.current = this._items && this._items[this.relative(this._current)];\n\t\t}\n\t}, {\n\t\tfilter: [ 'items', 'settings' ],\n\t\trun: function() {\n\t\t\tthis.$stage.children('.cloned').remove();\n\t\t}\n\t}, {\n\t\tfilter: [ 'width', 'items', 'settings' ],\n\t\trun: function(cache) {\n\t\t\tvar margin = this.settings.margin || '',\n\t\t\t\tgrid = !this.settings.autoWidth,\n\t\t\t\trtl = this.settings.rtl,\n\t\t\t\tcss = {\n\t\t\t\t\t'width': 'auto',\n\t\t\t\t\t'margin-left': rtl ? margin : '',\n\t\t\t\t\t'margin-right': rtl ? '' : margin\n\t\t\t\t};\n\n\t\t\t!grid && this.$stage.children().css(css);\n\n\t\t\tcache.css = css;\n\t\t}\n\t}, {\n\t\tfilter: [ 'width', 'items', 'settings' ],\n\t\trun: function(cache) {\n\t\t\tvar width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,\n\t\t\t\tmerge = null,\n\t\t\t\titerator = this._items.length,\n\t\t\t\tgrid = !this.settings.autoWidth,\n\t\t\t\twidths = [];\n\n\t\t\tcache.items = {\n\t\t\t\tmerge: false,\n\t\t\t\twidth: width\n\t\t\t};\n\n\t\t\twhile (iterator--) {\n\t\t\t\tmerge = this._mergers[iterator];\n\t\t\t\tmerge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge;\n\n\t\t\t\tcache.items.merge = merge > 1 || cache.items.merge;\n\n\t\t\t\twidths[iterator] = !grid ? this._items[iterator].width() : width * merge;\n\t\t\t}\n\n\t\t\tthis._widths = widths;\n\t\t}\n\t}, {\n\t\tfilter: [ 'items', 'settings' ],\n\t\trun: function() {\n\t\t\tvar clones = [],\n\t\t\t\titems = this._items,\n\t\t\t\tsettings = this.settings,\n\t\t\t\t// TODO: Should be computed from number of min width items in stage\n\t\t\t\tview = Math.max(settings.items * 2, 4),\n\t\t\t\tsize = Math.ceil(items.length / 2) * 2,\n\t\t\t\trepeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0,\n\t\t\t\tappend = '',\n\t\t\t\tprepend = '';\n\n\t\t\trepeat /= 2;\n\n\t\t\twhile (repeat > 0) {\n\t\t\t\t// Switch to only using appended clones\n\t\t\t\tclones.push(this.normalize(clones.length / 2, true));\n\t\t\t\tappend = append + items[clones[clones.length - 1]][0].outerHTML;\n\t\t\t\tclones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true));\n\t\t\t\tprepend = items[clones[clones.length - 1]][0].outerHTML + prepend;\n\t\t\t\trepeat -= 1;\n\t\t\t}\n\n\t\t\tthis._clones = clones;\n\n\t\t\t$(append).addClass('cloned').appendTo(this.$stage);\n\t\t\t$(prepend).addClass('cloned').prependTo(this.$stage);\n\t\t}\n\t}, {\n\t\tfilter: [ 'width', 'items', 'settings' ],\n\t\trun: function() {\n\t\t\tvar rtl = this.settings.rtl ? 1 : -1,\n\t\t\t\tsize = this._clones.length + this._items.length,\n\t\t\t\titerator = -1,\n\t\t\t\tprevious = 0,\n\t\t\t\tcurrent = 0,\n\t\t\t\tcoordinates = [];\n\n\t\t\twhile (++iterator < size) {\n\t\t\t\tprevious = coordinates[iterator - 1] || 0;\n\t\t\t\tcurrent = this._widths[this.relative(iterator)] + this.settings.margin;\n\t\t\t\tcoordinates.push(previous + current * rtl);\n\t\t\t}\n\n\t\t\tthis._coordinates = coordinates;\n\t\t}\n\t}, {\n\t\tfilter: [ 'width', 'items', 'settings' ],\n\t\trun: function() {\n\t\t\tvar padding = this.settings.stagePadding,\n\t\t\t\tcoordinates = this._coordinates,\n\t\t\t\tcss = {\n\t\t\t\t\t'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,\n\t\t\t\t\t'padding-left': padding || '',\n\t\t\t\t\t'padding-right': padding || ''\n\t\t\t\t};\n\n\t\t\tthis.$stage.css(css);\n\t\t}\n\t}, {\n\t\tfilter: [ 'width', 'items', 'settings' ],\n\t\trun: function(cache) {\n\t\t\tvar iterator = this._coordinates.length,\n\t\t\t\tgrid = !this.settings.autoWidth,\n\t\t\t\titems = this.$stage.children();\n\n\t\t\tif (grid && cache.items.merge) {\n\t\t\t\twhile (iterator--) {\n\t\t\t\t\tcache.css.width = this._widths[this.relative(iterator)];\n\t\t\t\t\titems.eq(iterator).css(cache.css);\n\t\t\t\t}\n\t\t\t} else if (grid) {\n\t\t\t\tcache.css.width = cache.items.width;\n\t\t\t\titems.css(cache.css);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tfilter: [ 'items' ],\n\t\trun: function() {\n\t\t\tthis._coordinates.length < 1 && this.$stage.removeAttr('style');\n\t\t}\n\t}, {\n\t\tfilter: [ 'width', 'items', 'settings' ],\n\t\trun: function(cache) {\n\t\t\tcache.current = cache.current ? this.$stage.children().index(cache.current) : 0;\n\t\t\tcache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current));\n\t\t\tthis.reset(cache.current);\n\t\t}\n\t}, {\n\t\tfilter: [ 'position' ],\n\t\trun: function() {\n\t\t\tthis.animate(this.coordinates(this._current));\n\t\t}\n\t}, {\n\t\tfilter: [ 'width', 'position', 'items', 'settings' ],\n\t\trun: function() {\n\t\t\tvar rtl = this.settings.rtl ? 1 : -1,\n\t\t\t\tpadding = this.settings.stagePadding * 2,\n\t\t\t\tbegin = this.coordinates(this.current()) + padding,\n\t\t\t\tend = begin + this.width() * rtl,\n\t\t\t\tinner, outer, matches = [], i, n;\n\n\t\t\tfor (i = 0, n = this._coordinates.length; i < n; i++) {\n\t\t\t\tinner = this._coordinates[i - 1] || 0;\n\t\t\t\touter = Math.abs(this._coordinates[i]) + padding * rtl;\n\n\t\t\t\tif ((this.op(inner, '<=', begin) && (this.op(inner, '>', end)))\n\t\t\t\t\t|| (this.op(outer, '<', begin) && this.op(outer, '>', end))) {\n\t\t\t\t\tmatches.push(i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.$stage.children('.active').removeClass('active');\n\t\t\tthis.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass('active');\n\n\t\t\tthis.$stage.children('.center').removeClass('center');\n\t\t\tif (this.settings.center) {\n\t\t\t\tthis.$stage.children().eq(this.current()).addClass('center');\n\t\t\t}\n\t\t}\n\t} ];\n\n\t/**\n\t * Create the stage DOM element\n\t */\n\tOwl.prototype.initializeStage = function() {\n\t\tthis.$stage = this.$element.find('.' + this.settings.stageClass);\n\n\t\t// if the stage is already in the DOM, grab it and skip stage initialization\n\t\tif (this.$stage.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.$element.addClass(this.options.loadingClass);\n\n\t\t// create stage\n\t\tthis.$stage = $('<' + this.settings.stageElement + '>', {\n\t\t\t\"class\": this.settings.stageClass\n\t\t}).wrap( $( '<div/>', {\n\t\t\t\"class\": this.settings.stageOuterClass\n\t\t}));\n\n\t\t// append stage\n\t\tthis.$element.append(this.$stage.parent());\n\t};\n\n\t/**\n\t * Create item DOM elements\n\t */\n\tOwl.prototype.initializeItems = function() {\n\t\tvar $items = this.$element.find('.owl-item');\n\n\t\t// if the items are already in the DOM, grab them and skip item initialization\n\t\tif ($items.length) {\n\t\t\tthis._items = $items.get().map(function(item) {\n\t\t\t\treturn $(item);\n\t\t\t});\n\n\t\t\tthis._mergers = this._items.map(function() {\n\t\t\t\treturn 1;\n\t\t\t});\n\n\t\t\tthis.refresh();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// append content\n\t\tthis.replace(this.$element.children().not(this.$stage.parent()));\n\n\t\t// check visibility\n\t\tif (this.isVisible()) {\n\t\t\t// update view\n\t\t\tthis.refresh();\n\t\t} else {\n\t\t\t// invalidate width\n\t\t\tthis.invalidate('width');\n\t\t}\n\n\t\tthis.$element\n\t\t\t.removeClass(this.options.loadingClass)\n\t\t\t.addClass(this.options.loadedClass);\n\t};\n\n\t/**\n\t * Initializes the carousel.\n\t * @protected\n\t */\n\tOwl.prototype.initialize = function() {\n\t\tthis.enter('initializing');\n\t\tthis.trigger('initialize');\n\n\t\tthis.$element.toggleClass(this.settings.rtlClass, this.settings.rtl);\n\n\t\tif (this.settings.autoWidth && !this.is('pre-loading')) {\n\t\t\tvar imgs, nestedSelector, width;\n\t\t\timgs = this.$element.find('img');\n\t\t\tnestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined;\n\t\t\twidth = this.$element.children(nestedSelector).width();\n\n\t\t\tif (imgs.length && width <= 0) {\n\t\t\t\tthis.preloadAutoWidthImages(imgs);\n\t\t\t}\n\t\t}\n\n\t\tthis.initializeStage();\n\t\tthis.initializeItems();\n\n\t\t// register event handlers\n\t\tthis.registerEventHandlers();\n\n\t\tthis.leave('initializing');\n\t\tthis.trigger('initialized');\n\t};\n\n\t/**\n\t * @returns {Boolean} visibility of $element\n\t *                    if you know the carousel will always be visible you can set `checkVisibility` to `false` to\n\t *                    prevent the expensive browser layout forced reflow the $element.is(':visible') does\n\t */\n\tOwl.prototype.isVisible = function() {\n\t\treturn this.settings.checkVisibility\n\t\t\t? this.$element.is(':visible')\n\t\t\t: true;\n\t};\n\n\t/**\n\t * Setups the current settings.\n\t * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?\n\t * @todo Support for media queries by using `matchMedia` would be nice.\n\t * @public\n\t */\n\tOwl.prototype.setup = function() {\n\t\tvar viewport = this.viewport(),\n\t\t\toverwrites = this.options.responsive,\n\t\t\tmatch = -1,\n\t\t\tsettings = null;\n\n\t\tif (!overwrites) {\n\t\t\tsettings = $.extend({}, this.options);\n\t\t} else {\n\t\t\t$.each(overwrites, function(breakpoint) {\n\t\t\t\tif (breakpoint <= viewport && breakpoint > match) {\n\t\t\t\t\tmatch = Number(breakpoint);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tsettings = $.extend({}, this.options, overwrites[match]);\n\t\t\tif (typeof settings.stagePadding === 'function') {\n\t\t\t\tsettings.stagePadding = settings.stagePadding();\n\t\t\t}\n\t\t\tdelete settings.responsive;\n\n\t\t\t// responsive class\n\t\t\tif (settings.responsiveClass) {\n\t\t\t\tthis.$element.attr('class',\n\t\t\t\t\tthis.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\\\S+\\\\s', 'g'), '$1' + match)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.trigger('change', { property: { name: 'settings', value: settings } });\n\t\tthis._breakpoint = match;\n\t\tthis.settings = settings;\n\t\tthis.invalidate('settings');\n\t\tthis.trigger('changed', { property: { name: 'settings', value: this.settings } });\n\t};\n\n\t/**\n\t * Updates option logic if necessery.\n\t * @protected\n\t */\n\tOwl.prototype.optionsLogic = function() {\n\t\tif (this.settings.autoWidth) {\n\t\t\tthis.settings.stagePadding = false;\n\t\t\tthis.settings.merge = false;\n\t\t}\n\t};\n\n\t/**\n\t * Prepares an item before add.\n\t * @todo Rename event parameter `content` to `item`.\n\t * @protected\n\t * @returns {jQuery|HTMLElement} - The item container.\n\t */\n\tOwl.prototype.prepare = function(item) {\n\t\tvar event = this.trigger('prepare', { content: item });\n\n\t\tif (!event.data) {\n\t\t\tevent.data = $('<' + this.settings.itemElement + '/>')\n\t\t\t\t.addClass(this.options.itemClass).append(item)\n\t\t}\n\n\t\tthis.trigger('prepared', { content: event.data });\n\n\t\treturn event.data;\n\t};\n\n\t/**\n\t * Updates the view.\n\t * @public\n\t */\n\tOwl.prototype.update = function() {\n\t\tvar i = 0,\n\t\t\tn = this._pipe.length,\n\t\t\tfilter = $.proxy(function(p) { return this[p] }, this._invalidated),\n\t\t\tcache = {};\n\n\t\twhile (i < n) {\n\t\t\tif (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {\n\t\t\t\tthis._pipe[i].run(cache);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\n\t\tthis._invalidated = {};\n\n\t\t!this.is('valid') && this.enter('valid');\n\t};\n\n\t/**\n\t * Gets the width of the view.\n\t * @public\n\t * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.\n\t * @returns {Number} - The width of the view in pixel.\n\t */\n\tOwl.prototype.width = function(dimension) {\n\t\tdimension = dimension || Owl.Width.Default;\n\t\tswitch (dimension) {\n\t\t\tcase Owl.Width.Inner:\n\t\t\tcase Owl.Width.Outer:\n\t\t\t\treturn this._width;\n\t\t\tdefault:\n\t\t\t\treturn this._width - this.settings.stagePadding * 2 + this.settings.margin;\n\t\t}\n\t};\n\n\t/**\n\t * Refreshes the carousel primarily for adaptive purposes.\n\t * @public\n\t */\n\tOwl.prototype.refresh = function() {\n\t\tthis.enter('refreshing');\n\t\tthis.trigger('refresh');\n\n\t\tthis.setup();\n\n\t\tthis.optionsLogic();\n\n\t\tthis.$element.addClass(this.options.refreshClass);\n\n\t\tthis.update();\n\n\t\tthis.$element.removeClass(this.options.refreshClass);\n\n\t\tthis.leave('refreshing');\n\t\tthis.trigger('refreshed');\n\t};\n\n\t/**\n\t * Checks window `resize` event.\n\t * @protected\n\t */\n\tOwl.prototype.onThrottledResize = function() {\n\t\twindow.clearTimeout(this.resizeTimer);\n\t\tthis.resizeTimer = window.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);\n\t};\n\n\t/**\n\t * Checks window `resize` event.\n\t * @protected\n\t */\n\tOwl.prototype.onResize = function() {\n\t\tif (!this._items.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._width === this.$element.width()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.isVisible()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.enter('resizing');\n\n\t\tif (this.trigger('resize').isDefaultPrevented()) {\n\t\t\tthis.leave('resizing');\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.invalidate('width');\n\n\t\tthis.refresh();\n\n\t\tthis.leave('resizing');\n\t\tthis.trigger('resized');\n\t};\n\n\t/**\n\t * Registers event handlers.\n\t * @todo Check `msPointerEnabled`\n\t * @todo #261\n\t * @protected\n\t */\n\tOwl.prototype.registerEventHandlers = function() {\n\t\tif ($.support.transition) {\n\t\t\tthis.$stage.on($.support.transition.end + '.owl.core', $.proxy(this.onTransitionEnd, this));\n\t\t}\n\n\t\tif (this.settings.responsive !== false) {\n\t\t\tthis.on(window, 'resize', this._handlers.onThrottledResize);\n\t\t}\n\n\t\tif (this.settings.mouseDrag) {\n\t\t\tthis.$element.addClass(this.options.dragClass);\n\t\t\tthis.$stage.on('mousedown.owl.core', $.proxy(this.onDragStart, this));\n\t\t\tthis.$stage.on('dragstart.owl.core selectstart.owl.core', function() { return false });\n\t\t}\n\n\t\tif (this.settings.touchDrag){\n\t\t\tthis.$stage.on('touchstart.owl.core', $.proxy(this.onDragStart, this));\n\t\t\tthis.$stage.on('touchcancel.owl.core', $.proxy(this.onDragEnd, this));\n\t\t}\n\t};\n\n\t/**\n\t * Handles `touchstart` and `mousedown` events.\n\t * @todo Horizontal swipe threshold as option\n\t * @todo #261\n\t * @protected\n\t * @param {Event} event - The event arguments.\n\t */\n\tOwl.prototype.onDragStart = function(event) {\n\t\tvar stage = null;\n\n\t\tif (event.which === 3) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ($.support.transform) {\n\t\t\tstage = this.$stage.css('transform').replace(/.*\\(|\\)| /g, '').split(',');\n\t\t\tstage = {\n\t\t\t\tx: stage[stage.length === 16 ? 12 : 4],\n\t\t\t\ty: stage[stage.length === 16 ? 13 : 5]\n\t\t\t};\n\t\t} else {\n\t\t\tstage = this.$stage.position();\n\t\t\tstage = {\n\t\t\t\tx: this.settings.rtl ?\n\t\t\t\t\tstage.left + this.$stage.width() - this.width() + this.settings.margin :\n\t\t\t\t\tstage.left,\n\t\t\t\ty: stage.top\n\t\t\t};\n\t\t}\n\n\t\tif (this.is('animating')) {\n\t\t\t$.support.transform ? this.animate(stage.x) : this.$stage.stop()\n\t\t\tthis.invalidate('position');\n\t\t}\n\n\t\tthis.$element.toggleClass(this.options.grabClass, event.type === 'mousedown');\n\n\t\tthis.speed(0);\n\n\t\tthis._drag.time = new Date().getTime();\n\t\tthis._drag.target = $(event.target);\n\t\tthis._drag.stage.start = stage;\n\t\tthis._drag.stage.current = stage;\n\t\tthis._drag.pointer = this.pointer(event);\n\n\t\t$(document).on('mouseup.owl.core touchend.owl.core', $.proxy(this.onDragEnd, this));\n\n\t\t$(document).one('mousemove.owl.core touchmove.owl.core', $.proxy(function(event) {\n\t\t\tvar delta = this.difference(this._drag.pointer, this.pointer(event));\n\n\t\t\t$(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));\n\n\t\t\tif (Math.abs(delta.x) < Math.abs(delta.y) && this.is('valid')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.enter('dragging');\n\t\t\tthis.trigger('drag');\n\t\t}, this));\n\t};\n\n\t/**\n\t * Handles the `touchmove` and `mousemove` events.\n\t * @todo #261\n\t * @protected\n\t * @param {Event} event - The event arguments.\n\t */\n\tOwl.prototype.onDragMove = function(event) {\n\t\tvar minimum = null,\n\t\t\tmaximum = null,\n\t\t\tpull = null,\n\t\t\tdelta = this.difference(this._drag.pointer, this.pointer(event)),\n\t\t\tstage = this.difference(this._drag.stage.start, delta);\n\n\t\tif (!this.is('dragging')) {\n\t\t\treturn;\n\t\t}\n\n\t\tevent.preventDefault();\n\n\t\tif (this.settings.loop) {\n\t\t\tminimum = this.coordinates(this.minimum());\n\t\t\tmaximum = this.coordinates(this.maximum() + 1) - minimum;\n\t\t\tstage.x = (((stage.x - minimum) % maximum + maximum) % maximum) + minimum;\n\t\t} else {\n\t\t\tminimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());\n\t\t\tmaximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());\n\t\t\tpull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;\n\t\t\tstage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);\n\t\t}\n\n\t\tthis._drag.stage.current = stage;\n\n\t\tthis.animate(stage.x);\n\t};\n\n\t/**\n\t * Handles the `touchend` and `mouseup` events.\n\t * @todo #261\n\t * @todo Threshold for click event\n\t * @protected\n\t * @param {Event} event - The event arguments.\n\t */\n\tOwl.prototype.onDragEnd = function(event) {\n\t\tvar delta = this.difference(this._drag.pointer, this.pointer(event)),\n\t\t\tstage = this._drag.stage.current,\n\t\t\tdirection = delta.x > 0 ^ this.settings.rtl ? 'left' : 'right';\n\n\t\t$(document).off('.owl.core');\n\n\t\tthis.$element.removeClass(this.options.grabClass);\n\n\t\tif (delta.x !== 0 && this.is('dragging') || !this.is('valid')) {\n\t\t\tthis.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);\n\t\t\tthis.current(this.closest(stage.x, delta.x !== 0 ? direction : this._drag.direction));\n\t\t\tthis.invalidate('position');\n\t\t\tthis.update();\n\n\t\t\tthis._drag.direction = direction;\n\n\t\t\tif (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) {\n\t\t\t\tthis._drag.target.one('click.owl.core', function() { return false; });\n\t\t\t}\n\t\t}\n\n\t\tif (!this.is('dragging')) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.leave('dragging');\n\t\tthis.trigger('dragged');\n\t};\n\n\t/**\n\t * Gets absolute position of the closest item for a coordinate.\n\t * @todo Setting `freeDrag` makes `closest` not reusable. See #165.\n\t * @protected\n\t * @param {Number} coordinate - The coordinate in pixel.\n\t * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.\n\t * @return {Number} - The absolute position of the closest item.\n\t */\n\tOwl.prototype.closest = function(coordinate, direction) {\n\t\tvar position = -1,\n\t\t\tpull = 30,\n\t\t\twidth = this.width(),\n\t\t\tcoordinates = this.coordinates();\n\n\t\tif (!this.settings.freeDrag) {\n\t\t\t// check closest item\n\t\t\t$.each(coordinates, $.proxy(function(index, value) {\n\t\t\t\t// on a left pull, check on current index\n\t\t\t\tif (direction === 'left' && coordinate > value - pull && coordinate < value + pull) {\n\t\t\t\t\tposition = index;\n\t\t\t\t// on a right pull, check on previous index\n\t\t\t\t// to do so, subtract width from value and set position = index + 1\n\t\t\t\t} else if (direction === 'right' && coordinate > value - width - pull && coordinate < value - width + pull) {\n\t\t\t\t\tposition = index + 1;\n\t\t\t\t} else if (this.op(coordinate, '<', value)\n\t\t\t\t\t&& this.op(coordinate, '>', coordinates[index + 1] !== undefined ? coordinates[index + 1] : value - width)) {\n\t\t\t\t\tposition = direction === 'left' ? index + 1 : index;\n\t\t\t\t}\n\t\t\t\treturn position === -1;\n\t\t\t}, this));\n\t\t}\n\n\t\tif (!this.settings.loop) {\n\t\t\t// non loop boundries\n\t\t\tif (this.op(coordinate, '>', coordinates[this.minimum()])) {\n\t\t\t\tposition = coordinate = this.minimum();\n\t\t\t} else if (this.op(coordinate, '<', coordinates[this.maximum()])) {\n\t\t\t\tposition = coordinate = this.maximum();\n\t\t\t}\n\t\t}\n\n\t\treturn position;\n\t};\n\n\t/**\n\t * Animates the stage.\n\t * @todo #270\n\t * @public\n\t * @param {Number} coordinate - The coordinate in pixels.\n\t */\n\tOwl.prototype.animate = function(coordinate) {\n\t\tvar animate = this.speed() > 0;\n\n\t\tthis.is('animating') && this.onTransitionEnd();\n\n\t\tif (animate) {\n\t\t\tthis.enter('animating');\n\t\t\tthis.trigger('translate');\n\t\t}\n\n\t\tif ($.support.transform3d && $.support.transition) {\n\t\t\tthis.$stage.css({\n\t\t\t\ttransform: 'translate3d(' + coordinate + 'px,0px,0px)',\n\t\t\t\ttransition: (this.speed() / 1000) + 's' + (\n\t\t\t\t\tthis.settings.slideTransition ? ' ' + this.settings.slideTransition : ''\n\t\t\t\t)\n\t\t\t});\n\t\t} else if (animate) {\n\t\t\tthis.$stage.animate({\n\t\t\t\tleft: coordinate + 'px'\n\t\t\t}, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this));\n\t\t} else {\n\t\t\tthis.$stage.css({\n\t\t\t\tleft: coordinate + 'px'\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * Checks whether the carousel is in a specific state or not.\n\t * @param {String} state - The state to check.\n\t * @returns {Boolean} - The flag which indicates if the carousel is busy.\n\t */\n\tOwl.prototype.is = function(state) {\n\t\treturn this._states.current[state] && this._states.current[state] > 0;\n\t};\n\n\t/**\n\t * Sets the absolute position of the current item.\n\t * @public\n\t * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.\n\t * @returns {Number} - The absolute position of the current item.\n\t */\n\tOwl.prototype.current = function(position) {\n\t\tif (position === undefined) {\n\t\t\treturn this._current;\n\t\t}\n\n\t\tif (this._items.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tposition = this.normalize(position);\n\n\t\tif (this._current !== position) {\n\t\t\tvar event = this.trigger('change', { property: { name: 'position', value: position } });\n\n\t\t\tif (event.data !== undefined) {\n\t\t\t\tposition = this.normalize(event.data);\n\t\t\t}\n\n\t\t\tthis._current = position;\n\n\t\t\tthis.invalidate('position');\n\n\t\t\tthis.trigger('changed', { property: { name: 'position', value: this._current } });\n\t\t}\n\n\t\treturn this._current;\n\t};\n\n\t/**\n\t * Invalidates the given part of the update routine.\n\t * @param {String} [part] - The part to invalidate.\n\t * @returns {Array.<String>} - The invalidated parts.\n\t */\n\tOwl.prototype.invalidate = function(part) {\n\t\tif ($.type(part) === 'string') {\n\t\t\tthis._invalidated[part] = true;\n\t\t\tthis.is('valid') && this.leave('valid');\n\t\t}\n\t\treturn $.map(this._invalidated, function(v, i) { return i });\n\t};\n\n\t/**\n\t * Resets the absolute position of the current item.\n\t * @public\n\t * @param {Number} position - The absolute position of the new item.\n\t */\n\tOwl.prototype.reset = function(position) {\n\t\tposition = this.normalize(position);\n\n\t\tif (position === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._speed = 0;\n\t\tthis._current = position;\n\n\t\tthis.suppress([ 'translate', 'translated' ]);\n\n\t\tthis.animate(this.coordinates(position));\n\n\t\tthis.release([ 'translate', 'translated' ]);\n\t};\n\n\t/**\n\t * Normalizes an absolute or a relative position of an item.\n\t * @public\n\t * @param {Number} position - The absolute or relative position to normalize.\n\t * @param {Boolean} [relative=false] - Whether the given position is relative or not.\n\t * @returns {Number} - The normalized position.\n\t */\n\tOwl.prototype.normalize = function(position, relative) {\n\t\tvar n = this._items.length,\n\t\t\tm = relative ? 0 : this._clones.length;\n\n\t\tif (!this.isNumeric(position) || n < 1) {\n\t\t\tposition = undefined;\n\t\t} else if (position < 0 || position >= n + m) {\n\t\t\tposition = ((position - m / 2) % n + n) % n + m / 2;\n\t\t}\n\n\t\treturn position;\n\t};\n\n\t/**\n\t * Converts an absolute position of an item into a relative one.\n\t * @public\n\t * @param {Number} position - The absolute position to convert.\n\t * @returns {Number} - The converted position.\n\t */\n\tOwl.prototype.relative = function(position) {\n\t\tposition -= this._clones.length / 2;\n\t\treturn this.normalize(position, true);\n\t};\n\n\t/**\n\t * Gets the maximum position for the current item.\n\t * @public\n\t * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.\n\t * @returns {Number}\n\t */\n\tOwl.prototype.maximum = function(relative) {\n\t\tvar settings = this.settings,\n\t\t\tmaximum = this._coordinates.length,\n\t\t\titerator,\n\t\t\treciprocalItemsWidth,\n\t\t\telementWidth;\n\n\t\tif (settings.loop) {\n\t\t\tmaximum = this._clones.length / 2 + this._items.length - 1;\n\t\t} else if (settings.autoWidth || settings.merge) {\n\t\t\titerator = this._items.length;\n\t\t\tif (iterator) {\n\t\t\t\treciprocalItemsWidth = this._items[--iterator].width();\n\t\t\t\telementWidth = this.$element.width();\n\t\t\t\twhile (iterator--) {\n\t\t\t\t\treciprocalItemsWidth += this._items[iterator].width() + this.settings.margin;\n\t\t\t\t\tif (reciprocalItemsWidth > elementWidth) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmaximum = iterator + 1;\n\t\t} else if (settings.center) {\n\t\t\tmaximum = this._items.length - 1;\n\t\t} else {\n\t\t\tmaximum = this._items.length - settings.items;\n\t\t}\n\n\t\tif (relative) {\n\t\t\tmaximum -= this._clones.length / 2;\n\t\t}\n\n\t\treturn Math.max(maximum, 0);\n\t};\n\n\t/**\n\t * Gets the minimum position for the current item.\n\t * @public\n\t * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.\n\t * @returns {Number}\n\t */\n\tOwl.prototype.minimum = function(relative) {\n\t\treturn relative ? 0 : this._clones.length / 2;\n\t};\n\n\t/**\n\t * Gets an item at the specified relative position.\n\t * @public\n\t * @param {Number} [position] - The relative position of the item.\n\t * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.\n\t */\n\tOwl.prototype.items = function(position) {\n\t\tif (position === undefined) {\n\t\t\treturn this._items.slice();\n\t\t}\n\n\t\tposition = this.normalize(position, true);\n\t\treturn this._items[position];\n\t};\n\n\t/**\n\t * Gets an item at the specified relative position.\n\t * @public\n\t * @param {Number} [position] - The relative position of the item.\n\t * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.\n\t */\n\tOwl.prototype.mergers = function(position) {\n\t\tif (position === undefined) {\n\t\t\treturn this._mergers.slice();\n\t\t}\n\n\t\tposition = this.normalize(position, true);\n\t\treturn this._mergers[position];\n\t};\n\n\t/**\n\t * Gets the absolute positions of clones for an item.\n\t * @public\n\t * @param {Number} [position] - The relative position of the item.\n\t * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.\n\t */\n\tOwl.prototype.clones = function(position) {\n\t\tvar odd = this._clones.length / 2,\n\t\t\teven = odd + this._items.length,\n\t\t\tmap = function(index) { return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2 };\n\n\t\tif (position === undefined) {\n\t\t\treturn $.map(this._clones, function(v, i) { return map(i) });\n\t\t}\n\n\t\treturn $.map(this._clones, function(v, i) { return v === position ? map(i) : null });\n\t};\n\n\t/**\n\t * Sets the current animation speed.\n\t * @public\n\t * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.\n\t * @returns {Number} - The current animation speed in milliseconds.\n\t */\n\tOwl.prototype.speed = function(speed) {\n\t\tif (speed !== undefined) {\n\t\t\tthis._speed = speed;\n\t\t}\n\n\t\treturn this._speed;\n\t};\n\n\t/**\n\t * Gets the coordinate of an item.\n\t * @todo The name of this method is missleanding.\n\t * @public\n\t * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.\n\t * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.\n\t */\n\tOwl.prototype.coordinates = function(position) {\n\t\tvar multiplier = 1,\n\t\t\tnewPosition = position - 1,\n\t\t\tcoordinate;\n\n\t\tif (position === undefined) {\n\t\t\treturn $.map(this._coordinates, $.proxy(function(coordinate, index) {\n\t\t\t\treturn this.coordinates(index);\n\t\t\t}, this));\n\t\t}\n\n\t\tif (this.settings.center) {\n\t\t\tif (this.settings.rtl) {\n\t\t\t\tmultiplier = -1;\n\t\t\t\tnewPosition = position + 1;\n\t\t\t}\n\n\t\t\tcoordinate = this._coordinates[position];\n\t\t\tcoordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;\n\t\t} else {\n\t\t\tcoordinate = this._coordinates[newPosition] || 0;\n\t\t}\n\n\t\tcoordinate = Math.ceil(coordinate);\n\n\t\treturn coordinate;\n\t};\n\n\t/**\n\t * Calculates the speed for a translation.\n\t * @protected\n\t * @param {Number} from - The absolute position of the start item.\n\t * @param {Number} to - The absolute position of the target item.\n\t * @param {Number} [factor=undefined] - The time factor in milliseconds.\n\t * @returns {Number} - The time in milliseconds for the translation.\n\t */\n\tOwl.prototype.duration = function(from, to, factor) {\n\t\tif (factor === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs((factor || this.settings.smartSpeed));\n\t};\n\n\t/**\n\t * Slides to the specified item.\n\t * @public\n\t * @param {Number} position - The position of the item.\n\t * @param {Number} [speed] - The time in milliseconds for the transition.\n\t */\n\tOwl.prototype.to = function(position, speed) {\n\t\tvar current = this.current(),\n\t\t\trevert = null,\n\t\t\tdistance = position - this.relative(current),\n\t\t\tdirection = (distance > 0) - (distance < 0),\n\t\t\titems = this._items.length,\n\t\t\tminimum = this.minimum(),\n\t\t\tmaximum = this.maximum();\n\n\t\tif (this.settings.loop) {\n\t\t\tif (!this.settings.rewind && Math.abs(distance) > items / 2) {\n\t\t\t\tdistance += direction * -1 * items;\n\t\t\t}\n\n\t\t\tposition = current + distance;\n\t\t\trevert = ((position - minimum) % items + items) % items + minimum;\n\n\t\t\tif (revert !== position && revert - distance <= maximum && revert - distance > 0) {\n\t\t\t\tcurrent = revert - distance;\n\t\t\t\tposition = revert;\n\t\t\t\tthis.reset(current);\n\t\t\t}\n\t\t} else if (this.settings.rewind) {\n\t\t\tmaximum += 1;\n\t\t\tposition = (position % maximum + maximum) % maximum;\n\t\t} else {\n\t\t\tposition = Math.max(minimum, Math.min(maximum, position));\n\t\t}\n\n\t\tthis.speed(this.duration(current, position, speed));\n\t\tthis.current(position);\n\n\t\tif (this.isVisible()) {\n\t\t\tthis.update();\n\t\t}\n\t};\n\n\t/**\n\t * Slides to the next item.\n\t * @public\n\t * @param {Number} [speed] - The time in milliseconds for the transition.\n\t */\n\tOwl.prototype.next = function(speed) {\n\t\tspeed = speed || false;\n\t\tthis.to(this.relative(this.current()) + 1, speed);\n\t};\n\n\t/**\n\t * Slides to the previous item.\n\t * @public\n\t * @param {Number} [speed] - The time in milliseconds for the transition.\n\t */\n\tOwl.prototype.prev = function(speed) {\n\t\tspeed = speed || false;\n\t\tthis.to(this.relative(this.current()) - 1, speed);\n\t};\n\n\t/**\n\t * Handles the end of an animation.\n\t * @protected\n\t * @param {Event} event - The event arguments.\n\t */\n\tOwl.prototype.onTransitionEnd = function(event) {\n\n\t\t// if css2 animation then event object is undefined\n\t\tif (event !== undefined) {\n\t\t\tevent.stopPropagation();\n\n\t\t\t// Catch only owl-stage transitionEnd event\n\t\t\tif ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tthis.leave('animating');\n\t\tthis.trigger('translated');\n\t};\n\n\t/**\n\t * Gets viewport width.\n\t * @protected\n\t * @return {Number} - The width in pixel.\n\t */\n\tOwl.prototype.viewport = function() {\n\t\tvar width;\n\t\tif (this.options.responsiveBaseElement !== window) {\n\t\t\twidth = $(this.options.responsiveBaseElement).width();\n\t\t} else if (window.innerWidth) {\n\t\t\twidth = window.innerWidth;\n\t\t} else if (document.documentElement && document.documentElement.clientWidth) {\n\t\t\twidth = document.documentElement.clientWidth;\n\t\t} else {\n\t\t\tconsole.warn('Can not detect viewport width.');\n\t\t}\n\t\treturn width;\n\t};\n\n\t/**\n\t * Replaces the current content.\n\t * @public\n\t * @param {HTMLElement|jQuery|String} content - The new content.\n\t */\n\tOwl.prototype.replace = function(content) {\n\t\tthis.$stage.empty();\n\t\tthis._items = [];\n\n\t\tif (content) {\n\t\t\tcontent = (content instanceof jQuery) ? content : $(content);\n\t\t}\n\n\t\tif (this.settings.nestedItemSelector) {\n\t\t\tcontent = content.find('.' + this.settings.nestedItemSelector);\n\t\t}\n\n\t\tcontent.filter(function() {\n\t\t\treturn this.nodeType === 1;\n\t\t}).each($.proxy(function(index, item) {\n\t\t\titem = this.prepare(item);\n\t\t\tthis.$stage.append(item);\n\t\t\tthis._items.push(item);\n\t\t\tthis._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n\t\t}, this));\n\n\t\tthis.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);\n\n\t\tthis.invalidate('items');\n\t};\n\n\t/**\n\t * Adds an item.\n\t * @todo Use `item` instead of `content` for the event arguments.\n\t * @public\n\t * @param {HTMLElement|jQuery|String} content - The item content to add.\n\t * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.\n\t */\n\tOwl.prototype.add = function(content, position) {\n\t\tvar current = this.relative(this._current);\n\n\t\tposition = position === undefined ? this._items.length : this.normalize(position, true);\n\t\tcontent = content instanceof jQuery ? content : $(content);\n\n\t\tthis.trigger('add', { content: content, position: position });\n\n\t\tcontent = this.prepare(content);\n\n\t\tif (this._items.length === 0 || position === this._items.length) {\n\t\t\tthis._items.length === 0 && this.$stage.append(content);\n\t\t\tthis._items.length !== 0 && this._items[position - 1].after(content);\n\t\t\tthis._items.push(content);\n\t\t\tthis._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n\t\t} else {\n\t\t\tthis._items[position].before(content);\n\t\t\tthis._items.splice(position, 0, content);\n\t\t\tthis._mergers.splice(position, 0, content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);\n\t\t}\n\n\t\tthis._items[current] && this.reset(this._items[current].index());\n\n\t\tthis.invalidate('items');\n\n\t\tthis.trigger('added', { content: content, position: position });\n\t};\n\n\t/**\n\t * Removes an item by its position.\n\t * @todo Use `item` instead of `content` for the event arguments.\n\t * @public\n\t * @param {Number} position - The relative position of the item to remove.\n\t */\n\tOwl.prototype.remove = function(position) {\n\t\tposition = this.normalize(position, true);\n\n\t\tif (position === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.trigger('remove', { content: this._items[position], position: position });\n\n\t\tthis._items[position].remove();\n\t\tthis._items.splice(position, 1);\n\t\tthis._mergers.splice(position, 1);\n\n\t\tthis.invalidate('items');\n\n\t\tthis.trigger('removed', { content: null, position: position });\n\t};\n\n\t/**\n\t * Preloads images with auto width.\n\t * @todo Replace by a more generic approach\n\t * @protected\n\t */\n\tOwl.prototype.preloadAutoWidthImages = function(images) {\n\t\timages.each($.proxy(function(i, element) {\n\t\t\tthis.enter('pre-loading');\n\t\t\telement = $(element);\n\t\t\t$(new Image()).one('load', $.proxy(function(e) {\n\t\t\t\telement.attr('src', e.target.src);\n\t\t\t\telement.css('opacity', 1);\n\t\t\t\tthis.leave('pre-loading');\n\t\t\t\t!this.is('pre-loading') && !this.is('initializing') && this.refresh();\n\t\t\t}, this)).attr('src', element.attr('src') || element.attr('data-src') || element.attr('data-src-retina'));\n\t\t}, this));\n\t};\n\n\t/**\n\t * Destroys the carousel.\n\t * @public\n\t */\n\tOwl.prototype.destroy = function() {\n\n\t\tthis.$element.off('.owl.core');\n\t\tthis.$stage.off('.owl.core');\n\t\t$(document).off('.owl.core');\n\n\t\tif (this.settings.responsive !== false) {\n\t\t\twindow.clearTimeout(this.resizeTimer);\n\t\t\tthis.off(window, 'resize', this._handlers.onThrottledResize);\n\t\t}\n\n\t\tfor (var i in this._plugins) {\n\t\t\tthis._plugins[i].destroy();\n\t\t}\n\n\t\tthis.$stage.children('.cloned').remove();\n\n\t\tthis.$stage.unwrap();\n\t\tthis.$stage.children().contents().unwrap();\n\t\tthis.$stage.children().unwrap();\n\t\tthis.$stage.remove();\n\t\tthis.$element\n\t\t\t.removeClass(this.options.refreshClass)\n\t\t\t.removeClass(this.options.loadingClass)\n\t\t\t.removeClass(this.options.loadedClass)\n\t\t\t.removeClass(this.options.rtlClass)\n\t\t\t.removeClass(this.options.dragClass)\n\t\t\t.removeClass(this.options.grabClass)\n\t\t\t.attr('class', this.$element.attr('class').replace(new RegExp(this.options.responsiveClass + '-\\\\S+\\\\s', 'g'), ''))\n\t\t\t.removeData('owl.carousel');\n\t};\n\n\t/**\n\t * Operators to calculate right-to-left and left-to-right.\n\t * @protected\n\t * @param {Number} [a] - The left side operand.\n\t * @param {String} [o] - The operator.\n\t * @param {Number} [b] - The right side operand.\n\t */\n\tOwl.prototype.op = function(a, o, b) {\n\t\tvar rtl = this.settings.rtl;\n\t\tswitch (o) {\n\t\t\tcase '<':\n\t\t\t\treturn rtl ? a > b : a < b;\n\t\t\tcase '>':\n\t\t\t\treturn rtl ? a < b : a > b;\n\t\t\tcase '>=':\n\t\t\t\treturn rtl ? a <= b : a >= b;\n\t\t\tcase '<=':\n\t\t\t\treturn rtl ? a >= b : a <= b;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\t/**\n\t * Attaches to an internal event.\n\t * @protected\n\t * @param {HTMLElement} element - The event source.\n\t * @param {String} event - The event name.\n\t * @param {Function} listener - The event handler to attach.\n\t * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.\n\t */\n\tOwl.prototype.on = function(element, event, listener, capture) {\n\t\tif (element.addEventListener) {\n\t\t\telement.addEventListener(event, listener, capture);\n\t\t} else if (element.attachEvent) {\n\t\t\telement.attachEvent('on' + event, listener);\n\t\t}\n\t};\n\n\t/**\n\t * Detaches from an internal event.\n\t * @protected\n\t * @param {HTMLElement} element - The event source.\n\t * @param {String} event - The event name.\n\t * @param {Function} listener - The attached event handler to detach.\n\t * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.\n\t */\n\tOwl.prototype.off = function(element, event, listener, capture) {\n\t\tif (element.removeEventListener) {\n\t\t\telement.removeEventListener(event, listener, capture);\n\t\t} else if (element.detachEvent) {\n\t\t\telement.detachEvent('on' + event, listener);\n\t\t}\n\t};\n\n\t/**\n\t * Triggers a public event.\n\t * @todo Remove `status`, `relatedTarget` should be used instead.\n\t * @protected\n\t * @param {String} name - The event name.\n\t * @param {*} [data=null] - The event data.\n\t * @param {String} [namespace=carousel] - The event namespace.\n\t * @param {String} [state] - The state which is associated with the event.\n\t * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.\n\t * @returns {Event} - The event arguments.\n\t */\n\tOwl.prototype.trigger = function(name, data, namespace, state, enter) {\n\t\tvar status = {\n\t\t\titem: { count: this._items.length, index: this.current() }\n\t\t}, handler = $.camelCase(\n\t\t\t$.grep([ 'on', name, namespace ], function(v) { return v })\n\t\t\t\t.join('-').toLowerCase()\n\t\t), event = $.Event(\n\t\t\t[ name, 'owl', namespace || 'carousel' ].join('.').toLowerCase(),\n\t\t\t$.extend({ relatedTarget: this }, status, data)\n\t\t);\n\n\t\tif (!this._supress[name]) {\n\t\t\t$.each(this._plugins, function(name, plugin) {\n\t\t\t\tif (plugin.onTrigger) {\n\t\t\t\t\tplugin.onTrigger(event);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.register({ type: Owl.Type.Event, name: name });\n\t\t\tthis.$element.trigger(event);\n\n\t\t\tif (this.settings && typeof this.settings[handler] === 'function') {\n\t\t\t\tthis.settings[handler].call(this, event);\n\t\t\t}\n\t\t}\n\n\t\treturn event;\n\t};\n\n\t/**\n\t * Enters a state.\n\t * @param name - The state name.\n\t */\n\tOwl.prototype.enter = function(name) {\n\t\t$.each([ name ].concat(this._states.tags[name] || []), $.proxy(function(i, name) {\n\t\t\tif (this._states.current[name] === undefined) {\n\t\t\t\tthis._states.current[name] = 0;\n\t\t\t}\n\n\t\t\tthis._states.current[name]++;\n\t\t}, this));\n\t};\n\n\t/**\n\t * Leaves a state.\n\t * @param name - The state name.\n\t */\n\tOwl.prototype.leave = function(name) {\n\t\t$.each([ name ].concat(this._states.tags[name] || []), $.proxy(function(i, name) {\n\t\t\tthis._states.current[name]--;\n\t\t}, this));\n\t};\n\n\t/**\n\t * Registers an event or state.\n\t * @public\n\t * @param {Object} object - The event or state to register.\n\t */\n\tOwl.prototype.register = function(object) {\n\t\tif (object.type === Owl.Type.Event) {\n\t\t\tif (!$.event.special[object.name]) {\n\t\t\t\t$.event.special[object.name] = {};\n\t\t\t}\n\n\t\t\tif (!$.event.special[object.name].owl) {\n\t\t\t\tvar _default = $.event.special[object.name]._default;\n\t\t\t\t$.event.special[object.name]._default = function(e) {\n\t\t\t\t\tif (_default && _default.apply && (!e.namespace || e.namespace.indexOf('owl') === -1)) {\n\t\t\t\t\t\treturn _default.apply(this, arguments);\n\t\t\t\t\t}\n\t\t\t\t\treturn e.namespace && e.namespace.indexOf('owl') > -1;\n\t\t\t\t};\n\t\t\t\t$.event.special[object.name].owl = true;\n\t\t\t}\n\t\t} else if (object.type === Owl.Type.State) {\n\t\t\tif (!this._states.tags[object.name]) {\n\t\t\t\tthis._states.tags[object.name] = object.tags;\n\t\t\t} else {\n\t\t\t\tthis._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);\n\t\t\t}\n\n\t\t\tthis._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function(tag, i) {\n\t\t\t\treturn $.inArray(tag, this._states.tags[object.name]) === i;\n\t\t\t}, this));\n\t\t}\n\t};\n\n\t/**\n\t * Suppresses events.\n\t * @protected\n\t * @param {Array.<String>} events - The events to suppress.\n\t */\n\tOwl.prototype.suppress = function(events) {\n\t\t$.each(events, $.proxy(function(index, event) {\n\t\t\tthis._supress[event] = true;\n\t\t}, this));\n\t};\n\n\t/**\n\t * Releases suppressed events.\n\t * @protected\n\t * @param {Array.<String>} events - The events to release.\n\t */\n\tOwl.prototype.release = function(events) {\n\t\t$.each(events, $.proxy(function(index, event) {\n\t\t\tdelete this._supress[event];\n\t\t}, this));\n\t};\n\n\t/**\n\t * Gets unified pointer coordinates from event.\n\t * @todo #261\n\t * @protected\n\t * @param {Event} - The `mousedown` or `touchstart` event.\n\t * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.\n\t */\n\tOwl.prototype.pointer = function(event) {\n\t\tvar result = { x: null, y: null };\n\n\t\tevent = event.originalEvent || event || window.event;\n\n\t\tevent = event.touches && event.touches.length ?\n\t\t\tevent.touches[0] : event.changedTouches && event.changedTouches.length ?\n\t\t\t\tevent.changedTouches[0] : event;\n\n\t\tif (event.pageX) {\n\t\t\tresult.x = event.pageX;\n\t\t\tresult.y = event.pageY;\n\t\t} else {\n\t\t\tresult.x = event.clientX;\n\t\t\tresult.y = event.clientY;\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t/**\n\t * Determines if the input is a Number or something that can be coerced to a Number\n\t * @protected\n\t * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested\n\t * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number\n\t */\n\tOwl.prototype.isNumeric = function(number) {\n\t\treturn !isNaN(parseFloat(number));\n\t};\n\n\t/**\n\t * Gets the difference of two vectors.\n\t * @todo #261\n\t * @protected\n\t * @param {Object} - The first vector.\n\t * @param {Object} - The second vector.\n\t * @returns {Object} - The difference.\n\t */\n\tOwl.prototype.difference = function(first, second) {\n\t\treturn {\n\t\t\tx: first.x - second.x,\n\t\t\ty: first.y - second.y\n\t\t};\n\t};\n\n\t/**\n\t * The jQuery Plugin for the Owl Carousel\n\t * @todo Navigation plugin `next` and `prev`\n\t * @public\n\t */\n\t$.fn.owlCarousel = function(option) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\t\treturn this.each(function() {\n\t\t\tvar $this = $(this),\n\t\t\t\tdata = $this.data('owl.carousel');\n\n\t\t\tif (!data) {\n\t\t\t\tdata = new Owl(this, typeof option == 'object' && option);\n\t\t\t\t$this.data('owl.carousel', data);\n\n\t\t\t\t$.each([\n\t\t\t\t\t'next', 'prev', 'to', 'destroy', 'refresh', 'replace', 'add', 'remove'\n\t\t\t\t], function(i, event) {\n\t\t\t\t\tdata.register({ type: Owl.Type.Event, name: event });\n\t\t\t\t\tdata.$element.on(event + '.owl.carousel.core', $.proxy(function(e) {\n\t\t\t\t\t\tif (e.namespace && e.relatedTarget !== this) {\n\t\t\t\t\t\t\tthis.suppress([ event ]);\n\t\t\t\t\t\t\tdata[event].apply(this, [].slice.call(arguments, 1));\n\t\t\t\t\t\t\tthis.release([ event ]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, data));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (typeof option == 'string' && option.charAt(0) !== '_') {\n\t\t\t\tdata[option].apply(data, args);\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * The constructor for the jQuery Plugin\n\t * @public\n\t */\n\t$.fn.owlCarousel.Constructor = Owl;\n\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n\n/**\n * AutoRefresh Plugin\n * @version 2.3.4\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n;(function($, window, document, undefined) {\n\n\t/**\n\t * Creates the auto refresh plugin.\n\t * @class The Auto Refresh Plugin\n\t * @param {Owl} carousel - The Owl Carousel\n\t */\n\tvar AutoRefresh = function(carousel) {\n\t\t/**\n\t\t * Reference to the core.\n\t\t * @protected\n\t\t * @type {Owl}\n\t\t */\n\t\tthis._core = carousel;\n\n\t\t/**\n\t\t * Refresh interval.\n\t\t * @protected\n\t\t * @type {number}\n\t\t */\n\t\tthis._interval = null;\n\n\t\t/**\n\t\t * Whether the element is currently visible or not.\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._visible = null;\n\n\t\t/**\n\t\t * All event handlers.\n\t\t * @protected\n\t\t * @type {Object}\n\t\t */\n\t\tthis._handlers = {\n\t\t\t'initialized.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this._core.settings.autoRefresh) {\n\t\t\t\t\tthis.watch();\n\t\t\t\t}\n\t\t\t}, this)\n\t\t};\n\n\t\t// set default options\n\t\tthis._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options);\n\n\t\t// register event handlers\n\t\tthis._core.$element.on(this._handlers);\n\t};\n\n\t/**\n\t * Default options.\n\t * @public\n\t */\n\tAutoRefresh.Defaults = {\n\t\tautoRefresh: true,\n\t\tautoRefreshInterval: 500\n\t};\n\n\t/**\n\t * Watches the element.\n\t */\n\tAutoRefresh.prototype.watch = function() {\n\t\tif (this._interval) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._visible = this._core.isVisible();\n\t\tthis._interval = window.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);\n\t};\n\n\t/**\n\t * Refreshes the element.\n\t */\n\tAutoRefresh.prototype.refresh = function() {\n\t\tif (this._core.isVisible() === this._visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._visible = !this._visible;\n\n\t\tthis._core.$element.toggleClass('owl-hidden', !this._visible);\n\n\t\tthis._visible && (this._core.invalidate('width') && this._core.refresh());\n\t};\n\n\t/**\n\t * Destroys the plugin.\n\t */\n\tAutoRefresh.prototype.destroy = function() {\n\t\tvar handler, property;\n\n\t\twindow.clearInterval(this._interval);\n\n\t\tfor (handler in this._handlers) {\n\t\t\tthis._core.$element.off(handler, this._handlers[handler]);\n\t\t}\n\t\tfor (property in Object.getOwnPropertyNames(this)) {\n\t\t\ttypeof this[property] != 'function' && (this[property] = null);\n\t\t}\n\t};\n\n\t$.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;\n\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n\n/**\n * Lazy Plugin\n * @version 2.3.4\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n;(function($, window, document, undefined) {\n\n\t/**\n\t * Creates the lazy plugin.\n\t * @class The Lazy Plugin\n\t * @param {Owl} carousel - The Owl Carousel\n\t */\n\tvar Lazy = function(carousel) {\n\n\t\t/**\n\t\t * Reference to the core.\n\t\t * @protected\n\t\t * @type {Owl}\n\t\t */\n\t\tthis._core = carousel;\n\n\t\t/**\n\t\t * Already loaded items.\n\t\t * @protected\n\t\t * @type {Array.<jQuery>}\n\t\t */\n\t\tthis._loaded = [];\n\n\t\t/**\n\t\t * Event handlers.\n\t\t * @protected\n\t\t * @type {Object}\n\t\t */\n\t\tthis._handlers = {\n\t\t\t'initialized.owl.carousel change.owl.carousel resized.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (!e.namespace) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this._core.settings || !this._core.settings.lazyLoad) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ((e.property && e.property.name == 'position') || e.type == 'initialized') {\n\t\t\t\t\tvar settings = this._core.settings,\n\t\t\t\t\t\tn = (settings.center && Math.ceil(settings.items / 2) || settings.items),\n\t\t\t\t\t\ti = ((settings.center && n * -1) || 0),\n\t\t\t\t\t\tposition = (e.property && e.property.value !== undefined ? e.property.value : this._core.current()) + i,\n\t\t\t\t\t\tclones = this._core.clones().length,\n\t\t\t\t\t\tload = $.proxy(function(i, v) { this.load(v) }, this);\n\t\t\t\t\t//TODO: Need documentation for this new option\n\t\t\t\t\tif (settings.lazyLoadEager > 0) {\n\t\t\t\t\t\tn += settings.lazyLoadEager;\n\t\t\t\t\t\t// If the carousel is looping also preload images that are to the \"left\"\n\t\t\t\t\t\tif (settings.loop) {\n              position -= settings.lazyLoadEager;\n              n++;\n            }\n\t\t\t\t\t}\n\n\t\t\t\t\twhile (i++ < n) {\n\t\t\t\t\t\tthis.load(clones / 2 + this._core.relative(position));\n\t\t\t\t\t\tclones && $.each(this._core.clones(this._core.relative(position)), load);\n\t\t\t\t\t\tposition++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, this)\n\t\t};\n\n\t\t// set the default options\n\t\tthis._core.options = $.extend({}, Lazy.Defaults, this._core.options);\n\n\t\t// register event handler\n\t\tthis._core.$element.on(this._handlers);\n\t};\n\n\t/**\n\t * Default options.\n\t * @public\n\t */\n\tLazy.Defaults = {\n\t\tlazyLoad: false,\n\t\tlazyLoadEager: 0\n\t};\n\n\t/**\n\t * Loads all resources of an item at the specified position.\n\t * @param {Number} position - The absolute position of the item.\n\t * @protected\n\t */\n\tLazy.prototype.load = function(position) {\n\t\tvar $item = this._core.$stage.children().eq(position),\n\t\t\t$elements = $item && $item.find('.owl-lazy');\n\n\t\tif (!$elements || $.inArray($item.get(0), this._loaded) > -1) {\n\t\t\treturn;\n\t\t}\n\n\t\t$elements.each($.proxy(function(index, element) {\n\t\t\tvar $element = $(element), image,\n                url = (window.devicePixelRatio > 1 && $element.attr('data-src-retina')) || $element.attr('data-src') || $element.attr('data-srcset');\n\n\t\t\tthis._core.trigger('load', { element: $element, url: url }, 'lazy');\n\n\t\t\tif ($element.is('img')) {\n\t\t\t\t$element.one('load.owl.lazy', $.proxy(function() {\n\t\t\t\t\t$element.css('opacity', 1);\n\t\t\t\t\tthis._core.trigger('loaded', { element: $element, url: url }, 'lazy');\n\t\t\t\t}, this)).attr('src', url);\n            } else if ($element.is('source')) {\n                $element.one('load.owl.lazy', $.proxy(function() {\n                    this._core.trigger('loaded', { element: $element, url: url }, 'lazy');\n                }, this)).attr('srcset', url);\n\t\t\t} else {\n\t\t\t\timage = new Image();\n\t\t\t\timage.onload = $.proxy(function() {\n\t\t\t\t\t$element.css({\n\t\t\t\t\t\t'background-image': 'url(\"' + url + '\")',\n\t\t\t\t\t\t'opacity': '1'\n\t\t\t\t\t});\n\t\t\t\t\tthis._core.trigger('loaded', { element: $element, url: url }, 'lazy');\n\t\t\t\t}, this);\n\t\t\t\timage.src = url;\n\t\t\t}\n\t\t}, this));\n\n\t\tthis._loaded.push($item.get(0));\n\t};\n\n\t/**\n\t * Destroys the plugin.\n\t * @public\n\t */\n\tLazy.prototype.destroy = function() {\n\t\tvar handler, property;\n\n\t\tfor (handler in this.handlers) {\n\t\t\tthis._core.$element.off(handler, this.handlers[handler]);\n\t\t}\n\t\tfor (property in Object.getOwnPropertyNames(this)) {\n\t\t\ttypeof this[property] != 'function' && (this[property] = null);\n\t\t}\n\t};\n\n\t$.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;\n\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n\n/**\n * AutoHeight Plugin\n * @version 2.3.4\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n;(function($, window, document, undefined) {\n\n\t/**\n\t * Creates the auto height plugin.\n\t * @class The Auto Height Plugin\n\t * @param {Owl} carousel - The Owl Carousel\n\t */\n\tvar AutoHeight = function(carousel) {\n\t\t/**\n\t\t * Reference to the core.\n\t\t * @protected\n\t\t * @type {Owl}\n\t\t */\n\t\tthis._core = carousel;\n\n\t\tthis._previousHeight = null;\n\n\t\t/**\n\t\t * All event handlers.\n\t\t * @protected\n\t\t * @type {Object}\n\t\t */\n\t\tthis._handlers = {\n\t\t\t'initialized.owl.carousel refreshed.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this._core.settings.autoHeight) {\n\t\t\t\t\tthis.update();\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'changed.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this._core.settings.autoHeight && e.property.name === 'position'){\n\t\t\t\t\tthis.update();\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'loaded.owl.lazy': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this._core.settings.autoHeight\n\t\t\t\t\t&& e.element.closest('.' + this._core.settings.itemClass).index() === this._core.current()) {\n\t\t\t\t\tthis.update();\n\t\t\t\t}\n\t\t\t}, this)\n\t\t};\n\n\t\t// set default options\n\t\tthis._core.options = $.extend({}, AutoHeight.Defaults, this._core.options);\n\n\t\t// register event handlers\n\t\tthis._core.$element.on(this._handlers);\n\t\tthis._intervalId = null;\n\t\tvar refThis = this;\n\n\t\t// These changes have been taken from a PR by gavrochelegnou proposed in #1575\n\t\t// and have been made compatible with the latest jQuery version\n\t\t$(window).on('load', function() {\n\t\t\tif (refThis._core.settings.autoHeight) {\n\t\t\t\trefThis.update();\n\t\t\t}\n\t\t});\n\n\t\t// Autoresize the height of the carousel when window is resized\n\t\t// When carousel has images, the height is dependent on the width\n\t\t// and should also change on resize\n\t\t$(window).resize(function() {\n\t\t\tif (refThis._core.settings.autoHeight) {\n\t\t\t\tif (refThis._intervalId != null) {\n\t\t\t\t\tclearTimeout(refThis._intervalId);\n\t\t\t\t}\n\n\t\t\t\trefThis._intervalId = setTimeout(function() {\n\t\t\t\t\trefThis.update();\n\t\t\t\t}, 250);\n\t\t\t}\n\t\t});\n\n\t};\n\n\t/**\n\t * Default options.\n\t * @public\n\t */\n\tAutoHeight.Defaults = {\n\t\tautoHeight: false,\n\t\tautoHeightClass: 'owl-height'\n\t};\n\n\t/**\n\t * Updates the view.\n\t */\n\tAutoHeight.prototype.update = function() {\n\t\tvar start = this._core._current,\n\t\t\tend = start + this._core.settings.items,\n\t\t\tlazyLoadEnabled = this._core.settings.lazyLoad,\n\t\t\tvisible = this._core.$stage.children().toArray().slice(start, end),\n\t\t\theights = [],\n\t\t\tmaxheight = 0;\n\n\t\t$.each(visible, function(index, item) {\n\t\t\theights.push($(item).height());\n\t\t});\n\n\t\tmaxheight = Math.max.apply(null, heights);\n\n\t\tif (maxheight <= 1 && lazyLoadEnabled && this._previousHeight) {\n\t\t\tmaxheight = this._previousHeight;\n\t\t}\n\n\t\tthis._previousHeight = maxheight;\n\n\t\tthis._core.$stage.parent()\n\t\t\t.height(maxheight)\n\t\t\t.addClass(this._core.settings.autoHeightClass);\n\t};\n\n\tAutoHeight.prototype.destroy = function() {\n\t\tvar handler, property;\n\n\t\tfor (handler in this._handlers) {\n\t\t\tthis._core.$element.off(handler, this._handlers[handler]);\n\t\t}\n\t\tfor (property in Object.getOwnPropertyNames(this)) {\n\t\t\ttypeof this[property] !== 'function' && (this[property] = null);\n\t\t}\n\t};\n\n\t$.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;\n\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n\n/**\n * Video Plugin\n * @version 2.3.4\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n;(function($, window, document, undefined) {\n\n\t/**\n\t * Creates the video plugin.\n\t * @class The Video Plugin\n\t * @param {Owl} carousel - The Owl Carousel\n\t */\n\tvar Video = function(carousel) {\n\t\t/**\n\t\t * Reference to the core.\n\t\t * @protected\n\t\t * @type {Owl}\n\t\t */\n\t\tthis._core = carousel;\n\n\t\t/**\n\t\t * Cache all video URLs.\n\t\t * @protected\n\t\t * @type {Object}\n\t\t */\n\t\tthis._videos = {};\n\n\t\t/**\n\t\t * Current playing item.\n\t\t * @protected\n\t\t * @type {jQuery}\n\t\t */\n\t\tthis._playing = null;\n\n\t\t/**\n\t\t * All event handlers.\n\t\t * @todo The cloned content removale is too late\n\t\t * @protected\n\t\t * @type {Object}\n\t\t */\n\t\tthis._handlers = {\n\t\t\t'initialized.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace) {\n\t\t\t\t\tthis._core.register({ type: 'state', name: 'playing', tags: [ 'interacting' ] });\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'resize.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this._core.settings.video && this.isInFullScreen()) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'refreshed.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this._core.is('resizing')) {\n\t\t\t\t\tthis._core.$stage.find('.cloned .owl-video-frame').remove();\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'changed.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && e.property.name === 'position' && this._playing) {\n\t\t\t\t\tthis.stop();\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'prepared.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (!e.namespace) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar $element = $(e.content).find('.owl-video');\n\n\t\t\t\tif ($element.length) {\n\t\t\t\t\t$element.css('display', 'none');\n\t\t\t\t\tthis.fetch($element, $(e.content));\n\t\t\t\t}\n\t\t\t}, this)\n\t\t};\n\n\t\t// set default options\n\t\tthis._core.options = $.extend({}, Video.Defaults, this._core.options);\n\n\t\t// register event handlers\n\t\tthis._core.$element.on(this._handlers);\n\n\t\tthis._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function(e) {\n\t\t\tthis.play(e);\n\t\t}, this));\n\t};\n\n\t/**\n\t * Default options.\n\t * @public\n\t */\n\tVideo.Defaults = {\n\t\tvideo: false,\n\t\tvideoHeight: false,\n\t\tvideoWidth: false\n\t};\n\n\t/**\n\t * Gets the video ID and the type (YouTube/Vimeo/vzaar only).\n\t * @protected\n\t * @param {jQuery} target - The target containing the video data.\n\t * @param {jQuery} item - The item containing the video.\n\t */\n\tVideo.prototype.fetch = function(target, item) {\n\t\t\tvar type = (function() {\n\t\t\t\t\tif (target.attr('data-vimeo-id')) {\n\t\t\t\t\t\treturn 'vimeo';\n\t\t\t\t\t} else if (target.attr('data-vzaar-id')) {\n\t\t\t\t\t\treturn 'vzaar'\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 'youtube';\n\t\t\t\t\t}\n\t\t\t\t})(),\n\t\t\t\tid = target.attr('data-vimeo-id') || target.attr('data-youtube-id') || target.attr('data-vzaar-id'),\n\t\t\t\twidth = target.attr('data-width') || this._core.settings.videoWidth,\n\t\t\t\theight = target.attr('data-height') || this._core.settings.videoHeight,\n\t\t\t\turl = target.attr('href');\n\n\t\tif (url) {\n\n\t\t\t/*\n\t\t\t\t\tParses the id's out of the following urls (and probably more):\n\t\t\t\t\thttps://www.youtube.com/watch?v=:id\n\t\t\t\t\thttps://youtu.be/:id\n\t\t\t\t\thttps://vimeo.com/:id\n\t\t\t\t\thttps://vimeo.com/channels/:channel/:id\n\t\t\t\t\thttps://vimeo.com/groups/:group/videos/:id\n\t\t\t\t\thttps://app.vzaar.com/videos/:id\n\n\t\t\t\t\tVisual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F\n\t\t\t*/\n\n\t\t\tid = url.match(/(http:|https:|)\\/\\/(player.|www.|app.)?(vimeo\\.com|youtu(be\\.com|\\.be|be\\.googleapis\\.com|be\\-nocookie\\.com)|vzaar\\.com)\\/(video\\/|videos\\/|embed\\/|channels\\/.+\\/|groups\\/.+\\/|watch\\?v=|v\\/)?([A-Za-z0-9._%-]*)(\\&\\S+)?/);\n\n\t\t\tif (id[3].indexOf('youtu') > -1) {\n\t\t\t\ttype = 'youtube';\n\t\t\t} else if (id[3].indexOf('vimeo') > -1) {\n\t\t\t\ttype = 'vimeo';\n\t\t\t} else if (id[3].indexOf('vzaar') > -1) {\n\t\t\t\ttype = 'vzaar';\n\t\t\t} else {\n\t\t\t\tthrow new Error('Video URL not supported.');\n\t\t\t}\n\t\t\tid = id[6];\n\t\t} else {\n\t\t\tthrow new Error('Missing video URL.');\n\t\t}\n\n\t\tthis._videos[url] = {\n\t\t\ttype: type,\n\t\t\tid: id,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\n\t\titem.attr('data-video', url);\n\n\t\tthis.thumbnail(target, this._videos[url]);\n\t};\n\n\t/**\n\t * Creates video thumbnail.\n\t * @protected\n\t * @param {jQuery} target - The target containing the video data.\n\t * @param {Object} info - The video info object.\n\t * @see `fetch`\n\t */\n\tVideo.prototype.thumbnail = function(target, video) {\n\t\tvar tnLink,\n\t\t\ticon,\n\t\t\tpath,\n\t\t\tdimensions = video.width && video.height ? 'width:' + video.width + 'px;height:' + video.height + 'px;' : '',\n\t\t\tcustomTn = target.find('img'),\n\t\t\tsrcType = 'src',\n\t\t\tlazyClass = '',\n\t\t\tsettings = this._core.settings,\n\t\t\tcreate = function(path) {\n\t\t\t\ticon = '<div class=\"owl-video-play-icon\"></div>';\n\n\t\t\t\tif (settings.lazyLoad) {\n\t\t\t\t\ttnLink = $('<div/>',{\n\t\t\t\t\t\t\"class\": 'owl-video-tn ' + lazyClass,\n\t\t\t\t\t\t\"srcType\": path\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\ttnLink = $( '<div/>', {\n\t\t\t\t\t\t\"class\": \"owl-video-tn\",\n\t\t\t\t\t\t\"style\": 'opacity:1;background-image:url(' + path + ')'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\ttarget.after(tnLink);\n\t\t\t\ttarget.after(icon);\n\t\t\t};\n\n\t\t// wrap video content into owl-video-wrapper div\n\t\ttarget.wrap( $( '<div/>', {\n\t\t\t\"class\": \"owl-video-wrapper\",\n\t\t\t\"style\": dimensions\n\t\t}));\n\n\t\tif (this._core.settings.lazyLoad) {\n\t\t\tsrcType = 'data-src';\n\t\t\tlazyClass = 'owl-lazy';\n\t\t}\n\n\t\t// custom thumbnail\n\t\tif (customTn.length) {\n\t\t\tcreate(customTn.attr(srcType));\n\t\t\tcustomTn.remove();\n\t\t\treturn false;\n\t\t}\n\n\t\tif (video.type === 'youtube') {\n\t\t\tpath = \"//img.youtube.com/vi/\" + video.id + \"/hqdefault.jpg\";\n\t\t\tcreate(path);\n\t\t} else if (video.type === 'vimeo') {\n\t\t\t$.ajax({\n\t\t\t\ttype: 'GET',\n\t\t\t\turl: '//vimeo.com/api/v2/video/' + video.id + '.json',\n\t\t\t\tjsonp: 'callback',\n\t\t\t\tdataType: 'jsonp',\n\t\t\t\tsuccess: function(data) {\n\t\t\t\t\tpath = data[0].thumbnail_large;\n\t\t\t\t\tcreate(path);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (video.type === 'vzaar') {\n\t\t\t$.ajax({\n\t\t\t\ttype: 'GET',\n\t\t\t\turl: '//vzaar.com/api/videos/' + video.id + '.json',\n\t\t\t\tjsonp: 'callback',\n\t\t\t\tdataType: 'jsonp',\n\t\t\t\tsuccess: function(data) {\n\t\t\t\t\tpath = data.framegrab_url;\n\t\t\t\t\tcreate(path);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * Stops the current video.\n\t * @public\n\t */\n\tVideo.prototype.stop = function() {\n\t\tthis._core.trigger('stop', null, 'video');\n\t\tthis._playing.find('.owl-video-frame').remove();\n\t\tthis._playing.removeClass('owl-video-playing');\n\t\tthis._playing = null;\n\t\tthis._core.leave('playing');\n\t\tthis._core.trigger('stopped', null, 'video');\n\t};\n\n\t/**\n\t * Starts the current video.\n\t * @public\n\t * @param {Event} event - The event arguments.\n\t */\n\tVideo.prototype.play = function(event) {\n\t\tvar target = $(event.target),\n\t\t\titem = target.closest('.' + this._core.settings.itemClass),\n\t\t\tvideo = this._videos[item.attr('data-video')],\n\t\t\twidth = video.width || '100%',\n\t\t\theight = video.height || this._core.$stage.height(),\n\t\t\thtml,\n\t\t\tiframe;\n\n\t\tif (this._playing) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._core.enter('playing');\n\t\tthis._core.trigger('play', null, 'video');\n\n\t\titem = this._core.items(this._core.relative(item.index()));\n\n\t\tthis._core.reset(item.index());\n\n\t\thtml = $( '<iframe frameborder=\"0\" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>' );\n\t\thtml.attr( 'height', height );\n\t\thtml.attr( 'width', width );\n\t\tif (video.type === 'youtube') {\n\t\t\thtml.attr( 'src', '//www.youtube.com/embed/' + video.id + '?autoplay=1&rel=0&v=' + video.id );\n\t\t} else if (video.type === 'vimeo') {\n\t\t\thtml.attr( 'src', '//player.vimeo.com/video/' + video.id + '?autoplay=1' );\n\t\t} else if (video.type === 'vzaar') {\n\t\t\thtml.attr( 'src', '//view.vzaar.com/' + video.id + '/player?autoplay=true' );\n\t\t}\n\n\t\tiframe = $(html).wrap( '<div class=\"owl-video-frame\" />' ).insertAfter(item.find('.owl-video'));\n\n\t\tthis._playing = item.addClass('owl-video-playing');\n\t};\n\n\t/**\n\t * Checks whether an video is currently in full screen mode or not.\n\t * @todo Bad style because looks like a readonly method but changes members.\n\t * @protected\n\t * @returns {Boolean}\n\t */\n\tVideo.prototype.isInFullScreen = function() {\n\t\tvar element = document.fullscreenElement || document.mozFullScreenElement ||\n\t\t\t\tdocument.webkitFullscreenElement;\n\n\t\treturn element && $(element).parent().hasClass('owl-video-frame');\n\t};\n\n\t/**\n\t * Destroys the plugin.\n\t */\n\tVideo.prototype.destroy = function() {\n\t\tvar handler, property;\n\n\t\tthis._core.$element.off('click.owl.video');\n\n\t\tfor (handler in this._handlers) {\n\t\t\tthis._core.$element.off(handler, this._handlers[handler]);\n\t\t}\n\t\tfor (property in Object.getOwnPropertyNames(this)) {\n\t\t\ttypeof this[property] != 'function' && (this[property] = null);\n\t\t}\n\t};\n\n\t$.fn.owlCarousel.Constructor.Plugins.Video = Video;\n\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n\n/**\n * Animate Plugin\n * @version 2.3.4\n * @author Bartosz Wojciechowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n;(function($, window, document, undefined) {\n\n\t/**\n\t * Creates the animate plugin.\n\t * @class The Navigation Plugin\n\t * @param {Owl} scope - The Owl Carousel\n\t */\n\tvar Animate = function(scope) {\n\t\tthis.core = scope;\n\t\tthis.core.options = $.extend({}, Animate.Defaults, this.core.options);\n\t\tthis.swapping = true;\n\t\tthis.previous = undefined;\n\t\tthis.next = undefined;\n\n\t\tthis.handlers = {\n\t\t\t'change.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && e.property.name == 'position') {\n\t\t\t\t\tthis.previous = this.core.current();\n\t\t\t\t\tthis.next = e.property.value;\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace) {\n\t\t\t\t\tthis.swapping = e.type == 'translated';\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'translate.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {\n\t\t\t\t\tthis.swap();\n\t\t\t\t}\n\t\t\t}, this)\n\t\t};\n\n\t\tthis.core.$element.on(this.handlers);\n\t};\n\n\t/**\n\t * Default options.\n\t * @public\n\t */\n\tAnimate.Defaults = {\n\t\tanimateOut: false,\n\t\tanimateIn: false\n\t};\n\n\t/**\n\t * Toggles the animation classes whenever an translations starts.\n\t * @protected\n\t * @returns {Boolean|undefined}\n\t */\n\tAnimate.prototype.swap = function() {\n\n\t\tif (this.core.settings.items !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!$.support.animation || !$.support.transition) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.core.speed(0);\n\n\t\tvar left,\n\t\t\tclear = $.proxy(this.clear, this),\n\t\t\tprevious = this.core.$stage.children().eq(this.previous),\n\t\t\tnext = this.core.$stage.children().eq(this.next),\n\t\t\tincoming = this.core.settings.animateIn,\n\t\t\toutgoing = this.core.settings.animateOut;\n\n\t\tif (this.core.current() === this.previous) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (outgoing) {\n\t\t\tleft = this.core.coordinates(this.previous) - this.core.coordinates(this.next);\n\t\t\tprevious.one($.support.animation.end, clear)\n\t\t\t\t.css( { 'left': left + 'px' } )\n\t\t\t\t.addClass('animated owl-animated-out')\n\t\t\t\t.addClass(outgoing);\n\t\t}\n\n\t\tif (incoming) {\n\t\t\tnext.one($.support.animation.end, clear)\n\t\t\t\t.addClass('animated owl-animated-in')\n\t\t\t\t.addClass(incoming);\n\t\t}\n\t};\n\n\tAnimate.prototype.clear = function(e) {\n\t\t$(e.target).css( { 'left': '' } )\n\t\t\t.removeClass('animated owl-animated-out owl-animated-in')\n\t\t\t.removeClass(this.core.settings.animateIn)\n\t\t\t.removeClass(this.core.settings.animateOut);\n\t\tthis.core.onTransitionEnd();\n\t};\n\n\t/**\n\t * Destroys the plugin.\n\t * @public\n\t */\n\tAnimate.prototype.destroy = function() {\n\t\tvar handler, property;\n\n\t\tfor (handler in this.handlers) {\n\t\t\tthis.core.$element.off(handler, this.handlers[handler]);\n\t\t}\n\t\tfor (property in Object.getOwnPropertyNames(this)) {\n\t\t\ttypeof this[property] != 'function' && (this[property] = null);\n\t\t}\n\t};\n\n\t$.fn.owlCarousel.Constructor.Plugins.Animate = Animate;\n\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n\n/**\n * Autoplay Plugin\n * @version 2.3.4\n * @author Bartosz Wojciechowski\n * @author Artus Kolanowski\n * @author David Deutsch\n * @author Tom De Caluwé\n * @license The MIT License (MIT)\n */\n;(function($, window, document, undefined) {\n\n\t/**\n\t * Creates the autoplay plugin.\n\t * @class The Autoplay Plugin\n\t * @param {Owl} scope - The Owl Carousel\n\t */\n\tvar Autoplay = function(carousel) {\n\t\t/**\n\t\t * Reference to the core.\n\t\t * @protected\n\t\t * @type {Owl}\n\t\t */\n\t\tthis._core = carousel;\n\n\t\t/**\n\t\t * The autoplay timeout id.\n\t\t * @type {Number}\n\t\t */\n\t\tthis._call = null;\n\n\t\t/**\n\t\t * Depending on the state of the plugin, this variable contains either\n\t\t * the start time of the timer or the current timer value if it's\n\t\t * paused. Since we start in a paused state we initialize the timer\n\t\t * value.\n\t\t * @type {Number}\n\t\t */\n\t\tthis._time = 0;\n\n\t\t/**\n\t\t * Stores the timeout currently used.\n\t\t * @type {Number}\n\t\t */\n\t\tthis._timeout = 0;\n\n\t\t/**\n\t\t * Indicates whenever the autoplay is paused.\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._paused = true;\n\n\t\t/**\n\t\t * All event handlers.\n\t\t * @protected\n\t\t * @type {Object}\n\t\t */\n\t\tthis._handlers = {\n\t\t\t'changed.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && e.property.name === 'settings') {\n\t\t\t\t\tif (this._core.settings.autoplay) {\n\t\t\t\t\t\tthis.play();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.stop();\n\t\t\t\t\t}\n\t\t\t\t} else if (e.namespace && e.property.name === 'position' && this._paused) {\n\t\t\t\t\t// Reset the timer. This code is triggered when the position\n\t\t\t\t\t// of the carousel was changed through user interaction.\n\t\t\t\t\tthis._time = 0;\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'initialized.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this._core.settings.autoplay) {\n\t\t\t\t\tthis.play();\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'play.owl.autoplay': $.proxy(function(e, t, s) {\n\t\t\t\tif (e.namespace) {\n\t\t\t\t\tthis.play(t, s);\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'stop.owl.autoplay': $.proxy(function(e) {\n\t\t\t\tif (e.namespace) {\n\t\t\t\t\tthis.stop();\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'mouseover.owl.autoplay': $.proxy(function() {\n\t\t\t\tif (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n\t\t\t\t\tthis.pause();\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'mouseleave.owl.autoplay': $.proxy(function() {\n\t\t\t\tif (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n\t\t\t\t\tthis.play();\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'touchstart.owl.core': $.proxy(function() {\n\t\t\t\tif (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {\n\t\t\t\t\tthis.pause();\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'touchend.owl.core': $.proxy(function() {\n\t\t\t\tif (this._core.settings.autoplayHoverPause) {\n\t\t\t\t\tthis.play();\n\t\t\t\t}\n\t\t\t}, this)\n\t\t};\n\n\t\t// register event handlers\n\t\tthis._core.$element.on(this._handlers);\n\n\t\t// set default options\n\t\tthis._core.options = $.extend({}, Autoplay.Defaults, this._core.options);\n\t};\n\n\t/**\n\t * Default options.\n\t * @public\n\t */\n\tAutoplay.Defaults = {\n\t\tautoplay: false,\n\t\tautoplayTimeout: 5000,\n\t\tautoplayHoverPause: false,\n\t\tautoplaySpeed: false\n\t};\n\n\t/**\n\t * Transition to the next slide and set a timeout for the next transition.\n\t * @private\n\t * @param {Number} [speed] - The animation speed for the animations.\n\t */\n\tAutoplay.prototype._next = function(speed) {\n\t\tthis._call = window.setTimeout(\n\t\t\t$.proxy(this._next, this, speed),\n\t\t\tthis._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read()\n\t\t);\n\n\t\tif (this._core.is('interacting') || document.hidden) {\n\t\t\treturn;\n\t\t}\n\t\tthis._core.next(speed || this._core.settings.autoplaySpeed);\n\t}\n\n\t/**\n\t * Reads the current timer value when the timer is playing.\n\t * @public\n\t */\n\tAutoplay.prototype.read = function() {\n\t\treturn new Date().getTime() - this._time;\n\t};\n\n\t/**\n\t * Starts the autoplay.\n\t * @public\n\t * @param {Number} [timeout] - The interval before the next animation starts.\n\t * @param {Number} [speed] - The animation speed for the animations.\n\t */\n\tAutoplay.prototype.play = function(timeout, speed) {\n\t\tvar elapsed;\n\n\t\tif (!this._core.is('rotating')) {\n\t\t\tthis._core.enter('rotating');\n\t\t}\n\n\t\ttimeout = timeout || this._core.settings.autoplayTimeout;\n\n\t\t// Calculate the elapsed time since the last transition. If the carousel\n\t\t// wasn't playing this calculation will yield zero.\n\t\telapsed = Math.min(this._time % (this._timeout || timeout), timeout);\n\n\t\tif (this._paused) {\n\t\t\t// Start the clock.\n\t\t\tthis._time = this.read();\n\t\t\tthis._paused = false;\n\t\t} else {\n\t\t\t// Clear the active timeout to allow replacement.\n\t\t\twindow.clearTimeout(this._call);\n\t\t}\n\n\t\t// Adjust the origin of the timer to match the new timeout value.\n\t\tthis._time += this.read() % timeout - elapsed;\n\n\t\tthis._timeout = timeout;\n\t\tthis._call = window.setTimeout($.proxy(this._next, this, speed), timeout - elapsed);\n\t};\n\n\t/**\n\t * Stops the autoplay.\n\t * @public\n\t */\n\tAutoplay.prototype.stop = function() {\n\t\tif (this._core.is('rotating')) {\n\t\t\t// Reset the clock.\n\t\t\tthis._time = 0;\n\t\t\tthis._paused = true;\n\n\t\t\twindow.clearTimeout(this._call);\n\t\t\tthis._core.leave('rotating');\n\t\t}\n\t};\n\n\t/**\n\t * Pauses the autoplay.\n\t * @public\n\t */\n\tAutoplay.prototype.pause = function() {\n\t\tif (this._core.is('rotating') && !this._paused) {\n\t\t\t// Pause the clock.\n\t\t\tthis._time = this.read();\n\t\t\tthis._paused = true;\n\n\t\t\twindow.clearTimeout(this._call);\n\t\t}\n\t};\n\n\t/**\n\t * Destroys the plugin.\n\t */\n\tAutoplay.prototype.destroy = function() {\n\t\tvar handler, property;\n\n\t\tthis.stop();\n\n\t\tfor (handler in this._handlers) {\n\t\t\tthis._core.$element.off(handler, this._handlers[handler]);\n\t\t}\n\t\tfor (property in Object.getOwnPropertyNames(this)) {\n\t\t\ttypeof this[property] != 'function' && (this[property] = null);\n\t\t}\n\t};\n\n\t$.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;\n\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n\n/**\n * Navigation Plugin\n * @version 2.3.4\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n;(function($, window, document, undefined) {\n\t'use strict';\n\n\t/**\n\t * Creates the navigation plugin.\n\t * @class The Navigation Plugin\n\t * @param {Owl} carousel - The Owl Carousel.\n\t */\n\tvar Navigation = function(carousel) {\n\t\t/**\n\t\t * Reference to the core.\n\t\t * @protected\n\t\t * @type {Owl}\n\t\t */\n\t\tthis._core = carousel;\n\n\t\t/**\n\t\t * Indicates whether the plugin is initialized or not.\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._initialized = false;\n\n\t\t/**\n\t\t * The current paging indexes.\n\t\t * @protected\n\t\t * @type {Array}\n\t\t */\n\t\tthis._pages = [];\n\n\t\t/**\n\t\t * All DOM elements of the user interface.\n\t\t * @protected\n\t\t * @type {Object}\n\t\t */\n\t\tthis._controls = {};\n\n\t\t/**\n\t\t * Markup for an indicator.\n\t\t * @protected\n\t\t * @type {Array.<String>}\n\t\t */\n\t\tthis._templates = [];\n\n\t\t/**\n\t\t * The carousel element.\n\t\t * @type {jQuery}\n\t\t */\n\t\tthis.$element = this._core.$element;\n\n\t\t/**\n\t\t * Overridden methods of the carousel.\n\t\t * @protected\n\t\t * @type {Object}\n\t\t */\n\t\tthis._overrides = {\n\t\t\tnext: this._core.next,\n\t\t\tprev: this._core.prev,\n\t\t\tto: this._core.to\n\t\t};\n\n\t\t/**\n\t\t * All event handlers.\n\t\t * @protected\n\t\t * @type {Object}\n\t\t */\n\t\tthis._handlers = {\n\t\t\t'prepared.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this._core.settings.dotsData) {\n\t\t\t\t\tthis._templates.push('<div class=\"' + this._core.settings.dotClass + '\">' +\n\t\t\t\t\t\t$(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>');\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'added.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this._core.settings.dotsData) {\n\t\t\t\t\tthis._templates.splice(e.position, 0, this._templates.pop());\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'remove.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this._core.settings.dotsData) {\n\t\t\t\t\tthis._templates.splice(e.position, 1);\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'changed.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && e.property.name == 'position') {\n\t\t\t\t\tthis.draw();\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'initialized.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && !this._initialized) {\n\t\t\t\t\tthis._core.trigger('initialize', null, 'navigation');\n\t\t\t\t\tthis.initialize();\n\t\t\t\t\tthis.update();\n\t\t\t\t\tthis.draw();\n\t\t\t\t\tthis._initialized = true;\n\t\t\t\t\tthis._core.trigger('initialized', null, 'navigation');\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'refreshed.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this._initialized) {\n\t\t\t\t\tthis._core.trigger('refresh', null, 'navigation');\n\t\t\t\t\tthis.update();\n\t\t\t\t\tthis.draw();\n\t\t\t\t\tthis._core.trigger('refreshed', null, 'navigation');\n\t\t\t\t}\n\t\t\t}, this)\n\t\t};\n\n\t\t// set default options\n\t\tthis._core.options = $.extend({}, Navigation.Defaults, this._core.options);\n\n\t\t// register event handlers\n\t\tthis.$element.on(this._handlers);\n\t};\n\n\t/**\n\t * Default options.\n\t * @public\n\t * @todo Rename `slideBy` to `navBy`\n\t */\n\tNavigation.Defaults = {\n\t\tnav: false,\n\t\tnavText: [\n\t\t\t'<span aria-label=\"' + 'Previous' + '\">&#x2039;</span>',\n\t\t\t'<span aria-label=\"' + 'Next' + '\">&#x203a;</span>'\n\t\t],\n\t\tnavSpeed: false,\n\t\tnavElement: 'button type=\"button\" role=\"presentation\"',\n\t\tnavContainer: false,\n\t\tnavContainerClass: 'owl-nav',\n\t\tnavClass: [\n\t\t\t'owl-prev',\n\t\t\t'owl-next'\n\t\t],\n\t\tslideBy: 1,\n\t\tdotClass: 'owl-dot',\n\t\tdotsClass: 'owl-dots',\n\t\tdots: true,\n\t\tdotsEach: false,\n\t\tdotsData: false,\n\t\tdotsSpeed: false,\n\t\tdotsContainer: false\n\t};\n\n\t/**\n\t * Initializes the layout of the plugin and extends the carousel.\n\t * @protected\n\t */\n\tNavigation.prototype.initialize = function() {\n\t\tvar override,\n\t\t\tsettings = this._core.settings;\n\n\t\t// create DOM structure for relative navigation\n\t\tthis._controls.$relative = (settings.navContainer ? $(settings.navContainer)\n\t\t\t: $('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled');\n\n\t\tthis._controls.$previous = $('<' + settings.navElement + '>')\n\t\t\t.addClass(settings.navClass[0])\n\t\t\t.html(settings.navText[0])\n\t\t\t.prependTo(this._controls.$relative)\n\t\t\t.on('click', $.proxy(function(e) {\n\t\t\t\tthis.prev(settings.navSpeed);\n\t\t\t}, this));\n\t\tthis._controls.$next = $('<' + settings.navElement + '>')\n\t\t\t.addClass(settings.navClass[1])\n\t\t\t.html(settings.navText[1])\n\t\t\t.appendTo(this._controls.$relative)\n\t\t\t.on('click', $.proxy(function(e) {\n\t\t\t\tthis.next(settings.navSpeed);\n\t\t\t}, this));\n\n\t\t// create DOM structure for absolute navigation\n\t\tif (!settings.dotsData) {\n\t\t\tthis._templates = [ $('<button role=\"button\">')\n\t\t\t\t.addClass(settings.dotClass)\n\t\t\t\t.append($('<span>'))\n\t\t\t\t.prop('outerHTML') ];\n\t\t}\n\n\t\tthis._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer)\n\t\t\t: $('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled');\n\n\t\tthis._controls.$absolute.on('click', 'button', $.proxy(function(e) {\n\t\t\tvar index = $(e.target).parent().is(this._controls.$absolute)\n\t\t\t\t? $(e.target).index() : $(e.target).parent().index();\n\n\t\t\te.preventDefault();\n\n\t\t\tthis.to(index, settings.dotsSpeed);\n\t\t}, this));\n\n\t\t/*$el.on('focusin', function() {\n\t\t\t$(document).off(\".carousel\");\n\n\t\t\t$(document).on('keydown.carousel', function(e) {\n\t\t\t\tif(e.keyCode == 37) {\n\t\t\t\t\t$el.trigger('prev.owl')\n\t\t\t\t}\n\t\t\t\tif(e.keyCode == 39) {\n\t\t\t\t\t$el.trigger('next.owl')\n\t\t\t\t}\n\t\t\t});\n\t\t});*/\n\n\t\t// override public methods of the carousel\n\t\tfor (override in this._overrides) {\n\t\t\tthis._core[override] = $.proxy(this[override], this);\n\t\t}\n\t};\n\n\t/**\n\t * Destroys the plugin.\n\t * @protected\n\t */\n\tNavigation.prototype.destroy = function() {\n\t\tvar handler, control, property, override, settings;\n\t\tsettings = this._core.settings;\n\n\t\tfor (handler in this._handlers) {\n\t\t\tthis.$element.off(handler, this._handlers[handler]);\n\t\t}\n\t\tfor (control in this._controls) {\n\t\t\tif (control === '$relative' && settings.navContainer) {\n\t\t\t\tthis._controls[control].html('');\n\t\t\t} else {\n\t\t\t\tthis._controls[control].remove();\n\t\t\t}\n\t\t}\n\t\tfor (override in this.overides) {\n\t\t\tthis._core[override] = this._overrides[override];\n\t\t}\n\t\tfor (property in Object.getOwnPropertyNames(this)) {\n\t\t\ttypeof this[property] != 'function' && (this[property] = null);\n\t\t}\n\t};\n\n\t/**\n\t * Updates the internal state.\n\t * @protected\n\t */\n\tNavigation.prototype.update = function() {\n\t\tvar i, j, k,\n\t\t\tlower = this._core.clones().length / 2,\n\t\t\tupper = lower + this._core.items().length,\n\t\t\tmaximum = this._core.maximum(true),\n\t\t\tsettings = this._core.settings,\n\t\t\tsize = settings.center || settings.autoWidth || settings.dotsData\n\t\t\t\t? 1 : settings.dotsEach || settings.items;\n\n\t\tif (settings.slideBy !== 'page') {\n\t\t\tsettings.slideBy = Math.min(settings.slideBy, settings.items);\n\t\t}\n\n\t\tif (settings.dots || settings.slideBy == 'page') {\n\t\t\tthis._pages = [];\n\n\t\t\tfor (i = lower, j = 0, k = 0; i < upper; i++) {\n\t\t\t\tif (j >= size || j === 0) {\n\t\t\t\t\tthis._pages.push({\n\t\t\t\t\t\tstart: Math.min(maximum, i - lower),\n\t\t\t\t\t\tend: i - lower + size - 1\n\t\t\t\t\t});\n\t\t\t\t\tif (Math.min(maximum, i - lower) === maximum) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tj = 0, ++k;\n\t\t\t\t}\n\t\t\t\tj += this._core.mergers(this._core.relative(i));\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Draws the user interface.\n\t * @todo The option `dotsData` wont work.\n\t * @protected\n\t */\n\tNavigation.prototype.draw = function() {\n\t\tvar difference,\n\t\t\tsettings = this._core.settings,\n\t\t\tdisabled = this._core.items().length <= settings.items,\n\t\t\tindex = this._core.relative(this._core.current()),\n\t\t\tloop = settings.loop || settings.rewind;\n\n\t\tthis._controls.$relative.toggleClass('disabled', !settings.nav || disabled);\n\n\t\tif (settings.nav) {\n\t\t\tthis._controls.$previous.toggleClass('disabled', !loop && index <= this._core.minimum(true));\n\t\t\tthis._controls.$next.toggleClass('disabled', !loop && index >= this._core.maximum(true));\n\t\t}\n\n\t\tthis._controls.$absolute.toggleClass('disabled', !settings.dots || disabled);\n\n\t\tif (settings.dots) {\n\t\t\tdifference = this._pages.length - this._controls.$absolute.children().length;\n\n\t\t\tif (settings.dotsData && difference !== 0) {\n\t\t\t\tthis._controls.$absolute.html(this._templates.join(''));\n\t\t\t} else if (difference > 0) {\n\t\t\t\tthis._controls.$absolute.append(new Array(difference + 1).join(this._templates[0]));\n\t\t\t} else if (difference < 0) {\n\t\t\t\tthis._controls.$absolute.children().slice(difference).remove();\n\t\t\t}\n\n\t\t\tthis._controls.$absolute.find('.active').removeClass('active');\n\t\t\tthis._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass('active');\n\t\t}\n\t};\n\n\t/**\n\t * Extends event data.\n\t * @protected\n\t * @param {Event} event - The event object which gets thrown.\n\t */\n\tNavigation.prototype.onTrigger = function(event) {\n\t\tvar settings = this._core.settings;\n\n\t\tevent.page = {\n\t\t\tindex: $.inArray(this.current(), this._pages),\n\t\t\tcount: this._pages.length,\n\t\t\tsize: settings && (settings.center || settings.autoWidth || settings.dotsData\n\t\t\t\t? 1 : settings.dotsEach || settings.items)\n\t\t};\n\t};\n\n\t/**\n\t * Gets the current page position of the carousel.\n\t * @protected\n\t * @returns {Number}\n\t */\n\tNavigation.prototype.current = function() {\n\t\tvar current = this._core.relative(this._core.current());\n\t\treturn $.grep(this._pages, $.proxy(function(page, index) {\n\t\t\treturn page.start <= current && page.end >= current;\n\t\t}, this)).pop();\n\t};\n\n\t/**\n\t * Gets the current succesor/predecessor position.\n\t * @protected\n\t * @returns {Number}\n\t */\n\tNavigation.prototype.getPosition = function(successor) {\n\t\tvar position, length,\n\t\t\tsettings = this._core.settings;\n\n\t\tif (settings.slideBy == 'page') {\n\t\t\tposition = $.inArray(this.current(), this._pages);\n\t\t\tlength = this._pages.length;\n\t\t\tsuccessor ? ++position : --position;\n\t\t\tposition = this._pages[((position % length) + length) % length].start;\n\t\t} else {\n\t\t\tposition = this._core.relative(this._core.current());\n\t\t\tlength = this._core.items().length;\n\t\t\tsuccessor ? position += settings.slideBy : position -= settings.slideBy;\n\t\t}\n\n\t\treturn position;\n\t};\n\n\t/**\n\t * Slides to the next item or page.\n\t * @public\n\t * @param {Number} [speed=false] - The time in milliseconds for the transition.\n\t */\n\tNavigation.prototype.next = function(speed) {\n\t\t$.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);\n\t};\n\n\t/**\n\t * Slides to the previous item or page.\n\t * @public\n\t * @param {Number} [speed=false] - The time in milliseconds for the transition.\n\t */\n\tNavigation.prototype.prev = function(speed) {\n\t\t$.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);\n\t};\n\n\t/**\n\t * Slides to the specified item or page.\n\t * @public\n\t * @param {Number} position - The position of the item or page.\n\t * @param {Number} [speed] - The time in milliseconds for the transition.\n\t * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.\n\t */\n\tNavigation.prototype.to = function(position, speed, standard) {\n\t\tvar length;\n\n\t\tif (!standard && this._pages.length) {\n\t\t\tlength = this._pages.length;\n\t\t\t$.proxy(this._overrides.to, this._core)(this._pages[((position % length) + length) % length].start, speed);\n\t\t} else {\n\t\t\t$.proxy(this._overrides.to, this._core)(position, speed);\n\t\t}\n\t};\n\n\t$.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;\n\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n\n/**\n * Hash Plugin\n * @version 2.3.4\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n;(function($, window, document, undefined) {\n\t'use strict';\n\n\t/**\n\t * Creates the hash plugin.\n\t * @class The Hash Plugin\n\t * @param {Owl} carousel - The Owl Carousel\n\t */\n\tvar Hash = function(carousel) {\n\t\t/**\n\t\t * Reference to the core.\n\t\t * @protected\n\t\t * @type {Owl}\n\t\t */\n\t\tthis._core = carousel;\n\n\t\t/**\n\t\t * Hash index for the items.\n\t\t * @protected\n\t\t * @type {Object}\n\t\t */\n\t\tthis._hashes = {};\n\n\t\t/**\n\t\t * The carousel element.\n\t\t * @type {jQuery}\n\t\t */\n\t\tthis.$element = this._core.$element;\n\n\t\t/**\n\t\t * All event handlers.\n\t\t * @protected\n\t\t * @type {Object}\n\t\t */\n\t\tthis._handlers = {\n\t\t\t'initialized.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && this._core.settings.startPosition === 'URLHash') {\n\t\t\t\t\t$(window).trigger('hashchange.owl.navigation');\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'prepared.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace) {\n\t\t\t\t\tvar hash = $(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash');\n\n\t\t\t\t\tif (!hash) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._hashes[hash] = e.content;\n\t\t\t\t}\n\t\t\t}, this),\n\t\t\t'changed.owl.carousel': $.proxy(function(e) {\n\t\t\t\tif (e.namespace && e.property.name === 'position') {\n\t\t\t\t\tvar current = this._core.items(this._core.relative(this._core.current())),\n\t\t\t\t\t\thash = $.map(this._hashes, function(item, hash) {\n\t\t\t\t\t\t\treturn item === current ? hash : null;\n\t\t\t\t\t\t}).join();\n\n\t\t\t\t\tif (!hash || window.location.hash.slice(1) === hash) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\twindow.location.hash = hash;\n\t\t\t\t}\n\t\t\t}, this)\n\t\t};\n\n\t\t// set default options\n\t\tthis._core.options = $.extend({}, Hash.Defaults, this._core.options);\n\n\t\t// register the event handlers\n\t\tthis.$element.on(this._handlers);\n\n\t\t// register event listener for hash navigation\n\t\t$(window).on('hashchange.owl.navigation', $.proxy(function(e) {\n\t\t\tvar hash = window.location.hash.substring(1),\n\t\t\t\titems = this._core.$stage.children(),\n\t\t\t\tposition = this._hashes[hash] && items.index(this._hashes[hash]);\n\n\t\t\tif (position === undefined || position === this._core.current()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._core.to(this._core.relative(position), false, true);\n\t\t}, this));\n\t};\n\n\t/**\n\t * Default options.\n\t * @public\n\t */\n\tHash.Defaults = {\n\t\tURLhashListener: false\n\t};\n\n\t/**\n\t * Destroys the plugin.\n\t * @public\n\t */\n\tHash.prototype.destroy = function() {\n\t\tvar handler, property;\n\n\t\t$(window).off('hashchange.owl.navigation');\n\n\t\tfor (handler in this._handlers) {\n\t\t\tthis._core.$element.off(handler, this._handlers[handler]);\n\t\t}\n\t\tfor (property in Object.getOwnPropertyNames(this)) {\n\t\t\ttypeof this[property] != 'function' && (this[property] = null);\n\t\t}\n\t};\n\n\t$.fn.owlCarousel.Constructor.Plugins.Hash = Hash;\n\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n\n/**\n * Support Plugin\n *\n * @version 2.3.4\n * @author Vivid Planet Software GmbH\n * @author Artus Kolanowski\n * @author David Deutsch\n * @license The MIT License (MIT)\n */\n;(function($, window, document, undefined) {\n\n\tvar style = $('<support>').get(0).style,\n\t\tprefixes = 'Webkit Moz O ms'.split(' '),\n\t\tevents = {\n\t\t\ttransition: {\n\t\t\t\tend: {\n\t\t\t\t\tWebkitTransition: 'webkitTransitionEnd',\n\t\t\t\t\tMozTransition: 'transitionend',\n\t\t\t\t\tOTransition: 'oTransitionEnd',\n\t\t\t\t\ttransition: 'transitionend'\n\t\t\t\t}\n\t\t\t},\n\t\t\tanimation: {\n\t\t\t\tend: {\n\t\t\t\t\tWebkitAnimation: 'webkitAnimationEnd',\n\t\t\t\t\tMozAnimation: 'animationend',\n\t\t\t\t\tOAnimation: 'oAnimationEnd',\n\t\t\t\t\tanimation: 'animationend'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttests = {\n\t\t\tcsstransforms: function() {\n\t\t\t\treturn !!test('transform');\n\t\t\t},\n\t\t\tcsstransforms3d: function() {\n\t\t\t\treturn !!test('perspective');\n\t\t\t},\n\t\t\tcsstransitions: function() {\n\t\t\t\treturn !!test('transition');\n\t\t\t},\n\t\t\tcssanimations: function() {\n\t\t\t\treturn !!test('animation');\n\t\t\t}\n\t\t};\n\n\tfunction test(property, prefixed) {\n\t\tvar result = false,\n\t\t\tupper = property.charAt(0).toUpperCase() + property.slice(1);\n\n\t\t$.each((property + ' ' + prefixes.join(upper + ' ') + upper).split(' '), function(i, property) {\n\t\t\tif (style[property] !== undefined) {\n\t\t\t\tresult = prefixed ? property : true;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tfunction prefixed(property) {\n\t\treturn test(property, true);\n\t}\n\n\tif (tests.csstransitions()) {\n\t\t/* jshint -W053 */\n\t\t$.support.transition = new String(prefixed('transition'))\n\t\t$.support.transition.end = events.transition.end[ $.support.transition ];\n\t}\n\n\tif (tests.cssanimations()) {\n\t\t/* jshint -W053 */\n\t\t$.support.animation = new String(prefixed('animation'))\n\t\t$.support.animation.end = events.animation.end[ $.support.animation ];\n\t}\n\n\tif (tests.csstransforms()) {\n\t\t/* jshint -W053 */\n\t\t$.support.transform = new String(prefixed('transform'));\n\t\t$.support.transform3d = tests.csstransforms3d();\n\t}\n\n})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(0)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/////    /////    /////    /////\n/////    /////    /////    /////\n/////    /////    /////    /////\n/////    /////    /////    /////\n/////             /////    /////\n/////             /////    /////\n/////    /////    /////    /////\n/////    /////    /////    /////\n         /////    /////\n         /////    /////\n/////    /////    /////    /////\n/////    /////    /////    /////\n/////    /////    /////    /////\n/////    /////    /////    /////\n\n/**\n * ScrollReveal\n * ------------\n * Version : 3.4.0\n * Website : scrollrevealjs.org\n * Repo    : github.com/jlmakes/scrollreveal.js\n * Author  : Julian Lloyd (@jlmakes)\n */\n\n;(function () {\n  'use strict'\n\n  var sr\n  var _requestAnimationFrame\n\n  function ScrollReveal (config) {\n    // Support instantiation without the `new` keyword.\n    if (typeof this === 'undefined' || Object.getPrototypeOf(this) !== ScrollReveal.prototype) {\n      return new ScrollReveal(config)\n    }\n\n    sr = this // Save reference to instance.\n    sr.version = '3.4.0'\n    sr.tools = new Tools() // *required utilities\n\n    if (sr.isSupported()) {\n      sr.tools.extend(sr.defaults, config || {})\n\n      sr.defaults.container = _resolveContainer(sr.defaults)\n\n      sr.store = {\n        elements: {},\n        containers: []\n      }\n\n      sr.sequences = {}\n      sr.history = []\n      sr.uid = 0\n      sr.initialized = false\n    } else if (typeof console !== 'undefined' && console !== null) {\n      // Note: IE9 only supports console if devtools are open.\n      console.log('ScrollReveal is not supported in this browser.')\n    }\n\n    return sr\n  }\n\n  /**\n   * Configuration\n   * -------------\n   * This object signature can be passed directly to the ScrollReveal constructor,\n   * or as the second argument of the `reveal()` method.\n   */\n\n  ScrollReveal.prototype.defaults = {\n    // 'bottom', 'left', 'top', 'right'\n    origin: 'bottom',\n\n    // Can be any valid CSS distance, e.g. '5rem', '10%', '20vw', etc.\n    distance: '20px',\n\n    // Time in milliseconds.\n    duration: 500,\n    delay: 0,\n\n    // Starting angles in degrees, will transition from these values to 0 in all axes.\n    rotate: { x: 0, y: 0, z: 0 },\n\n    // Starting opacity value, before transitioning to the computed opacity.\n    opacity: 0,\n\n    // Starting scale value, will transition from this value to 1\n    scale: 0.9,\n\n    // Accepts any valid CSS easing, e.g. 'ease', 'ease-in-out', 'linear', etc.\n    easing: 'cubic-bezier(0.6, 0.2, 0.1, 1)',\n\n    // `<html>` is the default reveal container. You can pass either:\n    // DOM Node, e.g. document.querySelector('.fooContainer')\n    // Selector, e.g. '.fooContainer'\n    container: window.document.documentElement,\n\n    // true/false to control reveal animations on mobile.\n    mobile: true,\n\n    // true:  reveals occur every time elements become visible\n    // false: reveals occur once as elements become visible\n    reset: false,\n\n    // 'always' — delay for all reveal animations\n    // 'once'   — delay only the first time reveals occur\n    // 'onload' - delay only for animations triggered by first load\n    useDelay: 'always',\n\n    // Change when an element is considered in the viewport. The default value\n    // of 0.20 means 20% of an element must be visible for its reveal to occur.\n    viewFactor: 0.2,\n\n    // Pixel values that alter the container boundaries.\n    // e.g. Set `{ top: 48 }`, if you have a 48px tall fixed toolbar.\n    // --\n    // Visual Aid: https://scrollrevealjs.org/assets/viewoffset.png\n    viewOffset: { top: 0, right: 0, bottom: 0, left: 0 },\n\n    // Callbacks that fire for each triggered element reveal, and reset.\n    beforeReveal: function (domEl) {},\n    beforeReset: function (domEl) {},\n\n    // Callbacks that fire for each completed element reveal, and reset.\n    afterReveal: function (domEl) {},\n    afterReset: function (domEl) {}\n  }\n\n  /**\n   * Check if client supports CSS Transform and CSS Transition.\n   * @return {boolean}\n   */\n  ScrollReveal.prototype.isSupported = function () {\n    var style = document.documentElement.style\n    return 'WebkitTransition' in style && 'WebkitTransform' in style ||\n      'transition' in style && 'transform' in style\n  }\n\n  /**\n   * Creates a reveal set, a group of elements that will animate when they\n   * become visible. If [interval] is provided, a new sequence is created\n   * that will ensure elements reveal in the order they appear in the DOM.\n   *\n   * @param {Node|NodeList|string} [target]   The node, node list or selector to use for animation.\n   * @param {Object}               [config]   Override the defaults for this reveal set.\n   * @param {number}               [interval] Time between sequenced element animations (milliseconds).\n   * @param {boolean}              [sync]     Used internally when updating reveals for async content.\n   *\n   * @return {Object} The current ScrollReveal instance.\n   */\n  ScrollReveal.prototype.reveal = function (target, config, interval, sync) {\n    var container\n    var elements\n    var elem\n    var elemId\n    var sequence\n    var sequenceId\n\n    // No custom configuration was passed, but a sequence interval instead.\n    // let’s shuffle things around to make sure everything works.\n    if (config !== undefined && typeof config === 'number') {\n      interval = config\n      config = {}\n    } else if (config === undefined || config === null) {\n      config = {}\n    }\n\n    container = _resolveContainer(config)\n    elements = _getRevealElements(target, container)\n\n    if (!elements.length) {\n      console.log('ScrollReveal: reveal on \"' + target + '\" failed, no elements found.')\n      return sr\n    }\n\n    // Prepare a new sequence if an interval is passed.\n    if (interval && typeof interval === 'number') {\n      sequenceId = _nextUid()\n\n      sequence = sr.sequences[sequenceId] = {\n        id: sequenceId,\n        interval: interval,\n        elemIds: [],\n        active: false\n      }\n    }\n\n    // Begin main loop to configure ScrollReveal elements.\n    for (var i = 0; i < elements.length; i++) {\n      // Check if the element has already been configured and grab it from the store.\n      elemId = elements[i].getAttribute('data-sr-id')\n      if (elemId) {\n        elem = sr.store.elements[elemId]\n      } else {\n        // Otherwise, let’s do some basic setup.\n        elem = {\n          id: _nextUid(),\n          domEl: elements[i],\n          seen: false,\n          revealing: false\n        }\n        elem.domEl.setAttribute('data-sr-id', elem.id)\n      }\n\n      // Sequence only setup\n      if (sequence) {\n        elem.sequence = {\n          id: sequence.id,\n          index: sequence.elemIds.length\n        }\n\n        sequence.elemIds.push(elem.id)\n      }\n\n      // New or existing element, it’s time to update its configuration, styles,\n      // and send the updates to our store.\n      _configure(elem, config, container)\n      _style(elem)\n      _updateStore(elem)\n\n      // We need to make sure elements are set to visibility: visible, even when\n      // on mobile and `config.mobile === false`, or if unsupported.\n      if (sr.tools.isMobile() && !elem.config.mobile || !sr.isSupported()) {\n        elem.domEl.setAttribute('style', elem.styles.inline)\n        elem.disabled = true\n      } else if (!elem.revealing) {\n        // Otherwise, proceed normally.\n        elem.domEl.setAttribute('style',\n          elem.styles.inline +\n          elem.styles.transform.initial\n        )\n      }\n    }\n\n    // Each `reveal()` is recorded so that when calling `sync()` while working\n    // with asynchronously loaded content, it can re-trace your steps but with\n    // all your new elements now in the DOM.\n\n    // Since `reveal()` is called internally by `sync()`, we don’t want to\n    // record or intiialize each reveal during syncing.\n    if (!sync && sr.isSupported()) {\n      _record(target, config, interval)\n\n      // We push initialization to the event queue using setTimeout, so that we can\n      // give ScrollReveal room to process all reveal calls before putting things into motion.\n      // --\n      // Philip Roberts - What the heck is the event loop anyway? (JSConf EU 2014)\n      // https://www.youtube.com/watch?v=8aGhZQkoFbQ\n      if (sr.initTimeout) {\n        window.clearTimeout(sr.initTimeout)\n      }\n      sr.initTimeout = window.setTimeout(_init, 0)\n    }\n\n    return sr\n  }\n\n  /**\n   * Re-runs `reveal()` for each record stored in history, effectively capturing\n   * any content loaded asynchronously that matches existing reveal set targets.\n   * @return {Object} The current ScrollReveal instance.\n   */\n  ScrollReveal.prototype.sync = function () {\n    if (sr.history.length && sr.isSupported()) {\n      for (var i = 0; i < sr.history.length; i++) {\n        var record = sr.history[i]\n        sr.reveal(record.target, record.config, record.interval, true)\n      }\n      _init()\n    } else {\n      console.log('ScrollReveal: sync failed, no reveals found.')\n    }\n    return sr\n  }\n\n  /**\n   * Private Methods\n   * ---------------\n   */\n\n  function _resolveContainer (config) {\n    if (config && config.container) {\n      if (typeof config.container === 'string') {\n        return window.document.documentElement.querySelector(config.container)\n      } else if (sr.tools.isNode(config.container)) {\n        return config.container\n      } else {\n        console.log('ScrollReveal: invalid container \"' + config.container + '\" provided.')\n        console.log('ScrollReveal: falling back to default container.')\n      }\n    }\n    return sr.defaults.container\n  }\n\n  /**\n   * check to see if a node or node list was passed in as the target,\n   * otherwise query the container using target as a selector.\n   *\n   * @param {Node|NodeList|string} [target]    client input for reveal target.\n   * @param {Node}                 [container] parent element for selector queries.\n   *\n   * @return {array} elements to be revealed.\n   */\n  function _getRevealElements (target, container) {\n    if (typeof target === 'string') {\n      return Array.prototype.slice.call(container.querySelectorAll(target))\n    } else if (sr.tools.isNode(target)) {\n      return [target]\n    } else if (sr.tools.isNodeList(target)) {\n      return Array.prototype.slice.call(target)\n    } else if (Array.isArray(target)) {\n      return target.filter(sr.tools.isNode)\n    }\n    return []\n  }\n\n  /**\n   * A consistent way of creating unique IDs.\n   * @returns {number}\n   */\n  function _nextUid () {\n    return ++sr.uid\n  }\n\n  function _configure (elem, config, container) {\n    // If a container was passed as a part of the config object,\n    // let’s overwrite it with the resolved container passed in.\n    if (config.container) config.container = container\n    // If the element hasn’t already been configured, let’s use a clone of the\n    // defaults extended by the configuration passed as the second argument.\n    if (!elem.config) {\n      elem.config = sr.tools.extendClone(sr.defaults, config)\n    } else {\n      // Otherwise, let’s use a clone of the existing element configuration extended\n      // by the configuration passed as the second argument.\n      elem.config = sr.tools.extendClone(elem.config, config)\n    }\n\n    // Infer CSS Transform axis from origin string.\n    if (elem.config.origin === 'top' || elem.config.origin === 'bottom') {\n      elem.config.axis = 'Y'\n    } else {\n      elem.config.axis = 'X'\n    }\n  }\n\n  function _style (elem) {\n    var computed = window.getComputedStyle(elem.domEl)\n\n    if (!elem.styles) {\n      elem.styles = {\n        transition: {},\n        transform: {},\n        computed: {}\n      }\n\n      // Capture any existing inline styles, and add our visibility override.\n      // --\n      // See section 4.2. in the Documentation:\n      // https://github.com/jlmakes/scrollreveal.js#42-improve-user-experience\n      elem.styles.inline = elem.domEl.getAttribute('style') || ''\n      elem.styles.inline += '; visibility: visible; '\n\n      // grab the elements existing opacity.\n      elem.styles.computed.opacity = computed.opacity\n\n      // grab the elements existing transitions.\n      if (!computed.transition || computed.transition === 'all 0s ease 0s') {\n        elem.styles.computed.transition = ''\n      } else {\n        elem.styles.computed.transition = computed.transition + ', '\n      }\n    }\n\n    // Create transition styles\n    elem.styles.transition.instant = _generateTransition(elem, 0)\n    elem.styles.transition.delayed = _generateTransition(elem, elem.config.delay)\n\n    // Generate transform styles, first with the webkit prefix.\n    elem.styles.transform.initial = ' -webkit-transform:'\n    elem.styles.transform.target = ' -webkit-transform:'\n    _generateTransform(elem)\n\n    // And again without any prefix.\n    elem.styles.transform.initial += 'transform:'\n    elem.styles.transform.target += 'transform:'\n    _generateTransform(elem)\n  }\n\n  function _generateTransition (elem, delay) {\n    var config = elem.config\n\n    return '-webkit-transition: ' + elem.styles.computed.transition +\n      '-webkit-transform ' + config.duration / 1000 + 's ' +\n      config.easing + ' ' +\n      delay / 1000 + 's, opacity ' +\n      config.duration / 1000 + 's ' +\n      config.easing + ' ' +\n      delay / 1000 + 's; ' +\n\n      'transition: ' + elem.styles.computed.transition +\n      'transform ' + config.duration / 1000 + 's ' +\n      config.easing + ' ' +\n      delay / 1000 + 's, opacity ' +\n      config.duration / 1000 + 's ' +\n      config.easing + ' ' +\n      delay / 1000 + 's; '\n  }\n\n  function _generateTransform (elem) {\n    var config = elem.config\n    var cssDistance\n    var transform = elem.styles.transform\n\n    // Let’s make sure our our pixel distances are negative for top and left.\n    // e.g. origin = 'top' and distance = '25px' starts at `top: -25px` in CSS.\n    if (config.origin === 'top' || config.origin === 'left') {\n      cssDistance = /^-/.test(config.distance)\n        ? config.distance.substr(1)\n        : '-' + config.distance\n    } else {\n      cssDistance = config.distance\n    }\n\n    if (parseInt(config.distance)) {\n      transform.initial += ' translate' + config.axis + '(' + cssDistance + ')'\n      transform.target += ' translate' + config.axis + '(0)'\n    }\n    if (config.scale) {\n      transform.initial += ' scale(' + config.scale + ')'\n      transform.target += ' scale(1)'\n    }\n    if (config.rotate.x) {\n      transform.initial += ' rotateX(' + config.rotate.x + 'deg)'\n      transform.target += ' rotateX(0)'\n    }\n    if (config.rotate.y) {\n      transform.initial += ' rotateY(' + config.rotate.y + 'deg)'\n      transform.target += ' rotateY(0)'\n    }\n    if (config.rotate.z) {\n      transform.initial += ' rotateZ(' + config.rotate.z + 'deg)'\n      transform.target += ' rotateZ(0)'\n    }\n    transform.initial += '; opacity: ' + config.opacity + ';'\n    transform.target += '; opacity: ' + elem.styles.computed.opacity + ';'\n  }\n\n  function _updateStore (elem) {\n    var container = elem.config.container\n\n    // If this element’s container isn’t already in the store, let’s add it.\n    if (container && sr.store.containers.indexOf(container) === -1) {\n      sr.store.containers.push(elem.config.container)\n    }\n\n    // Update the element stored with our new element.\n    sr.store.elements[elem.id] = elem\n  }\n\n  function _record (target, config, interval) {\n    // Save the `reveal()` arguments that triggered this `_record()` call, so we\n    // can re-trace our steps when calling the `sync()` method.\n    var record = {\n      target: target,\n      config: config,\n      interval: interval\n    }\n    sr.history.push(record)\n  }\n\n  function _init () {\n    if (sr.isSupported()) {\n      // Initial animate call triggers valid reveal animations on first load.\n      // Subsequent animate calls are made inside the event handler.\n      _animate()\n\n      // Then we loop through all container nodes in the store and bind event\n      // listeners to each.\n      for (var i = 0; i < sr.store.containers.length; i++) {\n        sr.store.containers[i].addEventListener('scroll', _handler)\n        sr.store.containers[i].addEventListener('resize', _handler)\n      }\n\n      // Let’s also do a one-time binding of window event listeners.\n      if (!sr.initialized) {\n        window.addEventListener('scroll', _handler)\n        window.addEventListener('resize', _handler)\n        sr.initialized = true\n      }\n    }\n    return sr\n  }\n\n  function _handler () {\n    _requestAnimationFrame(_animate)\n  }\n\n  function _setActiveSequences () {\n    var active\n    var elem\n    var elemId\n    var sequence\n\n    // Loop through all sequences\n    sr.tools.forOwn(sr.sequences, function (sequenceId) {\n      sequence = sr.sequences[sequenceId]\n      active = false\n\n      // For each sequenced elemenet, let’s check visibility and if\n      // any are visible, set it’s sequence to active.\n      for (var i = 0; i < sequence.elemIds.length; i++) {\n        elemId = sequence.elemIds[i]\n        elem = sr.store.elements[elemId]\n        if (_isElemVisible(elem) && !active) {\n          active = true\n        }\n      }\n\n      sequence.active = active\n    })\n  }\n\n  function _animate () {\n    var delayed\n    var elem\n\n    _setActiveSequences()\n\n    // Loop through all elements in the store\n    sr.tools.forOwn(sr.store.elements, function (elemId) {\n      elem = sr.store.elements[elemId]\n      delayed = _shouldUseDelay(elem)\n\n      // Let’s see if we should revealand if so,\n      // trigger the `beforeReveal` callback and\n      // determine whether or not to use delay.\n      if (_shouldReveal(elem)) {\n        elem.config.beforeReveal(elem.domEl)\n        if (delayed) {\n          elem.domEl.setAttribute('style',\n            elem.styles.inline +\n            elem.styles.transform.target +\n            elem.styles.transition.delayed\n          )\n        } else {\n          elem.domEl.setAttribute('style',\n            elem.styles.inline +\n            elem.styles.transform.target +\n            elem.styles.transition.instant\n          )\n        }\n\n        // Let’s queue the `afterReveal` callback\n        // and mark the element as seen and revealing.\n        _queueCallback('reveal', elem, delayed)\n        elem.revealing = true\n        elem.seen = true\n\n        if (elem.sequence) {\n          _queueNextInSequence(elem, delayed)\n        }\n      } else if (_shouldReset(elem)) {\n        //Otherwise reset our element and\n        // trigger the `beforeReset` callback.\n        elem.config.beforeReset(elem.domEl)\n        elem.domEl.setAttribute('style',\n          elem.styles.inline +\n          elem.styles.transform.initial +\n          elem.styles.transition.instant\n        )\n        // And queue the `afterReset` callback.\n        _queueCallback('reset', elem)\n        elem.revealing = false\n      }\n    })\n  }\n\n  function _queueNextInSequence (elem, delayed) {\n    var elapsed = 0\n    var delay = 0\n    var sequence = sr.sequences[elem.sequence.id]\n\n    // We’re processing a sequenced element, so let's block other elements in this sequence.\n    sequence.blocked = true\n\n    // Since we’re triggering animations a part of a sequence after animations on first load,\n    // we need to check for that condition and explicitly add the delay to our timer.\n    if (delayed && elem.config.useDelay === 'onload') {\n      delay = elem.config.delay\n    }\n\n    // If a sequence timer is already running, capture the elapsed time and clear it.\n    if (elem.sequence.timer) {\n      elapsed = Math.abs(elem.sequence.timer.started - new Date())\n      window.clearTimeout(elem.sequence.timer)\n    }\n\n    // Start a new timer.\n    elem.sequence.timer = { started: new Date() }\n    elem.sequence.timer.clock = window.setTimeout(function () {\n      // Sequence interval has passed, so unblock the sequence and re-run the handler.\n      sequence.blocked = false\n      elem.sequence.timer = null\n      _handler()\n    }, Math.abs(sequence.interval) + delay - elapsed)\n  }\n\n  function _queueCallback (type, elem, delayed) {\n    var elapsed = 0\n    var duration = 0\n    var callback = 'after'\n\n    // Check which callback we’re working with.\n    switch (type) {\n      case 'reveal':\n        duration = elem.config.duration\n        if (delayed) {\n          duration += elem.config.delay\n        }\n        callback += 'Reveal'\n        break\n\n      case 'reset':\n        duration = elem.config.duration\n        callback += 'Reset'\n        break\n    }\n\n    // If a timer is already running, capture the elapsed time and clear it.\n    if (elem.timer) {\n      elapsed = Math.abs(elem.timer.started - new Date())\n      window.clearTimeout(elem.timer.clock)\n    }\n\n    // Start a new timer.\n    elem.timer = { started: new Date() }\n    elem.timer.clock = window.setTimeout(function () {\n      // The timer completed, so let’s fire the callback and null the timer.\n      elem.config[callback](elem.domEl)\n      elem.timer = null\n    }, duration - elapsed)\n  }\n\n  function _shouldReveal (elem) {\n    if (elem.sequence) {\n      var sequence = sr.sequences[elem.sequence.id]\n      return sequence.active &&\n        !sequence.blocked &&\n        !elem.revealing &&\n        !elem.disabled\n    }\n    return _isElemVisible(elem) &&\n      !elem.revealing &&\n      !elem.disabled\n  }\n\n  function _shouldUseDelay (elem) {\n    var config = elem.config.useDelay\n    return config === 'always' ||\n      (config === 'onload' && !sr.initialized) ||\n      (config === 'once' && !elem.seen)\n  }\n\n  function _shouldReset (elem) {\n    if (elem.sequence) {\n      var sequence = sr.sequences[elem.sequence.id]\n      return !sequence.active &&\n        elem.config.reset &&\n        elem.revealing &&\n        !elem.disabled\n    }\n    return !_isElemVisible(elem) &&\n      elem.config.reset &&\n      elem.revealing &&\n      !elem.disabled\n  }\n\n  function _getContainer (container) {\n    return {\n      width: container.clientWidth,\n      height: container.clientHeight\n    }\n  }\n\n  function _getScrolled (container) {\n    // Return the container scroll values, plus the its offset.\n    if (container && container !== window.document.documentElement) {\n      var offset = _getOffset(container)\n      return {\n        x: container.scrollLeft + offset.left,\n        y: container.scrollTop + offset.top\n      }\n    } else {\n      // Otherwise, default to the window object’s scroll values.\n      return {\n        x: window.pageXOffset,\n        y: window.pageYOffset\n      }\n    }\n  }\n\n  function _getOffset (domEl) {\n    var offsetTop = 0\n    var offsetLeft = 0\n\n      // Grab the element’s dimensions.\n    var offsetHeight = domEl.offsetHeight\n    var offsetWidth = domEl.offsetWidth\n\n    // Now calculate the distance between the element and its parent, then\n    // again for the parent to its parent, and again etc... until we have the\n    // total distance of the element to the document’s top and left origin.\n    do {\n      if (!isNaN(domEl.offsetTop)) {\n        offsetTop += domEl.offsetTop\n      }\n      if (!isNaN(domEl.offsetLeft)) {\n        offsetLeft += domEl.offsetLeft\n      }\n      domEl = domEl.offsetParent\n    } while (domEl)\n\n    return {\n      top: offsetTop,\n      left: offsetLeft,\n      height: offsetHeight,\n      width: offsetWidth\n    }\n  }\n\n  function _isElemVisible (elem) {\n    var offset = _getOffset(elem.domEl)\n    var container = _getContainer(elem.config.container)\n    var scrolled = _getScrolled(elem.config.container)\n    var vF = elem.config.viewFactor\n\n      // Define the element geometry.\n    var elemHeight = offset.height\n    var elemWidth = offset.width\n    var elemTop = offset.top\n    var elemLeft = offset.left\n    var elemBottom = elemTop + elemHeight\n    var elemRight = elemLeft + elemWidth\n\n    return confirmBounds() || isPositionFixed()\n\n    function confirmBounds () {\n      // Define the element’s functional boundaries using its view factor.\n      var top = elemTop + elemHeight * vF\n      var left = elemLeft + elemWidth * vF\n      var bottom = elemBottom - elemHeight * vF\n      var right = elemRight - elemWidth * vF\n\n      // Define the container functional boundaries using its view offset.\n      var viewTop = scrolled.y + elem.config.viewOffset.top\n      var viewLeft = scrolled.x + elem.config.viewOffset.left\n      var viewBottom = scrolled.y - elem.config.viewOffset.bottom + container.height\n      var viewRight = scrolled.x - elem.config.viewOffset.right + container.width\n\n      return top < viewBottom &&\n        bottom > viewTop &&\n        left < viewRight &&\n        right > viewLeft\n    }\n\n    function isPositionFixed () {\n      return (window.getComputedStyle(elem.domEl).position === 'fixed')\n    }\n  }\n\n  /**\n   * Utilities\n   * ---------\n   */\n\n  function Tools () {}\n\n  Tools.prototype.isObject = function (object) {\n    return object !== null && typeof object === 'object' && object.constructor === Object\n  }\n\n  Tools.prototype.isNode = function (object) {\n    return typeof window.Node === 'object'\n      ? object instanceof window.Node\n      : object && typeof object === 'object' &&\n        typeof object.nodeType === 'number' &&\n        typeof object.nodeName === 'string'\n  }\n\n  Tools.prototype.isNodeList = function (object) {\n    var prototypeToString = Object.prototype.toString.call(object)\n    var regex = /^\\[object (HTMLCollection|NodeList|Object)\\]$/\n\n    return typeof window.NodeList === 'object'\n      ? object instanceof window.NodeList\n      : object && typeof object === 'object' &&\n        regex.test(prototypeToString) &&\n        typeof object.length === 'number' &&\n        (object.length === 0 || this.isNode(object[0]))\n  }\n\n  Tools.prototype.forOwn = function (object, callback) {\n    if (!this.isObject(object)) {\n      throw new TypeError('Expected \"object\", but received \"' + typeof object + '\".')\n    } else {\n      for (var property in object) {\n        if (object.hasOwnProperty(property)) {\n          callback(property)\n        }\n      }\n    }\n  }\n\n  Tools.prototype.extend = function (target, source) {\n    this.forOwn(source, function (property) {\n      if (this.isObject(source[property])) {\n        if (!target[property] || !this.isObject(target[property])) {\n          target[property] = {}\n        }\n        this.extend(target[property], source[property])\n      } else {\n        target[property] = source[property]\n      }\n    }.bind(this))\n    return target\n  }\n\n  Tools.prototype.extendClone = function (target, source) {\n    return this.extend(this.extend({}, target), source)\n  }\n\n  Tools.prototype.isMobile = function () {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n  }\n\n  /**\n   * Polyfills\n   * --------\n   */\n\n  _requestAnimationFrame = window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    function (callback) {\n      window.setTimeout(callback, 1000 / 60)\n    }\n\n  /**\n   * Module Wrapper\n   * --------------\n   */\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n      return ScrollReveal\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = ScrollReveal\n  } else {\n    window.ScrollReveal = ScrollReveal\n  }\n})();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRDovdml0YWxpay9rbGltb3Yvfi9zY3JvbGxyZXZlYWwvZGlzdC9zY3JvbGxyZXZlYWwuanM/M2VjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8vLyAgICAvLy8vLyAgICAvLy8vLyAgICAvLy8vL1xuLy8vLy8gICAgLy8vLy8gICAgLy8vLy8gICAgLy8vLy9cbi8vLy8vICAgIC8vLy8vICAgIC8vLy8vICAgIC8vLy8vXG4vLy8vLyAgICAvLy8vLyAgICAvLy8vLyAgICAvLy8vL1xuLy8vLy8gICAgICAgICAgICAgLy8vLy8gICAgLy8vLy9cbi8vLy8vICAgICAgICAgICAgIC8vLy8vICAgIC8vLy8vXG4vLy8vLyAgICAvLy8vLyAgICAvLy8vLyAgICAvLy8vL1xuLy8vLy8gICAgLy8vLy8gICAgLy8vLy8gICAgLy8vLy9cbiAgICAgICAgIC8vLy8vICAgIC8vLy8vXG4gICAgICAgICAvLy8vLyAgICAvLy8vL1xuLy8vLy8gICAgLy8vLy8gICAgLy8vLy8gICAgLy8vLy9cbi8vLy8vICAgIC8vLy8vICAgIC8vLy8vICAgIC8vLy8vXG4vLy8vLyAgICAvLy8vLyAgICAvLy8vLyAgICAvLy8vL1xuLy8vLy8gICAgLy8vLy8gICAgLy8vLy8gICAgLy8vLy9cblxuLyoqXG4gKiBTY3JvbGxSZXZlYWxcbiAqIC0tLS0tLS0tLS0tLVxuICogVmVyc2lvbiA6IDMuNC4wXG4gKiBXZWJzaXRlIDogc2Nyb2xscmV2ZWFsanMub3JnXG4gKiBSZXBvICAgIDogZ2l0aHViLmNvbS9qbG1ha2VzL3Njcm9sbHJldmVhbC5qc1xuICogQXV0aG9yICA6IEp1bGlhbiBMbG95ZCAoQGpsbWFrZXMpXG4gKi9cblxuOyhmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIHZhciBzclxuICB2YXIgX3JlcXVlc3RBbmltYXRpb25GcmFtZVxuXG4gIGZ1bmN0aW9uIFNjcm9sbFJldmVhbCAoY29uZmlnKSB7XG4gICAgLy8gU3VwcG9ydCBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlIGBuZXdgIGtleXdvcmQuXG4gICAgaWYgKHR5cGVvZiB0aGlzID09PSAndW5kZWZpbmVkJyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykgIT09IFNjcm9sbFJldmVhbC5wcm90b3R5cGUpIHtcbiAgICAgIHJldHVybiBuZXcgU2Nyb2xsUmV2ZWFsKGNvbmZpZylcbiAgICB9XG5cbiAgICBzciA9IHRoaXMgLy8gU2F2ZSByZWZlcmVuY2UgdG8gaW5zdGFuY2UuXG4gICAgc3IudmVyc2lvbiA9ICczLjQuMCdcbiAgICBzci50b29scyA9IG5ldyBUb29scygpIC8vICpyZXF1aXJlZCB1dGlsaXRpZXNcblxuICAgIGlmIChzci5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICBzci50b29scy5leHRlbmQoc3IuZGVmYXVsdHMsIGNvbmZpZyB8fCB7fSlcblxuICAgICAgc3IuZGVmYXVsdHMuY29udGFpbmVyID0gX3Jlc29sdmVDb250YWluZXIoc3IuZGVmYXVsdHMpXG5cbiAgICAgIHNyLnN0b3JlID0ge1xuICAgICAgICBlbGVtZW50czoge30sXG4gICAgICAgIGNvbnRhaW5lcnM6IFtdXG4gICAgICB9XG5cbiAgICAgIHNyLnNlcXVlbmNlcyA9IHt9XG4gICAgICBzci5oaXN0b3J5ID0gW11cbiAgICAgIHNyLnVpZCA9IDBcbiAgICAgIHNyLmluaXRpYWxpemVkID0gZmFsc2VcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlICE9PSBudWxsKSB7XG4gICAgICAvLyBOb3RlOiBJRTkgb25seSBzdXBwb3J0cyBjb25zb2xlIGlmIGRldnRvb2xzIGFyZSBvcGVuLlxuICAgICAgY29uc29sZS5sb2coJ1Njcm9sbFJldmVhbCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3Nlci4nKVxuICAgIH1cblxuICAgIHJldHVybiBzclxuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb25cbiAgICogLS0tLS0tLS0tLS0tLVxuICAgKiBUaGlzIG9iamVjdCBzaWduYXR1cmUgY2FuIGJlIHBhc3NlZCBkaXJlY3RseSB0byB0aGUgU2Nyb2xsUmV2ZWFsIGNvbnN0cnVjdG9yLFxuICAgKiBvciBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IG9mIHRoZSBgcmV2ZWFsKClgIG1ldGhvZC5cbiAgICovXG5cbiAgU2Nyb2xsUmV2ZWFsLnByb3RvdHlwZS5kZWZhdWx0cyA9IHtcbiAgICAvLyAnYm90dG9tJywgJ2xlZnQnLCAndG9wJywgJ3JpZ2h0J1xuICAgIG9yaWdpbjogJ2JvdHRvbScsXG5cbiAgICAvLyBDYW4gYmUgYW55IHZhbGlkIENTUyBkaXN0YW5jZSwgZS5nLiAnNXJlbScsICcxMCUnLCAnMjB2dycsIGV0Yy5cbiAgICBkaXN0YW5jZTogJzIwcHgnLFxuXG4gICAgLy8gVGltZSBpbiBtaWxsaXNlY29uZHMuXG4gICAgZHVyYXRpb246IDUwMCxcbiAgICBkZWxheTogMCxcblxuICAgIC8vIFN0YXJ0aW5nIGFuZ2xlcyBpbiBkZWdyZWVzLCB3aWxsIHRyYW5zaXRpb24gZnJvbSB0aGVzZSB2YWx1ZXMgdG8gMCBpbiBhbGwgYXhlcy5cbiAgICByb3RhdGU6IHsgeDogMCwgeTogMCwgejogMCB9LFxuXG4gICAgLy8gU3RhcnRpbmcgb3BhY2l0eSB2YWx1ZSwgYmVmb3JlIHRyYW5zaXRpb25pbmcgdG8gdGhlIGNvbXB1dGVkIG9wYWNpdHkuXG4gICAgb3BhY2l0eTogMCxcblxuICAgIC8vIFN0YXJ0aW5nIHNjYWxlIHZhbHVlLCB3aWxsIHRyYW5zaXRpb24gZnJvbSB0aGlzIHZhbHVlIHRvIDFcbiAgICBzY2FsZTogMC45LFxuXG4gICAgLy8gQWNjZXB0cyBhbnkgdmFsaWQgQ1NTIGVhc2luZywgZS5nLiAnZWFzZScsICdlYXNlLWluLW91dCcsICdsaW5lYXInLCBldGMuXG4gICAgZWFzaW5nOiAnY3ViaWMtYmV6aWVyKDAuNiwgMC4yLCAwLjEsIDEpJyxcblxuICAgIC8vIGA8aHRtbD5gIGlzIHRoZSBkZWZhdWx0IHJldmVhbCBjb250YWluZXIuIFlvdSBjYW4gcGFzcyBlaXRoZXI6XG4gICAgLy8gRE9NIE5vZGUsIGUuZy4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvb0NvbnRhaW5lcicpXG4gICAgLy8gU2VsZWN0b3IsIGUuZy4gJy5mb29Db250YWluZXInXG4gICAgY29udGFpbmVyOiB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuXG4gICAgLy8gdHJ1ZS9mYWxzZSB0byBjb250cm9sIHJldmVhbCBhbmltYXRpb25zIG9uIG1vYmlsZS5cbiAgICBtb2JpbGU6IHRydWUsXG5cbiAgICAvLyB0cnVlOiAgcmV2ZWFscyBvY2N1ciBldmVyeSB0aW1lIGVsZW1lbnRzIGJlY29tZSB2aXNpYmxlXG4gICAgLy8gZmFsc2U6IHJldmVhbHMgb2NjdXIgb25jZSBhcyBlbGVtZW50cyBiZWNvbWUgdmlzaWJsZVxuICAgIHJlc2V0OiBmYWxzZSxcblxuICAgIC8vICdhbHdheXMnIOKAlCBkZWxheSBmb3IgYWxsIHJldmVhbCBhbmltYXRpb25zXG4gICAgLy8gJ29uY2UnICAg4oCUIGRlbGF5IG9ubHkgdGhlIGZpcnN0IHRpbWUgcmV2ZWFscyBvY2N1clxuICAgIC8vICdvbmxvYWQnIC0gZGVsYXkgb25seSBmb3IgYW5pbWF0aW9ucyB0cmlnZ2VyZWQgYnkgZmlyc3QgbG9hZFxuICAgIHVzZURlbGF5OiAnYWx3YXlzJyxcblxuICAgIC8vIENoYW5nZSB3aGVuIGFuIGVsZW1lbnQgaXMgY29uc2lkZXJlZCBpbiB0aGUgdmlld3BvcnQuIFRoZSBkZWZhdWx0IHZhbHVlXG4gICAgLy8gb2YgMC4yMCBtZWFucyAyMCUgb2YgYW4gZWxlbWVudCBtdXN0IGJlIHZpc2libGUgZm9yIGl0cyByZXZlYWwgdG8gb2NjdXIuXG4gICAgdmlld0ZhY3RvcjogMC4yLFxuXG4gICAgLy8gUGl4ZWwgdmFsdWVzIHRoYXQgYWx0ZXIgdGhlIGNvbnRhaW5lciBib3VuZGFyaWVzLlxuICAgIC8vIGUuZy4gU2V0IGB7IHRvcDogNDggfWAsIGlmIHlvdSBoYXZlIGEgNDhweCB0YWxsIGZpeGVkIHRvb2xiYXIuXG4gICAgLy8gLS1cbiAgICAvLyBWaXN1YWwgQWlkOiBodHRwczovL3Njcm9sbHJldmVhbGpzLm9yZy9hc3NldHMvdmlld29mZnNldC5wbmdcbiAgICB2aWV3T2Zmc2V0OiB7IHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMCwgbGVmdDogMCB9LFxuXG4gICAgLy8gQ2FsbGJhY2tzIHRoYXQgZmlyZSBmb3IgZWFjaCB0cmlnZ2VyZWQgZWxlbWVudCByZXZlYWwsIGFuZCByZXNldC5cbiAgICBiZWZvcmVSZXZlYWw6IGZ1bmN0aW9uIChkb21FbCkge30sXG4gICAgYmVmb3JlUmVzZXQ6IGZ1bmN0aW9uIChkb21FbCkge30sXG5cbiAgICAvLyBDYWxsYmFja3MgdGhhdCBmaXJlIGZvciBlYWNoIGNvbXBsZXRlZCBlbGVtZW50IHJldmVhbCwgYW5kIHJlc2V0LlxuICAgIGFmdGVyUmV2ZWFsOiBmdW5jdGlvbiAoZG9tRWwpIHt9LFxuICAgIGFmdGVyUmVzZXQ6IGZ1bmN0aW9uIChkb21FbCkge31cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBjbGllbnQgc3VwcG9ydHMgQ1NTIFRyYW5zZm9ybSBhbmQgQ1NTIFRyYW5zaXRpb24uXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBTY3JvbGxSZXZlYWwucHJvdG90eXBlLmlzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZVxuICAgIHJldHVybiAnV2Via2l0VHJhbnNpdGlvbicgaW4gc3R5bGUgJiYgJ1dlYmtpdFRyYW5zZm9ybScgaW4gc3R5bGUgfHxcbiAgICAgICd0cmFuc2l0aW9uJyBpbiBzdHlsZSAmJiAndHJhbnNmb3JtJyBpbiBzdHlsZVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSByZXZlYWwgc2V0LCBhIGdyb3VwIG9mIGVsZW1lbnRzIHRoYXQgd2lsbCBhbmltYXRlIHdoZW4gdGhleVxuICAgKiBiZWNvbWUgdmlzaWJsZS4gSWYgW2ludGVydmFsXSBpcyBwcm92aWRlZCwgYSBuZXcgc2VxdWVuY2UgaXMgY3JlYXRlZFxuICAgKiB0aGF0IHdpbGwgZW5zdXJlIGVsZW1lbnRzIHJldmVhbCBpbiB0aGUgb3JkZXIgdGhleSBhcHBlYXIgaW4gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfE5vZGVMaXN0fHN0cmluZ30gW3RhcmdldF0gICBUaGUgbm9kZSwgbm9kZSBsaXN0IG9yIHNlbGVjdG9yIHRvIHVzZSBmb3IgYW5pbWF0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdH0gICAgICAgICAgICAgICBbY29uZmlnXSAgIE92ZXJyaWRlIHRoZSBkZWZhdWx0cyBmb3IgdGhpcyByZXZlYWwgc2V0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gICAgICAgICAgICAgICBbaW50ZXJ2YWxdIFRpbWUgYmV0d2VlbiBzZXF1ZW5jZWQgZWxlbWVudCBhbmltYXRpb25zIChtaWxsaXNlY29uZHMpLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59ICAgICAgICAgICAgICBbc3luY10gICAgIFVzZWQgaW50ZXJuYWxseSB3aGVuIHVwZGF0aW5nIHJldmVhbHMgZm9yIGFzeW5jIGNvbnRlbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGN1cnJlbnQgU2Nyb2xsUmV2ZWFsIGluc3RhbmNlLlxuICAgKi9cbiAgU2Nyb2xsUmV2ZWFsLnByb3RvdHlwZS5yZXZlYWwgPSBmdW5jdGlvbiAodGFyZ2V0LCBjb25maWcsIGludGVydmFsLCBzeW5jKSB7XG4gICAgdmFyIGNvbnRhaW5lclxuICAgIHZhciBlbGVtZW50c1xuICAgIHZhciBlbGVtXG4gICAgdmFyIGVsZW1JZFxuICAgIHZhciBzZXF1ZW5jZVxuICAgIHZhciBzZXF1ZW5jZUlkXG5cbiAgICAvLyBObyBjdXN0b20gY29uZmlndXJhdGlvbiB3YXMgcGFzc2VkLCBidXQgYSBzZXF1ZW5jZSBpbnRlcnZhbCBpbnN0ZWFkLlxuICAgIC8vIGxldOKAmXMgc2h1ZmZsZSB0aGluZ3MgYXJvdW5kIHRvIG1ha2Ugc3VyZSBldmVyeXRoaW5nIHdvcmtzLlxuICAgIGlmIChjb25maWcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgaW50ZXJ2YWwgPSBjb25maWdcbiAgICAgIGNvbmZpZyA9IHt9XG4gICAgfSBlbHNlIGlmIChjb25maWcgPT09IHVuZGVmaW5lZCB8fCBjb25maWcgPT09IG51bGwpIHtcbiAgICAgIGNvbmZpZyA9IHt9XG4gICAgfVxuXG4gICAgY29udGFpbmVyID0gX3Jlc29sdmVDb250YWluZXIoY29uZmlnKVxuICAgIGVsZW1lbnRzID0gX2dldFJldmVhbEVsZW1lbnRzKHRhcmdldCwgY29udGFpbmVyKVxuXG4gICAgaWYgKCFlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdTY3JvbGxSZXZlYWw6IHJldmVhbCBvbiBcIicgKyB0YXJnZXQgKyAnXCIgZmFpbGVkLCBubyBlbGVtZW50cyBmb3VuZC4nKVxuICAgICAgcmV0dXJuIHNyXG4gICAgfVxuXG4gICAgLy8gUHJlcGFyZSBhIG5ldyBzZXF1ZW5jZSBpZiBhbiBpbnRlcnZhbCBpcyBwYXNzZWQuXG4gICAgaWYgKGludGVydmFsICYmIHR5cGVvZiBpbnRlcnZhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHNlcXVlbmNlSWQgPSBfbmV4dFVpZCgpXG5cbiAgICAgIHNlcXVlbmNlID0gc3Iuc2VxdWVuY2VzW3NlcXVlbmNlSWRdID0ge1xuICAgICAgICBpZDogc2VxdWVuY2VJZCxcbiAgICAgICAgaW50ZXJ2YWw6IGludGVydmFsLFxuICAgICAgICBlbGVtSWRzOiBbXSxcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJlZ2luIG1haW4gbG9vcCB0byBjb25maWd1cmUgU2Nyb2xsUmV2ZWFsIGVsZW1lbnRzLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gY29uZmlndXJlZCBhbmQgZ3JhYiBpdCBmcm9tIHRoZSBzdG9yZS5cbiAgICAgIGVsZW1JZCA9IGVsZW1lbnRzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1zci1pZCcpXG4gICAgICBpZiAoZWxlbUlkKSB7XG4gICAgICAgIGVsZW0gPSBzci5zdG9yZS5lbGVtZW50c1tlbGVtSWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UsIGxldOKAmXMgZG8gc29tZSBiYXNpYyBzZXR1cC5cbiAgICAgICAgZWxlbSA9IHtcbiAgICAgICAgICBpZDogX25leHRVaWQoKSxcbiAgICAgICAgICBkb21FbDogZWxlbWVudHNbaV0sXG4gICAgICAgICAgc2VlbjogZmFsc2UsXG4gICAgICAgICAgcmV2ZWFsaW5nOiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGVsZW0uZG9tRWwuc2V0QXR0cmlidXRlKCdkYXRhLXNyLWlkJywgZWxlbS5pZClcbiAgICAgIH1cblxuICAgICAgLy8gU2VxdWVuY2Ugb25seSBzZXR1cFxuICAgICAgaWYgKHNlcXVlbmNlKSB7XG4gICAgICAgIGVsZW0uc2VxdWVuY2UgPSB7XG4gICAgICAgICAgaWQ6IHNlcXVlbmNlLmlkLFxuICAgICAgICAgIGluZGV4OiBzZXF1ZW5jZS5lbGVtSWRzLmxlbmd0aFxuICAgICAgICB9XG5cbiAgICAgICAgc2VxdWVuY2UuZWxlbUlkcy5wdXNoKGVsZW0uaWQpXG4gICAgICB9XG5cbiAgICAgIC8vIE5ldyBvciBleGlzdGluZyBlbGVtZW50LCBpdOKAmXMgdGltZSB0byB1cGRhdGUgaXRzIGNvbmZpZ3VyYXRpb24sIHN0eWxlcyxcbiAgICAgIC8vIGFuZCBzZW5kIHRoZSB1cGRhdGVzIHRvIG91ciBzdG9yZS5cbiAgICAgIF9jb25maWd1cmUoZWxlbSwgY29uZmlnLCBjb250YWluZXIpXG4gICAgICBfc3R5bGUoZWxlbSlcbiAgICAgIF91cGRhdGVTdG9yZShlbGVtKVxuXG4gICAgICAvLyBXZSBuZWVkIHRvIG1ha2Ugc3VyZSBlbGVtZW50cyBhcmUgc2V0IHRvIHZpc2liaWxpdHk6IHZpc2libGUsIGV2ZW4gd2hlblxuICAgICAgLy8gb24gbW9iaWxlIGFuZCBgY29uZmlnLm1vYmlsZSA9PT0gZmFsc2VgLCBvciBpZiB1bnN1cHBvcnRlZC5cbiAgICAgIGlmIChzci50b29scy5pc01vYmlsZSgpICYmICFlbGVtLmNvbmZpZy5tb2JpbGUgfHwgIXNyLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgZWxlbS5kb21FbC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgZWxlbS5zdHlsZXMuaW5saW5lKVxuICAgICAgICBlbGVtLmRpc2FibGVkID0gdHJ1ZVxuICAgICAgfSBlbHNlIGlmICghZWxlbS5yZXZlYWxpbmcpIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBwcm9jZWVkIG5vcm1hbGx5LlxuICAgICAgICBlbGVtLmRvbUVsLnNldEF0dHJpYnV0ZSgnc3R5bGUnLFxuICAgICAgICAgIGVsZW0uc3R5bGVzLmlubGluZSArXG4gICAgICAgICAgZWxlbS5zdHlsZXMudHJhbnNmb3JtLmluaXRpYWxcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEVhY2ggYHJldmVhbCgpYCBpcyByZWNvcmRlZCBzbyB0aGF0IHdoZW4gY2FsbGluZyBgc3luYygpYCB3aGlsZSB3b3JraW5nXG4gICAgLy8gd2l0aCBhc3luY2hyb25vdXNseSBsb2FkZWQgY29udGVudCwgaXQgY2FuIHJlLXRyYWNlIHlvdXIgc3RlcHMgYnV0IHdpdGhcbiAgICAvLyBhbGwgeW91ciBuZXcgZWxlbWVudHMgbm93IGluIHRoZSBET00uXG5cbiAgICAvLyBTaW5jZSBgcmV2ZWFsKClgIGlzIGNhbGxlZCBpbnRlcm5hbGx5IGJ5IGBzeW5jKClgLCB3ZSBkb27igJl0IHdhbnQgdG9cbiAgICAvLyByZWNvcmQgb3IgaW50aWlhbGl6ZSBlYWNoIHJldmVhbCBkdXJpbmcgc3luY2luZy5cbiAgICBpZiAoIXN5bmMgJiYgc3IuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgX3JlY29yZCh0YXJnZXQsIGNvbmZpZywgaW50ZXJ2YWwpXG5cbiAgICAgIC8vIFdlIHB1c2ggaW5pdGlhbGl6YXRpb24gdG8gdGhlIGV2ZW50IHF1ZXVlIHVzaW5nIHNldFRpbWVvdXQsIHNvIHRoYXQgd2UgY2FuXG4gICAgICAvLyBnaXZlIFNjcm9sbFJldmVhbCByb29tIHRvIHByb2Nlc3MgYWxsIHJldmVhbCBjYWxscyBiZWZvcmUgcHV0dGluZyB0aGluZ3MgaW50byBtb3Rpb24uXG4gICAgICAvLyAtLVxuICAgICAgLy8gUGhpbGlwIFJvYmVydHMgLSBXaGF0IHRoZSBoZWNrIGlzIHRoZSBldmVudCBsb29wIGFueXdheT8gKEpTQ29uZiBFVSAyMDE0KVxuICAgICAgLy8gaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj04YUdoWlFrb0ZiUVxuICAgICAgaWYgKHNyLmluaXRUaW1lb3V0KSB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoc3IuaW5pdFRpbWVvdXQpXG4gICAgICB9XG4gICAgICBzci5pbml0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KF9pbml0LCAwKVxuICAgIH1cblxuICAgIHJldHVybiBzclxuICB9XG5cbiAgLyoqXG4gICAqIFJlLXJ1bnMgYHJldmVhbCgpYCBmb3IgZWFjaCByZWNvcmQgc3RvcmVkIGluIGhpc3RvcnksIGVmZmVjdGl2ZWx5IGNhcHR1cmluZ1xuICAgKiBhbnkgY29udGVudCBsb2FkZWQgYXN5bmNocm9ub3VzbHkgdGhhdCBtYXRjaGVzIGV4aXN0aW5nIHJldmVhbCBzZXQgdGFyZ2V0cy5cbiAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY3VycmVudCBTY3JvbGxSZXZlYWwgaW5zdGFuY2UuXG4gICAqL1xuICBTY3JvbGxSZXZlYWwucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNyLmhpc3RvcnkubGVuZ3RoICYmIHNyLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3IuaGlzdG9yeS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcmVjb3JkID0gc3IuaGlzdG9yeVtpXVxuICAgICAgICBzci5yZXZlYWwocmVjb3JkLnRhcmdldCwgcmVjb3JkLmNvbmZpZywgcmVjb3JkLmludGVydmFsLCB0cnVlKVxuICAgICAgfVxuICAgICAgX2luaXQoKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnU2Nyb2xsUmV2ZWFsOiBzeW5jIGZhaWxlZCwgbm8gcmV2ZWFscyBmb3VuZC4nKVxuICAgIH1cbiAgICByZXR1cm4gc3JcbiAgfVxuXG4gIC8qKlxuICAgKiBQcml2YXRlIE1ldGhvZHNcbiAgICogLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIGZ1bmN0aW9uIF9yZXNvbHZlQ29udGFpbmVyIChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5jb250YWluZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLmNvbnRhaW5lciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucXVlcnlTZWxlY3Rvcihjb25maWcuY29udGFpbmVyKVxuICAgICAgfSBlbHNlIGlmIChzci50b29scy5pc05vZGUoY29uZmlnLmNvbnRhaW5lcikpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5jb250YWluZXJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdTY3JvbGxSZXZlYWw6IGludmFsaWQgY29udGFpbmVyIFwiJyArIGNvbmZpZy5jb250YWluZXIgKyAnXCIgcHJvdmlkZWQuJylcbiAgICAgICAgY29uc29sZS5sb2coJ1Njcm9sbFJldmVhbDogZmFsbGluZyBiYWNrIHRvIGRlZmF1bHQgY29udGFpbmVyLicpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzci5kZWZhdWx0cy5jb250YWluZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBjaGVjayB0byBzZWUgaWYgYSBub2RlIG9yIG5vZGUgbGlzdCB3YXMgcGFzc2VkIGluIGFzIHRoZSB0YXJnZXQsXG4gICAqIG90aGVyd2lzZSBxdWVyeSB0aGUgY29udGFpbmVyIHVzaW5nIHRhcmdldCBhcyBhIHNlbGVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV8Tm9kZUxpc3R8c3RyaW5nfSBbdGFyZ2V0XSAgICBjbGllbnQgaW5wdXQgZm9yIHJldmVhbCB0YXJnZXQuXG4gICAqIEBwYXJhbSB7Tm9kZX0gICAgICAgICAgICAgICAgIFtjb250YWluZXJdIHBhcmVudCBlbGVtZW50IGZvciBzZWxlY3RvciBxdWVyaWVzLlxuICAgKlxuICAgKiBAcmV0dXJuIHthcnJheX0gZWxlbWVudHMgdG8gYmUgcmV2ZWFsZWQuXG4gICAqL1xuICBmdW5jdGlvbiBfZ2V0UmV2ZWFsRWxlbWVudHMgKHRhcmdldCwgY29udGFpbmVyKSB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0KSlcbiAgICB9IGVsc2UgaWYgKHNyLnRvb2xzLmlzTm9kZSh0YXJnZXQpKSB7XG4gICAgICByZXR1cm4gW3RhcmdldF1cbiAgICB9IGVsc2UgaWYgKHNyLnRvb2xzLmlzTm9kZUxpc3QodGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRhcmdldClcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIHRhcmdldC5maWx0ZXIoc3IudG9vbHMuaXNOb2RlKVxuICAgIH1cbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBBIGNvbnNpc3RlbnQgd2F5IG9mIGNyZWF0aW5nIHVuaXF1ZSBJRHMuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBmdW5jdGlvbiBfbmV4dFVpZCAoKSB7XG4gICAgcmV0dXJuICsrc3IudWlkXG4gIH1cblxuICBmdW5jdGlvbiBfY29uZmlndXJlIChlbGVtLCBjb25maWcsIGNvbnRhaW5lcikge1xuICAgIC8vIElmIGEgY29udGFpbmVyIHdhcyBwYXNzZWQgYXMgYSBwYXJ0IG9mIHRoZSBjb25maWcgb2JqZWN0LFxuICAgIC8vIGxldOKAmXMgb3ZlcndyaXRlIGl0IHdpdGggdGhlIHJlc29sdmVkIGNvbnRhaW5lciBwYXNzZWQgaW4uXG4gICAgaWYgKGNvbmZpZy5jb250YWluZXIpIGNvbmZpZy5jb250YWluZXIgPSBjb250YWluZXJcbiAgICAvLyBJZiB0aGUgZWxlbWVudCBoYXNu4oCZdCBhbHJlYWR5IGJlZW4gY29uZmlndXJlZCwgbGV04oCZcyB1c2UgYSBjbG9uZSBvZiB0aGVcbiAgICAvLyBkZWZhdWx0cyBleHRlbmRlZCBieSB0aGUgY29uZmlndXJhdGlvbiBwYXNzZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgICBpZiAoIWVsZW0uY29uZmlnKSB7XG4gICAgICBlbGVtLmNvbmZpZyA9IHNyLnRvb2xzLmV4dGVuZENsb25lKHNyLmRlZmF1bHRzLCBjb25maWcpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgbGV04oCZcyB1c2UgYSBjbG9uZSBvZiB0aGUgZXhpc3RpbmcgZWxlbWVudCBjb25maWd1cmF0aW9uIGV4dGVuZGVkXG4gICAgICAvLyBieSB0aGUgY29uZmlndXJhdGlvbiBwYXNzZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgICAgIGVsZW0uY29uZmlnID0gc3IudG9vbHMuZXh0ZW5kQ2xvbmUoZWxlbS5jb25maWcsIGNvbmZpZylcbiAgICB9XG5cbiAgICAvLyBJbmZlciBDU1MgVHJhbnNmb3JtIGF4aXMgZnJvbSBvcmlnaW4gc3RyaW5nLlxuICAgIGlmIChlbGVtLmNvbmZpZy5vcmlnaW4gPT09ICd0b3AnIHx8IGVsZW0uY29uZmlnLm9yaWdpbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIGVsZW0uY29uZmlnLmF4aXMgPSAnWSdcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbS5jb25maWcuYXhpcyA9ICdYJ1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9zdHlsZSAoZWxlbSkge1xuICAgIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW0uZG9tRWwpXG5cbiAgICBpZiAoIWVsZW0uc3R5bGVzKSB7XG4gICAgICBlbGVtLnN0eWxlcyA9IHtcbiAgICAgICAgdHJhbnNpdGlvbjoge30sXG4gICAgICAgIHRyYW5zZm9ybToge30sXG4gICAgICAgIGNvbXB1dGVkOiB7fVxuICAgICAgfVxuXG4gICAgICAvLyBDYXB0dXJlIGFueSBleGlzdGluZyBpbmxpbmUgc3R5bGVzLCBhbmQgYWRkIG91ciB2aXNpYmlsaXR5IG92ZXJyaWRlLlxuICAgICAgLy8gLS1cbiAgICAgIC8vIFNlZSBzZWN0aW9uIDQuMi4gaW4gdGhlIERvY3VtZW50YXRpb246XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vamxtYWtlcy9zY3JvbGxyZXZlYWwuanMjNDItaW1wcm92ZS11c2VyLWV4cGVyaWVuY2VcbiAgICAgIGVsZW0uc3R5bGVzLmlubGluZSA9IGVsZW0uZG9tRWwuZ2V0QXR0cmlidXRlKCdzdHlsZScpIHx8ICcnXG4gICAgICBlbGVtLnN0eWxlcy5pbmxpbmUgKz0gJzsgdmlzaWJpbGl0eTogdmlzaWJsZTsgJ1xuXG4gICAgICAvLyBncmFiIHRoZSBlbGVtZW50cyBleGlzdGluZyBvcGFjaXR5LlxuICAgICAgZWxlbS5zdHlsZXMuY29tcHV0ZWQub3BhY2l0eSA9IGNvbXB1dGVkLm9wYWNpdHlcblxuICAgICAgLy8gZ3JhYiB0aGUgZWxlbWVudHMgZXhpc3RpbmcgdHJhbnNpdGlvbnMuXG4gICAgICBpZiAoIWNvbXB1dGVkLnRyYW5zaXRpb24gfHwgY29tcHV0ZWQudHJhbnNpdGlvbiA9PT0gJ2FsbCAwcyBlYXNlIDBzJykge1xuICAgICAgICBlbGVtLnN0eWxlcy5jb21wdXRlZC50cmFuc2l0aW9uID0gJydcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW0uc3R5bGVzLmNvbXB1dGVkLnRyYW5zaXRpb24gPSBjb21wdXRlZC50cmFuc2l0aW9uICsgJywgJ1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSB0cmFuc2l0aW9uIHN0eWxlc1xuICAgIGVsZW0uc3R5bGVzLnRyYW5zaXRpb24uaW5zdGFudCA9IF9nZW5lcmF0ZVRyYW5zaXRpb24oZWxlbSwgMClcbiAgICBlbGVtLnN0eWxlcy50cmFuc2l0aW9uLmRlbGF5ZWQgPSBfZ2VuZXJhdGVUcmFuc2l0aW9uKGVsZW0sIGVsZW0uY29uZmlnLmRlbGF5KVxuXG4gICAgLy8gR2VuZXJhdGUgdHJhbnNmb3JtIHN0eWxlcywgZmlyc3Qgd2l0aCB0aGUgd2Via2l0IHByZWZpeC5cbiAgICBlbGVtLnN0eWxlcy50cmFuc2Zvcm0uaW5pdGlhbCA9ICcgLXdlYmtpdC10cmFuc2Zvcm06J1xuICAgIGVsZW0uc3R5bGVzLnRyYW5zZm9ybS50YXJnZXQgPSAnIC13ZWJraXQtdHJhbnNmb3JtOidcbiAgICBfZ2VuZXJhdGVUcmFuc2Zvcm0oZWxlbSlcblxuICAgIC8vIEFuZCBhZ2FpbiB3aXRob3V0IGFueSBwcmVmaXguXG4gICAgZWxlbS5zdHlsZXMudHJhbnNmb3JtLmluaXRpYWwgKz0gJ3RyYW5zZm9ybTonXG4gICAgZWxlbS5zdHlsZXMudHJhbnNmb3JtLnRhcmdldCArPSAndHJhbnNmb3JtOidcbiAgICBfZ2VuZXJhdGVUcmFuc2Zvcm0oZWxlbSlcbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZW5lcmF0ZVRyYW5zaXRpb24gKGVsZW0sIGRlbGF5KSB7XG4gICAgdmFyIGNvbmZpZyA9IGVsZW0uY29uZmlnXG5cbiAgICByZXR1cm4gJy13ZWJraXQtdHJhbnNpdGlvbjogJyArIGVsZW0uc3R5bGVzLmNvbXB1dGVkLnRyYW5zaXRpb24gK1xuICAgICAgJy13ZWJraXQtdHJhbnNmb3JtICcgKyBjb25maWcuZHVyYXRpb24gLyAxMDAwICsgJ3MgJyArXG4gICAgICBjb25maWcuZWFzaW5nICsgJyAnICtcbiAgICAgIGRlbGF5IC8gMTAwMCArICdzLCBvcGFjaXR5ICcgK1xuICAgICAgY29uZmlnLmR1cmF0aW9uIC8gMTAwMCArICdzICcgK1xuICAgICAgY29uZmlnLmVhc2luZyArICcgJyArXG4gICAgICBkZWxheSAvIDEwMDAgKyAnczsgJyArXG5cbiAgICAgICd0cmFuc2l0aW9uOiAnICsgZWxlbS5zdHlsZXMuY29tcHV0ZWQudHJhbnNpdGlvbiArXG4gICAgICAndHJhbnNmb3JtICcgKyBjb25maWcuZHVyYXRpb24gLyAxMDAwICsgJ3MgJyArXG4gICAgICBjb25maWcuZWFzaW5nICsgJyAnICtcbiAgICAgIGRlbGF5IC8gMTAwMCArICdzLCBvcGFjaXR5ICcgK1xuICAgICAgY29uZmlnLmR1cmF0aW9uIC8gMTAwMCArICdzICcgK1xuICAgICAgY29uZmlnLmVhc2luZyArICcgJyArXG4gICAgICBkZWxheSAvIDEwMDAgKyAnczsgJ1xuICB9XG5cbiAgZnVuY3Rpb24gX2dlbmVyYXRlVHJhbnNmb3JtIChlbGVtKSB7XG4gICAgdmFyIGNvbmZpZyA9IGVsZW0uY29uZmlnXG4gICAgdmFyIGNzc0Rpc3RhbmNlXG4gICAgdmFyIHRyYW5zZm9ybSA9IGVsZW0uc3R5bGVzLnRyYW5zZm9ybVxuXG4gICAgLy8gTGV04oCZcyBtYWtlIHN1cmUgb3VyIG91ciBwaXhlbCBkaXN0YW5jZXMgYXJlIG5lZ2F0aXZlIGZvciB0b3AgYW5kIGxlZnQuXG4gICAgLy8gZS5nLiBvcmlnaW4gPSAndG9wJyBhbmQgZGlzdGFuY2UgPSAnMjVweCcgc3RhcnRzIGF0IGB0b3A6IC0yNXB4YCBpbiBDU1MuXG4gICAgaWYgKGNvbmZpZy5vcmlnaW4gPT09ICd0b3AnIHx8IGNvbmZpZy5vcmlnaW4gPT09ICdsZWZ0Jykge1xuICAgICAgY3NzRGlzdGFuY2UgPSAvXi0vLnRlc3QoY29uZmlnLmRpc3RhbmNlKVxuICAgICAgICA/IGNvbmZpZy5kaXN0YW5jZS5zdWJzdHIoMSlcbiAgICAgICAgOiAnLScgKyBjb25maWcuZGlzdGFuY2VcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzRGlzdGFuY2UgPSBjb25maWcuZGlzdGFuY2VcbiAgICB9XG5cbiAgICBpZiAocGFyc2VJbnQoY29uZmlnLmRpc3RhbmNlKSkge1xuICAgICAgdHJhbnNmb3JtLmluaXRpYWwgKz0gJyB0cmFuc2xhdGUnICsgY29uZmlnLmF4aXMgKyAnKCcgKyBjc3NEaXN0YW5jZSArICcpJ1xuICAgICAgdHJhbnNmb3JtLnRhcmdldCArPSAnIHRyYW5zbGF0ZScgKyBjb25maWcuYXhpcyArICcoMCknXG4gICAgfVxuICAgIGlmIChjb25maWcuc2NhbGUpIHtcbiAgICAgIHRyYW5zZm9ybS5pbml0aWFsICs9ICcgc2NhbGUoJyArIGNvbmZpZy5zY2FsZSArICcpJ1xuICAgICAgdHJhbnNmb3JtLnRhcmdldCArPSAnIHNjYWxlKDEpJ1xuICAgIH1cbiAgICBpZiAoY29uZmlnLnJvdGF0ZS54KSB7XG4gICAgICB0cmFuc2Zvcm0uaW5pdGlhbCArPSAnIHJvdGF0ZVgoJyArIGNvbmZpZy5yb3RhdGUueCArICdkZWcpJ1xuICAgICAgdHJhbnNmb3JtLnRhcmdldCArPSAnIHJvdGF0ZVgoMCknXG4gICAgfVxuICAgIGlmIChjb25maWcucm90YXRlLnkpIHtcbiAgICAgIHRyYW5zZm9ybS5pbml0aWFsICs9ICcgcm90YXRlWSgnICsgY29uZmlnLnJvdGF0ZS55ICsgJ2RlZyknXG4gICAgICB0cmFuc2Zvcm0udGFyZ2V0ICs9ICcgcm90YXRlWSgwKSdcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5yb3RhdGUueikge1xuICAgICAgdHJhbnNmb3JtLmluaXRpYWwgKz0gJyByb3RhdGVaKCcgKyBjb25maWcucm90YXRlLnogKyAnZGVnKSdcbiAgICAgIHRyYW5zZm9ybS50YXJnZXQgKz0gJyByb3RhdGVaKDApJ1xuICAgIH1cbiAgICB0cmFuc2Zvcm0uaW5pdGlhbCArPSAnOyBvcGFjaXR5OiAnICsgY29uZmlnLm9wYWNpdHkgKyAnOydcbiAgICB0cmFuc2Zvcm0udGFyZ2V0ICs9ICc7IG9wYWNpdHk6ICcgKyBlbGVtLnN0eWxlcy5jb21wdXRlZC5vcGFjaXR5ICsgJzsnXG4gIH1cblxuICBmdW5jdGlvbiBfdXBkYXRlU3RvcmUgKGVsZW0pIHtcbiAgICB2YXIgY29udGFpbmVyID0gZWxlbS5jb25maWcuY29udGFpbmVyXG5cbiAgICAvLyBJZiB0aGlzIGVsZW1lbnTigJlzIGNvbnRhaW5lciBpc27igJl0IGFscmVhZHkgaW4gdGhlIHN0b3JlLCBsZXTigJlzIGFkZCBpdC5cbiAgICBpZiAoY29udGFpbmVyICYmIHNyLnN0b3JlLmNvbnRhaW5lcnMuaW5kZXhPZihjb250YWluZXIpID09PSAtMSkge1xuICAgICAgc3Iuc3RvcmUuY29udGFpbmVycy5wdXNoKGVsZW0uY29uZmlnLmNvbnRhaW5lcilcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdGhlIGVsZW1lbnQgc3RvcmVkIHdpdGggb3VyIG5ldyBlbGVtZW50LlxuICAgIHNyLnN0b3JlLmVsZW1lbnRzW2VsZW0uaWRdID0gZWxlbVxuICB9XG5cbiAgZnVuY3Rpb24gX3JlY29yZCAodGFyZ2V0LCBjb25maWcsIGludGVydmFsKSB7XG4gICAgLy8gU2F2ZSB0aGUgYHJldmVhbCgpYCBhcmd1bWVudHMgdGhhdCB0cmlnZ2VyZWQgdGhpcyBgX3JlY29yZCgpYCBjYWxsLCBzbyB3ZVxuICAgIC8vIGNhbiByZS10cmFjZSBvdXIgc3RlcHMgd2hlbiBjYWxsaW5nIHRoZSBgc3luYygpYCBtZXRob2QuXG4gICAgdmFyIHJlY29yZCA9IHtcbiAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICBpbnRlcnZhbDogaW50ZXJ2YWxcbiAgICB9XG4gICAgc3IuaGlzdG9yeS5wdXNoKHJlY29yZClcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbml0ICgpIHtcbiAgICBpZiAoc3IuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgLy8gSW5pdGlhbCBhbmltYXRlIGNhbGwgdHJpZ2dlcnMgdmFsaWQgcmV2ZWFsIGFuaW1hdGlvbnMgb24gZmlyc3QgbG9hZC5cbiAgICAgIC8vIFN1YnNlcXVlbnQgYW5pbWF0ZSBjYWxscyBhcmUgbWFkZSBpbnNpZGUgdGhlIGV2ZW50IGhhbmRsZXIuXG4gICAgICBfYW5pbWF0ZSgpXG5cbiAgICAgIC8vIFRoZW4gd2UgbG9vcCB0aHJvdWdoIGFsbCBjb250YWluZXIgbm9kZXMgaW4gdGhlIHN0b3JlIGFuZCBiaW5kIGV2ZW50XG4gICAgICAvLyBsaXN0ZW5lcnMgdG8gZWFjaC5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3Iuc3RvcmUuY29udGFpbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzci5zdG9yZS5jb250YWluZXJzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF9oYW5kbGVyKVxuICAgICAgICBzci5zdG9yZS5jb250YWluZXJzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIF9oYW5kbGVyKVxuICAgICAgfVxuXG4gICAgICAvLyBMZXTigJlzIGFsc28gZG8gYSBvbmUtdGltZSBiaW5kaW5nIG9mIHdpbmRvdyBldmVudCBsaXN0ZW5lcnMuXG4gICAgICBpZiAoIXNyLmluaXRpYWxpemVkKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBfaGFuZGxlcilcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIF9oYW5kbGVyKVxuICAgICAgICBzci5pbml0aWFsaXplZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNyXG4gIH1cblxuICBmdW5jdGlvbiBfaGFuZGxlciAoKSB7XG4gICAgX3JlcXVlc3RBbmltYXRpb25GcmFtZShfYW5pbWF0ZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zZXRBY3RpdmVTZXF1ZW5jZXMgKCkge1xuICAgIHZhciBhY3RpdmVcbiAgICB2YXIgZWxlbVxuICAgIHZhciBlbGVtSWRcbiAgICB2YXIgc2VxdWVuY2VcblxuICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgc2VxdWVuY2VzXG4gICAgc3IudG9vbHMuZm9yT3duKHNyLnNlcXVlbmNlcywgZnVuY3Rpb24gKHNlcXVlbmNlSWQpIHtcbiAgICAgIHNlcXVlbmNlID0gc3Iuc2VxdWVuY2VzW3NlcXVlbmNlSWRdXG4gICAgICBhY3RpdmUgPSBmYWxzZVxuXG4gICAgICAvLyBGb3IgZWFjaCBzZXF1ZW5jZWQgZWxlbWVuZXQsIGxldOKAmXMgY2hlY2sgdmlzaWJpbGl0eSBhbmQgaWZcbiAgICAgIC8vIGFueSBhcmUgdmlzaWJsZSwgc2V0IGl04oCZcyBzZXF1ZW5jZSB0byBhY3RpdmUuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlcXVlbmNlLmVsZW1JZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZWxlbUlkID0gc2VxdWVuY2UuZWxlbUlkc1tpXVxuICAgICAgICBlbGVtID0gc3Iuc3RvcmUuZWxlbWVudHNbZWxlbUlkXVxuICAgICAgICBpZiAoX2lzRWxlbVZpc2libGUoZWxlbSkgJiYgIWFjdGl2ZSkge1xuICAgICAgICAgIGFjdGl2ZSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZXF1ZW5jZS5hY3RpdmUgPSBhY3RpdmVcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gX2FuaW1hdGUgKCkge1xuICAgIHZhciBkZWxheWVkXG4gICAgdmFyIGVsZW1cblxuICAgIF9zZXRBY3RpdmVTZXF1ZW5jZXMoKVxuXG4gICAgLy8gTG9vcCB0aHJvdWdoIGFsbCBlbGVtZW50cyBpbiB0aGUgc3RvcmVcbiAgICBzci50b29scy5mb3JPd24oc3Iuc3RvcmUuZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtSWQpIHtcbiAgICAgIGVsZW0gPSBzci5zdG9yZS5lbGVtZW50c1tlbGVtSWRdXG4gICAgICBkZWxheWVkID0gX3Nob3VsZFVzZURlbGF5KGVsZW0pXG5cbiAgICAgIC8vIExldOKAmXMgc2VlIGlmIHdlIHNob3VsZCByZXZlYWxhbmQgaWYgc28sXG4gICAgICAvLyB0cmlnZ2VyIHRoZSBgYmVmb3JlUmV2ZWFsYCBjYWxsYmFjayBhbmRcbiAgICAgIC8vIGRldGVybWluZSB3aGV0aGVyIG9yIG5vdCB0byB1c2UgZGVsYXkuXG4gICAgICBpZiAoX3Nob3VsZFJldmVhbChlbGVtKSkge1xuICAgICAgICBlbGVtLmNvbmZpZy5iZWZvcmVSZXZlYWwoZWxlbS5kb21FbClcbiAgICAgICAgaWYgKGRlbGF5ZWQpIHtcbiAgICAgICAgICBlbGVtLmRvbUVsLnNldEF0dHJpYnV0ZSgnc3R5bGUnLFxuICAgICAgICAgICAgZWxlbS5zdHlsZXMuaW5saW5lICtcbiAgICAgICAgICAgIGVsZW0uc3R5bGVzLnRyYW5zZm9ybS50YXJnZXQgK1xuICAgICAgICAgICAgZWxlbS5zdHlsZXMudHJhbnNpdGlvbi5kZWxheWVkXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW0uZG9tRWwuc2V0QXR0cmlidXRlKCdzdHlsZScsXG4gICAgICAgICAgICBlbGVtLnN0eWxlcy5pbmxpbmUgK1xuICAgICAgICAgICAgZWxlbS5zdHlsZXMudHJhbnNmb3JtLnRhcmdldCArXG4gICAgICAgICAgICBlbGVtLnN0eWxlcy50cmFuc2l0aW9uLmluc3RhbnRcbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICAvLyBMZXTigJlzIHF1ZXVlIHRoZSBgYWZ0ZXJSZXZlYWxgIGNhbGxiYWNrXG4gICAgICAgIC8vIGFuZCBtYXJrIHRoZSBlbGVtZW50IGFzIHNlZW4gYW5kIHJldmVhbGluZy5cbiAgICAgICAgX3F1ZXVlQ2FsbGJhY2soJ3JldmVhbCcsIGVsZW0sIGRlbGF5ZWQpXG4gICAgICAgIGVsZW0ucmV2ZWFsaW5nID0gdHJ1ZVxuICAgICAgICBlbGVtLnNlZW4gPSB0cnVlXG5cbiAgICAgICAgaWYgKGVsZW0uc2VxdWVuY2UpIHtcbiAgICAgICAgICBfcXVldWVOZXh0SW5TZXF1ZW5jZShlbGVtLCBkZWxheWVkKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKF9zaG91bGRSZXNldChlbGVtKSkge1xuICAgICAgICAvL090aGVyd2lzZSByZXNldCBvdXIgZWxlbWVudCBhbmRcbiAgICAgICAgLy8gdHJpZ2dlciB0aGUgYGJlZm9yZVJlc2V0YCBjYWxsYmFjay5cbiAgICAgICAgZWxlbS5jb25maWcuYmVmb3JlUmVzZXQoZWxlbS5kb21FbClcbiAgICAgICAgZWxlbS5kb21FbC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJyxcbiAgICAgICAgICBlbGVtLnN0eWxlcy5pbmxpbmUgK1xuICAgICAgICAgIGVsZW0uc3R5bGVzLnRyYW5zZm9ybS5pbml0aWFsICtcbiAgICAgICAgICBlbGVtLnN0eWxlcy50cmFuc2l0aW9uLmluc3RhbnRcbiAgICAgICAgKVxuICAgICAgICAvLyBBbmQgcXVldWUgdGhlIGBhZnRlclJlc2V0YCBjYWxsYmFjay5cbiAgICAgICAgX3F1ZXVlQ2FsbGJhY2soJ3Jlc2V0JywgZWxlbSlcbiAgICAgICAgZWxlbS5yZXZlYWxpbmcgPSBmYWxzZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBfcXVldWVOZXh0SW5TZXF1ZW5jZSAoZWxlbSwgZGVsYXllZCkge1xuICAgIHZhciBlbGFwc2VkID0gMFxuICAgIHZhciBkZWxheSA9IDBcbiAgICB2YXIgc2VxdWVuY2UgPSBzci5zZXF1ZW5jZXNbZWxlbS5zZXF1ZW5jZS5pZF1cblxuICAgIC8vIFdl4oCZcmUgcHJvY2Vzc2luZyBhIHNlcXVlbmNlZCBlbGVtZW50LCBzbyBsZXQncyBibG9jayBvdGhlciBlbGVtZW50cyBpbiB0aGlzIHNlcXVlbmNlLlxuICAgIHNlcXVlbmNlLmJsb2NrZWQgPSB0cnVlXG5cbiAgICAvLyBTaW5jZSB3ZeKAmXJlIHRyaWdnZXJpbmcgYW5pbWF0aW9ucyBhIHBhcnQgb2YgYSBzZXF1ZW5jZSBhZnRlciBhbmltYXRpb25zIG9uIGZpcnN0IGxvYWQsXG4gICAgLy8gd2UgbmVlZCB0byBjaGVjayBmb3IgdGhhdCBjb25kaXRpb24gYW5kIGV4cGxpY2l0bHkgYWRkIHRoZSBkZWxheSB0byBvdXIgdGltZXIuXG4gICAgaWYgKGRlbGF5ZWQgJiYgZWxlbS5jb25maWcudXNlRGVsYXkgPT09ICdvbmxvYWQnKSB7XG4gICAgICBkZWxheSA9IGVsZW0uY29uZmlnLmRlbGF5XG4gICAgfVxuXG4gICAgLy8gSWYgYSBzZXF1ZW5jZSB0aW1lciBpcyBhbHJlYWR5IHJ1bm5pbmcsIGNhcHR1cmUgdGhlIGVsYXBzZWQgdGltZSBhbmQgY2xlYXIgaXQuXG4gICAgaWYgKGVsZW0uc2VxdWVuY2UudGltZXIpIHtcbiAgICAgIGVsYXBzZWQgPSBNYXRoLmFicyhlbGVtLnNlcXVlbmNlLnRpbWVyLnN0YXJ0ZWQgLSBuZXcgRGF0ZSgpKVxuICAgICAgd2luZG93LmNsZWFyVGltZW91dChlbGVtLnNlcXVlbmNlLnRpbWVyKVxuICAgIH1cblxuICAgIC8vIFN0YXJ0IGEgbmV3IHRpbWVyLlxuICAgIGVsZW0uc2VxdWVuY2UudGltZXIgPSB7IHN0YXJ0ZWQ6IG5ldyBEYXRlKCkgfVxuICAgIGVsZW0uc2VxdWVuY2UudGltZXIuY2xvY2sgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBTZXF1ZW5jZSBpbnRlcnZhbCBoYXMgcGFzc2VkLCBzbyB1bmJsb2NrIHRoZSBzZXF1ZW5jZSBhbmQgcmUtcnVuIHRoZSBoYW5kbGVyLlxuICAgICAgc2VxdWVuY2UuYmxvY2tlZCA9IGZhbHNlXG4gICAgICBlbGVtLnNlcXVlbmNlLnRpbWVyID0gbnVsbFxuICAgICAgX2hhbmRsZXIoKVxuICAgIH0sIE1hdGguYWJzKHNlcXVlbmNlLmludGVydmFsKSArIGRlbGF5IC0gZWxhcHNlZClcbiAgfVxuXG4gIGZ1bmN0aW9uIF9xdWV1ZUNhbGxiYWNrICh0eXBlLCBlbGVtLCBkZWxheWVkKSB7XG4gICAgdmFyIGVsYXBzZWQgPSAwXG4gICAgdmFyIGR1cmF0aW9uID0gMFxuICAgIHZhciBjYWxsYmFjayA9ICdhZnRlcidcblxuICAgIC8vIENoZWNrIHdoaWNoIGNhbGxiYWNrIHdl4oCZcmUgd29ya2luZyB3aXRoLlxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAncmV2ZWFsJzpcbiAgICAgICAgZHVyYXRpb24gPSBlbGVtLmNvbmZpZy5kdXJhdGlvblxuICAgICAgICBpZiAoZGVsYXllZCkge1xuICAgICAgICAgIGR1cmF0aW9uICs9IGVsZW0uY29uZmlnLmRlbGF5XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2sgKz0gJ1JldmVhbCdcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAncmVzZXQnOlxuICAgICAgICBkdXJhdGlvbiA9IGVsZW0uY29uZmlnLmR1cmF0aW9uXG4gICAgICAgIGNhbGxiYWNrICs9ICdSZXNldCdcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICAvLyBJZiBhIHRpbWVyIGlzIGFscmVhZHkgcnVubmluZywgY2FwdHVyZSB0aGUgZWxhcHNlZCB0aW1lIGFuZCBjbGVhciBpdC5cbiAgICBpZiAoZWxlbS50aW1lcikge1xuICAgICAgZWxhcHNlZCA9IE1hdGguYWJzKGVsZW0udGltZXIuc3RhcnRlZCAtIG5ldyBEYXRlKCkpXG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGVsZW0udGltZXIuY2xvY2spXG4gICAgfVxuXG4gICAgLy8gU3RhcnQgYSBuZXcgdGltZXIuXG4gICAgZWxlbS50aW1lciA9IHsgc3RhcnRlZDogbmV3IERhdGUoKSB9XG4gICAgZWxlbS50aW1lci5jbG9jayA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFRoZSB0aW1lciBjb21wbGV0ZWQsIHNvIGxldOKAmXMgZmlyZSB0aGUgY2FsbGJhY2sgYW5kIG51bGwgdGhlIHRpbWVyLlxuICAgICAgZWxlbS5jb25maWdbY2FsbGJhY2tdKGVsZW0uZG9tRWwpXG4gICAgICBlbGVtLnRpbWVyID0gbnVsbFxuICAgIH0sIGR1cmF0aW9uIC0gZWxhcHNlZClcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zaG91bGRSZXZlYWwgKGVsZW0pIHtcbiAgICBpZiAoZWxlbS5zZXF1ZW5jZSkge1xuICAgICAgdmFyIHNlcXVlbmNlID0gc3Iuc2VxdWVuY2VzW2VsZW0uc2VxdWVuY2UuaWRdXG4gICAgICByZXR1cm4gc2VxdWVuY2UuYWN0aXZlICYmXG4gICAgICAgICFzZXF1ZW5jZS5ibG9ja2VkICYmXG4gICAgICAgICFlbGVtLnJldmVhbGluZyAmJlxuICAgICAgICAhZWxlbS5kaXNhYmxlZFxuICAgIH1cbiAgICByZXR1cm4gX2lzRWxlbVZpc2libGUoZWxlbSkgJiZcbiAgICAgICFlbGVtLnJldmVhbGluZyAmJlxuICAgICAgIWVsZW0uZGlzYWJsZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zaG91bGRVc2VEZWxheSAoZWxlbSkge1xuICAgIHZhciBjb25maWcgPSBlbGVtLmNvbmZpZy51c2VEZWxheVxuICAgIHJldHVybiBjb25maWcgPT09ICdhbHdheXMnIHx8XG4gICAgICAoY29uZmlnID09PSAnb25sb2FkJyAmJiAhc3IuaW5pdGlhbGl6ZWQpIHx8XG4gICAgICAoY29uZmlnID09PSAnb25jZScgJiYgIWVsZW0uc2VlbilcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zaG91bGRSZXNldCAoZWxlbSkge1xuICAgIGlmIChlbGVtLnNlcXVlbmNlKSB7XG4gICAgICB2YXIgc2VxdWVuY2UgPSBzci5zZXF1ZW5jZXNbZWxlbS5zZXF1ZW5jZS5pZF1cbiAgICAgIHJldHVybiAhc2VxdWVuY2UuYWN0aXZlICYmXG4gICAgICAgIGVsZW0uY29uZmlnLnJlc2V0ICYmXG4gICAgICAgIGVsZW0ucmV2ZWFsaW5nICYmXG4gICAgICAgICFlbGVtLmRpc2FibGVkXG4gICAgfVxuICAgIHJldHVybiAhX2lzRWxlbVZpc2libGUoZWxlbSkgJiZcbiAgICAgIGVsZW0uY29uZmlnLnJlc2V0ICYmXG4gICAgICBlbGVtLnJldmVhbGluZyAmJlxuICAgICAgIWVsZW0uZGlzYWJsZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXRDb250YWluZXIgKGNvbnRhaW5lcikge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogY29udGFpbmVyLmNsaWVudFdpZHRoLFxuICAgICAgaGVpZ2h0OiBjb250YWluZXIuY2xpZW50SGVpZ2h0XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2dldFNjcm9sbGVkIChjb250YWluZXIpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGNvbnRhaW5lciBzY3JvbGwgdmFsdWVzLCBwbHVzIHRoZSBpdHMgb2Zmc2V0LlxuICAgIGlmIChjb250YWluZXIgJiYgY29udGFpbmVyICE9PSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gX2dldE9mZnNldChjb250YWluZXIpXG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiBjb250YWluZXIuc2Nyb2xsTGVmdCArIG9mZnNldC5sZWZ0LFxuICAgICAgICB5OiBjb250YWluZXIuc2Nyb2xsVG9wICsgb2Zmc2V0LnRvcFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UsIGRlZmF1bHQgdG8gdGhlIHdpbmRvdyBvYmplY3TigJlzIHNjcm9sbCB2YWx1ZXMuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXRPZmZzZXQgKGRvbUVsKSB7XG4gICAgdmFyIG9mZnNldFRvcCA9IDBcbiAgICB2YXIgb2Zmc2V0TGVmdCA9IDBcblxuICAgICAgLy8gR3JhYiB0aGUgZWxlbWVudOKAmXMgZGltZW5zaW9ucy5cbiAgICB2YXIgb2Zmc2V0SGVpZ2h0ID0gZG9tRWwub2Zmc2V0SGVpZ2h0XG4gICAgdmFyIG9mZnNldFdpZHRoID0gZG9tRWwub2Zmc2V0V2lkdGhcblxuICAgIC8vIE5vdyBjYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIGVsZW1lbnQgYW5kIGl0cyBwYXJlbnQsIHRoZW5cbiAgICAvLyBhZ2FpbiBmb3IgdGhlIHBhcmVudCB0byBpdHMgcGFyZW50LCBhbmQgYWdhaW4gZXRjLi4uIHVudGlsIHdlIGhhdmUgdGhlXG4gICAgLy8gdG90YWwgZGlzdGFuY2Ugb2YgdGhlIGVsZW1lbnQgdG8gdGhlIGRvY3VtZW504oCZcyB0b3AgYW5kIGxlZnQgb3JpZ2luLlxuICAgIGRvIHtcbiAgICAgIGlmICghaXNOYU4oZG9tRWwub2Zmc2V0VG9wKSkge1xuICAgICAgICBvZmZzZXRUb3AgKz0gZG9tRWwub2Zmc2V0VG9wXG4gICAgICB9XG4gICAgICBpZiAoIWlzTmFOKGRvbUVsLm9mZnNldExlZnQpKSB7XG4gICAgICAgIG9mZnNldExlZnQgKz0gZG9tRWwub2Zmc2V0TGVmdFxuICAgICAgfVxuICAgICAgZG9tRWwgPSBkb21FbC5vZmZzZXRQYXJlbnRcbiAgICB9IHdoaWxlIChkb21FbClcblxuICAgIHJldHVybiB7XG4gICAgICB0b3A6IG9mZnNldFRvcCxcbiAgICAgIGxlZnQ6IG9mZnNldExlZnQsXG4gICAgICBoZWlnaHQ6IG9mZnNldEhlaWdodCxcbiAgICAgIHdpZHRoOiBvZmZzZXRXaWR0aFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9pc0VsZW1WaXNpYmxlIChlbGVtKSB7XG4gICAgdmFyIG9mZnNldCA9IF9nZXRPZmZzZXQoZWxlbS5kb21FbClcbiAgICB2YXIgY29udGFpbmVyID0gX2dldENvbnRhaW5lcihlbGVtLmNvbmZpZy5jb250YWluZXIpXG4gICAgdmFyIHNjcm9sbGVkID0gX2dldFNjcm9sbGVkKGVsZW0uY29uZmlnLmNvbnRhaW5lcilcbiAgICB2YXIgdkYgPSBlbGVtLmNvbmZpZy52aWV3RmFjdG9yXG5cbiAgICAgIC8vIERlZmluZSB0aGUgZWxlbWVudCBnZW9tZXRyeS5cbiAgICB2YXIgZWxlbUhlaWdodCA9IG9mZnNldC5oZWlnaHRcbiAgICB2YXIgZWxlbVdpZHRoID0gb2Zmc2V0LndpZHRoXG4gICAgdmFyIGVsZW1Ub3AgPSBvZmZzZXQudG9wXG4gICAgdmFyIGVsZW1MZWZ0ID0gb2Zmc2V0LmxlZnRcbiAgICB2YXIgZWxlbUJvdHRvbSA9IGVsZW1Ub3AgKyBlbGVtSGVpZ2h0XG4gICAgdmFyIGVsZW1SaWdodCA9IGVsZW1MZWZ0ICsgZWxlbVdpZHRoXG5cbiAgICByZXR1cm4gY29uZmlybUJvdW5kcygpIHx8IGlzUG9zaXRpb25GaXhlZCgpXG5cbiAgICBmdW5jdGlvbiBjb25maXJtQm91bmRzICgpIHtcbiAgICAgIC8vIERlZmluZSB0aGUgZWxlbWVudOKAmXMgZnVuY3Rpb25hbCBib3VuZGFyaWVzIHVzaW5nIGl0cyB2aWV3IGZhY3Rvci5cbiAgICAgIHZhciB0b3AgPSBlbGVtVG9wICsgZWxlbUhlaWdodCAqIHZGXG4gICAgICB2YXIgbGVmdCA9IGVsZW1MZWZ0ICsgZWxlbVdpZHRoICogdkZcbiAgICAgIHZhciBib3R0b20gPSBlbGVtQm90dG9tIC0gZWxlbUhlaWdodCAqIHZGXG4gICAgICB2YXIgcmlnaHQgPSBlbGVtUmlnaHQgLSBlbGVtV2lkdGggKiB2RlxuXG4gICAgICAvLyBEZWZpbmUgdGhlIGNvbnRhaW5lciBmdW5jdGlvbmFsIGJvdW5kYXJpZXMgdXNpbmcgaXRzIHZpZXcgb2Zmc2V0LlxuICAgICAgdmFyIHZpZXdUb3AgPSBzY3JvbGxlZC55ICsgZWxlbS5jb25maWcudmlld09mZnNldC50b3BcbiAgICAgIHZhciB2aWV3TGVmdCA9IHNjcm9sbGVkLnggKyBlbGVtLmNvbmZpZy52aWV3T2Zmc2V0LmxlZnRcbiAgICAgIHZhciB2aWV3Qm90dG9tID0gc2Nyb2xsZWQueSAtIGVsZW0uY29uZmlnLnZpZXdPZmZzZXQuYm90dG9tICsgY29udGFpbmVyLmhlaWdodFxuICAgICAgdmFyIHZpZXdSaWdodCA9IHNjcm9sbGVkLnggLSBlbGVtLmNvbmZpZy52aWV3T2Zmc2V0LnJpZ2h0ICsgY29udGFpbmVyLndpZHRoXG5cbiAgICAgIHJldHVybiB0b3AgPCB2aWV3Qm90dG9tICYmXG4gICAgICAgIGJvdHRvbSA+IHZpZXdUb3AgJiZcbiAgICAgICAgbGVmdCA8IHZpZXdSaWdodCAmJlxuICAgICAgICByaWdodCA+IHZpZXdMZWZ0XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNQb3NpdGlvbkZpeGVkICgpIHtcbiAgICAgIHJldHVybiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbS5kb21FbCkucG9zaXRpb24gPT09ICdmaXhlZCcpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFV0aWxpdGllc1xuICAgKiAtLS0tLS0tLS1cbiAgICovXG5cbiAgZnVuY3Rpb24gVG9vbHMgKCkge31cblxuICBUb29scy5wcm90b3R5cGUuaXNPYmplY3QgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IE9iamVjdFxuICB9XG5cbiAgVG9vbHMucHJvdG90eXBlLmlzTm9kZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdy5Ob2RlID09PSAnb2JqZWN0J1xuICAgICAgPyBvYmplY3QgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZVxuICAgICAgOiBvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZydcbiAgfVxuXG4gIFRvb2xzLnByb3RvdHlwZS5pc05vZGVMaXN0ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHZhciBwcm90b3R5cGVUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpXG4gICAgdmFyIHJlZ2V4ID0gL15cXFtvYmplY3QgKEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fE9iamVjdClcXF0kL1xuXG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cuTm9kZUxpc3QgPT09ICdvYmplY3QnXG4gICAgICA/IG9iamVjdCBpbnN0YW5jZW9mIHdpbmRvdy5Ob2RlTGlzdFxuICAgICAgOiBvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgcmVnZXgudGVzdChwcm90b3R5cGVUb1N0cmluZykgJiZcbiAgICAgICAgdHlwZW9mIG9iamVjdC5sZW5ndGggPT09ICdudW1iZXInICYmXG4gICAgICAgIChvYmplY3QubGVuZ3RoID09PSAwIHx8IHRoaXMuaXNOb2RlKG9iamVjdFswXSkpXG4gIH1cblxuICBUb29scy5wcm90b3R5cGUuZm9yT3duID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICBpZiAoIXRoaXMuaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCJvYmplY3RcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHR5cGVvZiBvYmplY3QgKyAnXCIuJylcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBUb29scy5wcm90b3R5cGUuZXh0ZW5kID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gICAgdGhpcy5mb3JPd24oc291cmNlLCBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgIGlmICh0aGlzLmlzT2JqZWN0KHNvdXJjZVtwcm9wZXJ0eV0pKSB7XG4gICAgICAgIGlmICghdGFyZ2V0W3Byb3BlcnR5XSB8fCAhdGhpcy5pc09iamVjdCh0YXJnZXRbcHJvcGVydHldKSkge1xuICAgICAgICAgIHRhcmdldFtwcm9wZXJ0eV0gPSB7fVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXh0ZW5kKHRhcmdldFtwcm9wZXJ0eV0sIHNvdXJjZVtwcm9wZXJ0eV0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRbcHJvcGVydHldID0gc291cmNlW3Byb3BlcnR5XVxuICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSlcbiAgICByZXR1cm4gdGFyZ2V0XG4gIH1cblxuICBUb29scy5wcm90b3R5cGUuZXh0ZW5kQ2xvbmUgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICByZXR1cm4gdGhpcy5leHRlbmQodGhpcy5leHRlbmQoe30sIHRhcmdldCksIHNvdXJjZSlcbiAgfVxuXG4gIFRvb2xzLnByb3RvdHlwZS5pc01vYmlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpXG4gIH1cblxuICAvKipcbiAgICogUG9seWZpbGxzXG4gICAqIC0tLS0tLS0tXG4gICAqL1xuXG4gIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApXG4gICAgfVxuXG4gIC8qKlxuICAgKiBNb2R1bGUgV3JhcHBlclxuICAgKiAtLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFNjcm9sbFJldmVhbFxuICAgIH0pXG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFNjcm9sbFJldmVhbFxuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5TY3JvbGxSZXZlYWwgPSBTY3JvbGxSZXZlYWxcbiAgfVxufSkoKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIEQ6L3ZpdGFsaWsva2xpbW92L34vc2Nyb2xscmV2ZWFsL2Rpc3Qvc2Nyb2xscmV2ZWFsLmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(root, factory) {\n     true ? // AMD. Register as an anonymous module unless amdModuleId is set\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n        return root.svg4everybody = factory();\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : \"object\" == typeof module && module.exports ? // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory() : root.svg4everybody = factory();\n}(this, function() {\n    /*! svg4everybody v2.1.9 | github.com/jonathantneal/svg4everybody */\n    function embed(parent, svg, target) {\n        // if the target exists\n        if (target) {\n            // create a document fragment to hold the contents of the target\n            var fragment = document.createDocumentFragment(), viewBox = !svg.hasAttribute(\"viewBox\") && target.getAttribute(\"viewBox\");\n            // conditionally set the viewBox on the svg\n            viewBox && svg.setAttribute(\"viewBox\", viewBox);\n            // copy the contents of the clone into the fragment\n            for (// clone the target\n            var clone = target.cloneNode(!0); clone.childNodes.length; ) {\n                fragment.appendChild(clone.firstChild);\n            }\n            // append the fragment into the svg\n            parent.appendChild(fragment);\n        }\n    }\n    function loadreadystatechange(xhr) {\n        // listen to changes in the request\n        xhr.onreadystatechange = function() {\n            // if the request is ready\n            if (4 === xhr.readyState) {\n                // get the cached html document\n                var cachedDocument = xhr._cachedDocument;\n                // ensure the cached html document based on the xhr response\n                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(\"\"), \n                cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item\n                xhr._embeds.splice(0).map(function(item) {\n                    // get the cached target\n                    var target = xhr._cachedTarget[item.id];\n                    // ensure the cached target\n                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)), \n                    // embed the target into the svg\n                    embed(item.parent, item.svg, target);\n                });\n            }\n        }, // test the ready state change immediately\n        xhr.onreadystatechange();\n    }\n    function svg4everybody(rawopts) {\n        function oninterval() {\n            // while the index exists in the live <use> collection\n            for (// get the cached <use> index\n            var index = 0; index < uses.length; ) {\n                // get the current <use>\n                var use = uses[index], parent = use.parentNode, svg = getSVGAncestor(parent), src = use.getAttribute(\"xlink:href\") || use.getAttribute(\"href\");\n                if (!src && opts.attributeName && (src = use.getAttribute(opts.attributeName)), \n                svg && src) {\n                    if (polyfill) {\n                        if (!opts.validate || opts.validate(src, svg, use)) {\n                            // remove the <use> element\n                            parent.removeChild(use);\n                            // parse the src and get the url and id\n                            var srcSplit = src.split(\"#\"), url = srcSplit.shift(), id = srcSplit.join(\"#\");\n                            // if the link is external\n                            if (url.length) {\n                                // get the cached xhr request\n                                var xhr = requests[url];\n                                // ensure the xhr request exists\n                                xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open(\"GET\", url), xhr.send(), \n                                xhr._embeds = []), // add the svg and id as an item to the xhr embeds list\n                                xhr._embeds.push({\n                                    parent: parent,\n                                    svg: svg,\n                                    id: id\n                                }), // prepare the xhr ready state change event\n                                loadreadystatechange(xhr);\n                            } else {\n                                // embed the local id into the svg\n                                embed(parent, svg, document.getElementById(id));\n                            }\n                        } else {\n                            // increase the index when the previous value was not \"valid\"\n                            ++index, ++numberOfSvgUseElementsToBypass;\n                        }\n                    }\n                } else {\n                    // increase the index when the previous value was not \"valid\"\n                    ++index;\n                }\n            }\n            // continue the interval\n            (!uses.length || uses.length - numberOfSvgUseElementsToBypass > 0) && requestAnimationFrame(oninterval, 67);\n        }\n        var polyfill, opts = Object(rawopts), newerIEUA = /\\bTrident\\/[567]\\b|\\bMSIE (?:9|10)\\.0\\b/, webkitUA = /\\bAppleWebKit\\/(\\d+)\\b/, olderEdgeUA = /\\bEdge\\/12\\.(\\d+)\\b/, edgeUA = /\\bEdge\\/.(\\d+)\\b/, inIframe = window.top !== window.self;\n        polyfill = \"polyfill\" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;\n        // create xhr requests object\n        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName(\"use\"), numberOfSvgUseElementsToBypass = 0;\n        // conditionally start the interval if the polyfill is active\n        polyfill && oninterval();\n    }\n    function getSVGAncestor(node) {\n        for (var svg = node; \"svg\" !== svg.nodeName.toLowerCase() && (svg = svg.parentNode); ) {}\n        return svg;\n    }\n    return svg4everybody;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSA0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49\n");

/***/ })
/******/ ]);